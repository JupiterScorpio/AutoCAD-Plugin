using Autodesk.AutoCAD.Runtime;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Geometry;
using Autodesk.AutoCAD.Customization;
using Autodesk.AutoCAD.Windows.Data;
using System.Collections.Specialized;
using System.IO;
using System.Windows.Forms;
using Exception = System.Exception;
using System.Text.RegularExpressions;
using Application = Autodesk.AutoCAD.ApplicationServices.Core.Application;
using Autodesk.AutoCAD.Colors;
using Excel = Microsoft.Office.Interop.Excel;
using AcadDocument = Autodesk.AutoCAD.ApplicationServices.Document;
using AcadWindows = Autodesk.AutoCAD.Windows;
using NBCLayers;
using winlichd;
using System.Windows.Input;
using Newtonsoft.Json;
using Autodesk.AutoCAD.Windows;
using static ProsoftAcPlugin.Plugin;
using static System.Net.WebRequestMethods;
using System.Globalization;
using System.Security.Policy;
using static System.Net.Mime.MediaTypeNames;
using System.Threading;
using Microsoft.Win32;
using System.ComponentModel;
//using Microsoft.Office.Interop.Excel;


namespace ProsoftAcPlugin
{
    public class Plugin
    {
        public enum use
        {
            Residential, Commercial, Institutional, Assembly, PublicUtility, TransportationandCommunication, EducationalandIndustrial,
            Medical, Storage, MixedUse, ParkingtowerorParkingcomplex
        }
        public enum apptype
        {
            General, Ressidentalless4000, Ressidentalabove4000
        }
        public enum projtype
        {
            BuildingPermission, SubDivision, EWSorLIGScheme, LayoutsOpenPlots, LayoutwithoutGatedCommunity,
            LayoutGatedCommunity, Amalgamation, MultistoriedBuildings, GroupScheme, CompoundWall, RowTypeHousingScheme,
            ClusterHousingScheme, ChangeLandUse
        }
        public enum casetype
        {
            New, AdditionorAlteration, Revision, ExtensionofPermission, ChangeLand, Renewal,
            RegularizationConstruction, Demolition, Regularizationlayouts
        }
        public enum religous
        {
            NA, within100, above100upto300, above300
        }
        public enum subloacation
        {
            New, Existing, Congested, Settlement, RevenueSurvey
        }
        public static string subuse;
        public enum m_enuAuthority
        {
            DTCP_GPs, HMDA_ULBs, HMDA_GPs, DTCP_UDAGps, DTCP_ULBs, GHMC, HMDA
        }
        public enum subAuthority
        {
            //"Municipalities/GP's/NP in HMDA area",  "All municipal corporation", " Municipalities/NP/GP in UDA areas", "Selection&Special Grade Muncipalities, other Muncipalities NP's/GPs"

        }
        public static int linewgt;
        public static uint usestate, apptypestate, projtypestate, casetypestate, religousstate, sublocationstate, subauthoritystate;
        public static uint authoritystate;
        public static bool b_PLAN;  // determine this project is PLAN or LAYOUT
        public static bool b_renamelyr; //determine rename or cancel not included layers
        public static string str_srclyrname, str_dstlyrname;
        public static string twopolystr1; // determine two polyline's move
        public static int dirrefcount = 0; //Direction Ref block count
        public static List<string> differentlyrs = new List<string>();
        public System.Drawing.Color[] _colors = new System.Drawing.Color[3]; //to store all the circle colors        
        public const string _defaultBlockName = "Concentric Circles"; //default block name if not set 
        public readonly Point3d _basePointCenter = new Point3d(5, 5, 0);
        public static List<string> lyrName = new List<string>();
        public static List<string> lyrOn = new List<string>();
        public static List<string> lyrFreeze = new List<string>();
        public static List<string> lyrLock = new List<string>();
        public static List<string> lyrColor = new List<string>();
        public static List<string> lyrLinetype = new List<string>();
        public static List<string> lyrLineweight = new List<string>();
        public static List<string> lyrTrans = new List<string>();
        public static List<string> lyrPlotstyle = new List<string>();
        public static List<string> lyrPlot = new List<string>();
        public static List<string> lyrNewVp = new List<string>();
        public static List<string> lyrUse = new List<string>();
        public static bool blnclosed;   // determine 
        public static List<string> unclosedlinelyrNm = new List<string>();
        public static List<string> unclosedlinePtStrt = new List<string>();
        public static List<string> unclosedlinePtEnd = new List<string>();
        public static bool blyrsh;
        public static string strCurDocPath = "", strCurJsonPath = "";
        public static Handle curhnd;
        public static ObjectId curoid;

        /// <summary>
        /// followings are used to rule check
        /// </summary>
        public static List<string> allLayers = new List<string>();
        public static List<Polyline> awindowpline = new List<Polyline>();
        public static List<Polyline> adoorpline = new List<Polyline>();
        public static List<Polyline> aroompline = new List<Polyline>();
        public static List<Polyline> aplotpline = new List<Polyline>();
        public static List<Polyline> amroadpline = new List<Polyline>();
        public static List<Polyline> aindvSubPltpline = new List<Polyline>();
        public static List<Polyline> ainterroadpline = new List<Polyline>();
        public static List<Polyline> aopenspacepline = new List<Polyline>();
        public static List<Polyline> aAmenitypline = new List<Polyline>();
        public static List<Polyline> aMortgageAreapline = new List<Polyline>();
        public static List<Polyline> asplaypline = new List<Polyline>();
        public static List<Polyline> aBufferpline = new List<Polyline>();
        public static List<Polyline> aElectricpline = new List<Polyline>();
        public static List<Polyline> aWaterBodypline = new List<Polyline>();
        public static List<Polyline> aWaterlinepline = new List<Polyline>();
        public static List<Polyline> aLeftownerspline = new List<Polyline>();
        public static List<Polyline> aSurAuthpline = new List<Polyline>();
        public static List<Polyline> aCompndwllpline = new List<Polyline>();
        public static List<Polyline> aElinepline = new List<Polyline>();
        public static List<Polyline> aGllvlpline = new List<Polyline>();
        public static List<Polyline> aFlrinSecpline = new List<Polyline>();
        public static Polyline aPropWrkpline = new Polyline();
        public static List<Polyline> aParkingpline = new List<Polyline>();
        public static List<Polyline> aDrivewaypline = new List<Polyline>();
        public static List<Polyline> arampline = new List<Polyline>();
        public static List<Polyline> aFloorpline = new List<Polyline>();
        public static List<Polyline> aVShaftpline = new List<Polyline>();
        public static List<Polyline> aVoidpline = new List<Polyline>();
        public static List<Polyline> aAccusepline = new List<Polyline>();
        public static List<Polyline> aNalapline = new List<Polyline>();
        public static List<Polyline> aStairpline = new List<Polyline>();
        public static List<Polyline> aPassagepline = new List<Polyline>();
        public static List<Polyline> aVenShaftpline = new List<Polyline>();
        public static List<Polyline> aRdWidepline = new List<Polyline>();
        public static List<Polyline> aSectionpline = new List<Polyline>();
        public static List<Line> aMargineline = new List<Line>();
        public static List<Polyline> azeropline = new List<Polyline>();
        public static List<Polyline> aprintaddpline = new List<Polyline>();
        public static List<Polyline> abuildingNmpline = new List<Polyline>();
        public static List<Polyline> aprpwrkpline = new List<Polyline>();
        public static List<Polyline> aResiBUApline = new List<Polyline>();
        public static List<Polyline> aSpecBUApline = new List<Polyline>();
        public static List<Polyline> aComBUApline = new List<Polyline>();
        public static List<Polyline> aIndBUApline = new List<Polyline>();
        public static List<Polyline> aCarpetpline = new List<Polyline>();
        public static List<Polyline> aLiftpline = new List<Polyline>();
        public static List<Polyline> aTerracepline = new List<Polyline>();
        public static List<Polyline> aSitePlanplilne = new List<Polyline>();        //09/10/2023 added
        public static List<Polyline> aBalconypline = new List<Polyline>();
        public static List<Polyline> anetpltpline = new List<Polyline>();

        public static List<MText> awindowNmTxt = new List<MText>();
        public static List<MText> aroomNmTxt = new List<MText>();
        public static List<MText> adoorNmTxt = new List<MText>();
        public static List<MText> aplotNmTxt = new List<MText>();
        public static List<MText> amroadNmTxt = new List<MText>();
        public static List<MText> aindvsubPltTxt = new List<MText>();
        public static List<MText> ainterroadTxt = new List<MText>();
        public static List<MText> aopenspaceTxt = new List<MText>();
        public static List<MText> aAmenityTxt = new List<MText>();
        public static List<MText> aMortgageAreaTxt = new List<MText>();
        public static List<MText> asplayTxt = new List<MText>();
        public static List<MText> aBufferTxt = new List<MText>();
        public static List<MText> aElectricTxt = new List<MText>();
        public static List<MText> aWaterBodyTxt = new List<MText>();
        public static List<MText> aWaterlineTxt = new List<MText>();
        public static List<MText> aLeftOwnersTxt = new List<MText>();
        public static List<MText> aSurAuthTxt = new List<MText>();
        public static List<MText> aCmpWallTxt = new List<MText>();
        public static List<MText> aElineTxt = new List<MText>();
        public static List<MText> aGllvlTxt = new List<MText>();
        public static List<MText> aFlrinSecTxt = new List<MText>();
        public static MText aPropWrkTxt = new MText();
        public static List<MText> aParkingTxt = new List<MText>();
        public static List<MText> aDrivewayTxt = new List<MText>();
        public static List<MText> arampTxt = new List<MText>();
        public static List<MText> aFloorTxt = new List<MText>();
        public static List<MText> aVShafttxt = new List<MText>();
        public static List<MText> aVoidTxt = new List<MText>();
        public static List<MText> aAccuseTxt = new List<MText>();
        public static List<MText> aNalaTxt = new List<MText>();
        public static List<MText> aStairTxt = new List<MText>();
        public static List<MText> aPassageTxt = new List<MText>();
        public static List<MText> aVenShaftTxt = new List<MText>();
        public static List<MText> aRdWideTxt = new List<MText>();
        public static List<MText> aZeromTxt = new List<MText>();
        public static List<Line> marginlinelist = new List<Line>();
        public static List<MText> aprintaddTxt = new List<MText>();
        public static List<MText> abldingNmTxt = new List<MText>();
        public static List<MText> aprpWrkTxt = new List<MText>();
        public static List<MText> aResiBUATxt = new List<MText>();
        public static List<MText> aSpecBUATxt = new List<MText>();
        public static List<MText> aComBUATxt = new List<MText>();
        public static List<MText> aIndBUATxt = new List<MText>();
        public static List<MText> aCarpetTxt = new List<MText>();
        public static List<MText> aSecTxt = new List<MText>();
        public static List<MText> aLiftTxt = new List<MText>();
        public static List<MText> aTerraceTxt = new List<MText>();
        public static List<MText> aSitePlanpTxt = new List<MText>();        //09/10/2023 added
        public static List<MText> aBalconyTxt = new List<MText>();
        public static List<MText> anetpltTxt = new List<MText>();

        public static List<DBText> aFlrinSecSTxt = new List<DBText>();
        public static List<DBText> aFloorsTxt = new List<DBText>();
        public static List<DBText> aZeroTxt = new List<DBText>();
        public static List<DBText> asplyDBTxt = new List<DBText>();
        public static List<DBText> ainterloadDBTxt = new List<DBText>();
        public static List<DBText> aindvsubDBTxt = new List<DBText>();
        public static List<DBText> apltDBTxt = new List<DBText>();
        public static List<DBText> acmpndWallDBTxt = new List<DBText>();
        public static List<DBText> aTerraceDBTxt = new List<DBText>();      //09.02 added
        public static List<DBText> aLiftDBTxt = new List<DBText>();      //09.02 added
        public static List<DBText> aVenShaftDBTxt = new List<DBText>();     //09.23 added
        public static List<DBText> aWindDBTxt = new List<DBText>();
        public static List<DBText> aRoomDBTxt = new List<DBText>();
        public static List<DBText> aDoorDBTxt = new List<DBText>();
        public static List<DBText> aMroadDBTxt = new List<DBText>();
        public static List<DBText> aOrgOpenDBTxt = new List<DBText>();
        public static List<DBText> aAmenDBTxt = new List<DBText>();
        public static List<DBText> aMortgageDBTxt = new List<DBText>();
        public static List<DBText> aBufferDBTxt = new List<DBText>();
        public static List<DBText> aWaterBodDBTxt = new List<DBText>();
        public static List<DBText> aWaterLnDBTxt = new List<DBText>();
        public static List<DBText> aLeftOverDBTxt = new List<DBText>();
        public static List<DBText> aSurrenderDBTxt = new List<DBText>();
        public static List<DBText> aElectricDBTxt = new List<DBText>();
        public static List<DBText> aGroundDBTxt = new List<DBText>();
        public static List<DBText> aPrpWrkDBTxt = new List<DBText>();
        public static List<DBText> aParkDBTxt = new List<DBText>();
        public static List<DBText> aDrvwayDBTxt = new List<DBText>();
        public static List<DBText> aRampDBTxt = new List<DBText>();
        public static List<DBText> aSlabcutoutDBTxt = new List<DBText>();
        public static List<DBText> aAccesUseDBTxt = new List<DBText>();
        public static List<DBText> aNalaDBText = new List<DBText>();
        public static List<DBText> aStairDBText = new List<DBText>();
        public static List<DBText> aPassageDBTxt = new List<DBText>();
        public static List<DBText> aRdWideDBTxt = new List<DBText>();
        public static List<DBText> aPrintaddtionDBTxt = new List<DBText>();
        public static List<DBText> aBuildNameDBTxt = new List<DBText>();
        public static List<DBText> aResiBuaDBTxt = new List<DBText>();
        public static List<DBText> aspecialuseBUaDBTxt = new List<DBText>();
        public static List<DBText> aCommBUADBTxt = new List<DBText>();
        public static List<DBText> aIndBUADBTxt = new List<DBText>();
        public static List<DBText> aCarpetDBTxt = new List<DBText>();
        public static List<DBText> aSectionDBTxt = new List<DBText>();
        public static List<DBText> aSitePlanpDBTxt = new List<DBText>();        //09/10/2023 added
        public static List<DBText> aBalconyDBTxt = new List<DBText>();
        public static List<DBText> anetpltDBTxt = new List<DBText>();


        public static float nCurwidth, nCurheight, nCurDepth;        //door, window width and height
        public static string windowkind;
        public static string doorkind;
        Polyline curPline;
        public static double LeftOwnerArea = 0, SurroundtoAuthorityArea = 0;
        public static string ANexistRdwidth, ANpropRdwidth;      //only use assign name-road
        public static bool bANRd = false;
        public static bool bANPge = false;          //only use assign name-passage
        public static bool bARoom;
        public static string ANPgeitem, ANPgewidth;
        public static string ANRmpwidth, ANRmplngh, ANRmphght, ANrmpitem;      //only use assign name-ramp
        public static bool bANRmp = false;
        public static string ANBNPwing, ANBNPbuilding;          //only use assign name-building and proposed work
        public static bool bANBNP = false;
        public static int bANBNPlnCnt = 0;
        public static Polyline ANBNPpl1, ANBNPpl2;
        public static Transaction ANBnPTrans;
        public static int eLinestate = -1;
        public static double fmarginwidth, fmargindepth;
        public static bool bautoupdate = false;

    }
    public class Commands : IExtensionApplication
    {
        public static List<windowrule> awindowrule = new List<windowrule>();
        public static List<doorrule> adoorrule = new List<doorrule>();
        public static List<roomrule> aroomrule = new List<roomrule>();
        public static List<plotrule> aplotrule = new List<plotrule>();
        public static List<openspacerule> aopenspacerule = new List<openspacerule>();
        public static List<indvSubPlotrule> aindvsubPltrule = new List<indvSubPlotrule>();
        public static List<amenityrule> aAmenrule = new List<amenityrule>();
        public static List<mroadrule> amroadrule = new List<mroadrule>();
        public static List<aMortrule> amortrule = new List<aMortrule>();
        public static List<aSplayrule> asplayrule = new List<aSplayrule>();
        public static List<abufferzonerule> abufrule = new List<abufferzonerule>();
        public static List<aLeftownersrule> aleftownerrule = new List<aLeftownersrule>();
        public static List<aSurroundtoAuthorityrule> asurAuthrule = new List<aSurroundtoAuthorityrule>();
        public static List<aCmpWallrule> aCmpwallrule = new List<aCmpWallrule>();
        public static List<aFlorInSec> aFlrsecrule = new List<aFlorInSec>();
        public static List<aStair> aStairrule = new List<aStair>();
        public static List<Xrecord> xlist = new List<Xrecord>();    //unused
        public static List<JsonItems> JsonLst = new List<JsonItems>();
        public static List<Point3d> marginPtlst = new List<Point3d>(); 

        public static List<ruleError> errlist = new List<ruleError>();

        public static List<string> windowerrcause = new List<string>();
        public static List<string> roomerrcause = new List<string>();

        public static List<string> floornamelst = new List<string>();
        bool bLpmhs;    // This means Layer properties Manager is hide or show.
        public static bool bwremark;
        public static Polyline curPLine;
        private DocumentCollection docMgr = Application.DocumentManager;
        public static string strTemplatePath = "acad.dwt";   //This is autocad template.
        public static bool bNewproj;        // This is true when new project is created with this plugin.
        public static string tmproomName;   // This is RoomName that is selected in RoomNameForm.
        public static string tmpfloorsectionName,tmpfloorName; // This is floorName that is selected in FloorNameForm.
        public static bool bflrReassign;
        public static string tmpmarkstring;      // marking mainroad name.
        public static bool brmnamechanged;  // this get room name is selected in RoomNameForm.
        public static bool bfloorTypical;
        public static string InsdoorName;
        public static string InsFiredoorName;
        public static string InsFiregateName;
        public static string InswindName;
        public static string InsProjstr;
        public const double Pi = 3.141592;
        public int selcount = 0;
        public static bool brulefinished = false;
        public void Initialize()
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Editor ed = doc.Editor;
            BuildMenuCUI();
            docMgr.DocumentCreated += DocumentCreated;
            bLpmhs = true;
            doc.SendStringToExecute(
              "LAYERCLOSE" + "\n",
              false, false, false);
            bNewproj = false;
            Application.SetSystemVariable("FILEDIA", 1);
            SubscribeToDoc(doc);
            Plugin.eLinestate = -1;
            CheckingValidEntity();
            string assemblyVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString();
            //Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Preval");
            //Application.ShowAlertDialog(key.GetValue("Set1").ToString());
            //if (key == null)
            //{
            //    key = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Preval");
            //    key.SetValue("Set1", "disable");
            //    key.Close();
            //}
            //else
            //{
            //    if (key.GetValue("Set1").ToString() == ("enable"))
            //    {
            //        Plugin.bautoupdate = true;
            //        key.Close();
            //    }
            //    else
            //    {
            //        Plugin.bautoupdate = false;
            //        key.Close();
            //    }
            //}

            //Application.ShowAlertDialog(assemblyVersion);
        }
        private void DocumentCreated(object sender, DocumentCollectionEventArgs e)
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            doc.SendStringToExecute("Application" + "\n", false, false, false);
            bLpmhs = true;
            doc.SendStringToExecute(
              "LAYERCLOSE" + "\n",
              false, false, false);
            JsonLst = ReadFromNod();
            WriteAllList(Commands.JsonLst);
            Plugin.allLayers = LayersToList(db);
            foreach (string layername in Plugin.allLayers)
            {
                NBCrelate.GetNeededEntitiesOnLayer(db, layername);
            }
        }
        void SelectionAddedCallback(object sender, SelectionAddedEventArgs e)
        {
            ObjectId[] ids = e.AddedObjects.GetObjectIds(); // <- newly added objects
                                                            
        }
        private static void readExcel()
        {
            Excel.Application xlApp;
            Excel.Workbook xlWorkBook;
            Excel.Worksheet xlWorkSheet;
            Excel.Range range;
            string str;
            int rCnt = 0;
            int cCnt = 0;
            string strpath = Environment.ExpandEnvironmentVariables("%ProgramFiles%\\Autodesk\\ApplicationPlugins\\Preval.bundle");
            strpath = strpath.Replace(" (x86)", ""); 
            strpath = strpath + "\\Contents\\" + "layer details.xlsx";
            try
            {
                if (System.IO.File.Exists(strpath))
                {
                    xlApp = new Excel.Application();
                    xlWorkBook = xlApp.Workbooks.Open(strpath, 0, true, 5, "", "", true,
                        Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0);
                    xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);
                    range = xlWorkSheet.UsedRange;
                    for (rCnt = 2; rCnt <= range.Rows.Count; rCnt++)
                    {
                        for (cCnt = 2; cCnt <= range.Columns.Count; cCnt++)
                        {
                            str = Convert.ToString((range.Cells[rCnt, cCnt] as Excel.Range).Value2);
                            switch (cCnt)
                            {
                                case 2:
                                    Plugin.lyrName.Add(str);
                                    break;
                                case 3:
                                    Plugin.lyrOn.Add(str);
                                    break;
                                case 4:
                                    Plugin.lyrFreeze.Add(str);
                                    break;
                                case 5:
                                    Plugin.lyrLock.Add(str);
                                    break;
                                case 6:
                                    Plugin.lyrColor.Add(str);
                                    break;
                                case 7:
                                    Plugin.lyrLinetype.Add(str);
                                    break;
                                case 8:
                                    Plugin.lyrLineweight.Add(str);
                                    break;
                                case 9:
                                    Plugin.lyrTrans.Add(str);
                                    break;
                                case 10:
                                    Plugin.lyrPlotstyle.Add(str);
                                    break;
                                case 11:
                                    Plugin.lyrPlot.Add(str);
                                    break;
                                case 12:
                                    Plugin.lyrNewVp.Add(str);
                                    break;
                                case 13:
                                    Plugin.lyrUse.Add(str);
                                    break;
                            }
                        }
                    }
                    xlWorkBook.Close(true, null, null);
                    xlApp.Quit();
                    releaseObject(xlWorkSheet);
                    releaseObject(xlWorkBook);
                    releaseObject(xlApp);
                }
                else
                {
                    MessageBox.Show(strpath + " LayerList File does not Exist");
                }
            }
            catch
            {
                return;
            }            
            
        }
        private static void releaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch (Exception ex)
            {
                obj = null;
                //MessageBox.Show("Unable to release the Object " + ex.ToString());
            }
            finally
            {
                GC.Collect();
            }
        }
        public void Terminate()
        {
            //Class1 encrypt = new Class1();
            //encrypt.VCrypt();
        }
        public void BuildMenuCUI()
        {
            string myCuiFile = Environment.ExpandEnvironmentVariables("%ProgramFiles%\\Autodesk\\ApplicationPlugins\\Preval.bundle");
            myCuiFile = myCuiFile.Replace(" (x86)", "");
            myCuiFile = myCuiFile + "\\Contents\\" + "Preval.cuix";
            string myCuiFileToSend = myCuiFile;
            Editor ed = Application.DocumentManager.MdiActiveDocument.Editor;
            string mainCui = Application.GetSystemVariable("MENUNAME") + ".cuix";
            CustomizationSection cs =
              new CustomizationSection(mainCui);
            PartialCuiFileCollection pcfc = cs.PartialCuiFiles;
            if (pcfc.Contains(myCuiFile))
            {
                ed.WriteMessage(
                  "\nCustomization file \""
                  + myCuiFile
                  + "\" already loaded."
                );
            }
            else
            {
                if (System.IO.File.Exists(myCuiFile))
                {
                    ed.WriteMessage(
                      "\nCustomization file \""
                      + myCuiFile
                      + "\" exists - loading it."
                    );
                    LoadMyCui(myCuiFileToSend);
                }
                else
                {
                    ed.WriteMessage(
                      "\nCustomization file \""
                      + myCuiFile
                      + "\" does not exist - building it."
                    );                    
                }
            }
        }
        private void LoadMyCui(string cuiFile)
        {
            Document doc =
                Application.DocumentManager.MdiActiveDocument;
            object oldCmdEcho =
              Application.GetSystemVariable("CMDECHO");
            object oldFileDia =
              Application.GetSystemVariable("FILEDIA");
            Application.SetSystemVariable("CMDECHO", 0);
            Application.SetSystemVariable("FILEDIA", 0);
            doc.SendStringToExecute(
              "_.cuiload "
              + cuiFile
              + " ",
              false, false, false
            );
        }
        public static void AddDoc()
        {
            string strTemplatePath = "acad.dwt";
            DocumentCollection acDocMgr = Application.DocumentManager;
            Document acDoc = acDocMgr.Add(strTemplatePath);
            acDocMgr.MdiActiveDocument = acDoc;
            SignDraw(acDoc);

        }
        public static void SignDraw(Document curdoc)
        {
            var database = curdoc.Database;
            var ed = curdoc.Editor;
            try
            {
                using (DocumentLock docLock = curdoc.LockDocument())
                {
                    using (Transaction acTrans = database.TransactionManager.StartTransaction())
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = acTrans.GetObject(database.BlockTableId,
                                                               OpenMode.ForRead, false, true) as BlockTable;
                        BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                  OpenMode.ForWrite) as BlockTableRecord;
                        MText acMText = new MText();
                        acMText.SetDatabaseDefaults();
                        acMText.Location = new Point3d(2, 2, 0);
                        acMText.Width = 4;
                        acMText.Contents = "Product Sign";
                        acBlkTblRec.AppendEntity(acMText);
                        acTrans.AddNewlyCreatedDBObject(acMText, true);
                        acTrans.Commit();
                    }
                    ed.UpdateScreen();
                }
            }
            catch
            {
                return;
            }
            
        }
        public void ChangeLayerOfEntitiess()
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;
            Editor ed = doc.Editor;
            PromptStringOptions pso = new PromptStringOptions("\nEnter name of layer to search for: ");
            pso.AllowSpaces = true;
            PromptResult pr = ed.GetString(pso);

            if (pr.Status != PromptStatus.OK)
                return;

            string layerName = pr.StringResult;
            TypedValue[] tvs = new TypedValue[1];
            tvs[0] = new TypedValue((int)DxfCode.LayerName, layerName);
            SelectionFilter sf = new SelectionFilter(tvs);
            PromptSelectionResult psr = ed.SelectAll(sf);
            int count = 0;
            if (psr.Status == PromptStatus.OK)
                count = psr.Value.Count;
            if (psr.Status == PromptStatus.OK || psr.Status == PromptStatus.Error)
            {
                ed.WriteMessage(
                  "\nFound {0} entit{1} on layer \"{2}\".",
                  count, count == 1 ? "y" : "ies", layerName);
                try
                {
                    if (count > 0)
                    {
                        pso.Message = "\nEnter new layer for these entities " + "or return to leave them alone: ";
                        pr = ed.GetString(pso);
                        if (pr.Status != PromptStatus.OK || pr.StringResult == "")
                            return;
                        string newLayerName = pr.StringResult;
                        Transaction tr = db.TransactionManager.StartTransaction();
                        using (tr)
                        {
                            LayerTable lt = (LayerTable)tr.GetObject(db.LayerTableId, OpenMode.ForRead);
                            if (!lt.Has(newLayerName))
                                ed.WriteMessage("\nLayer not found.");
                            else
                            {
                                int changedCount = 0;
                                ObjectId lid = lt[newLayerName];
                                foreach (ObjectId id in psr.Value.GetObjectIds())
                                {
                                    Entity ent = (Entity)tr.GetObject(id, OpenMode.ForWrite);
                                    ent.LayerId = lid;
                                    changedCount++;
                                }
                                ed.WriteMessage("\nChanged {0} entit{1} from " +
                                  "layer \"{2}\" to layer \"{3}\".", changedCount,
                                  changedCount == 1 ? "y" : "ies", layerName,
                                  newLayerName);
                            }
                            tr.Commit();
                        }
                    }
                }
                catch 
                {
                    return;
                }                
            }
        }
        private string GetViewName(Vector3d viewDirection)
        {
            double sqrt033 = Math.Sqrt(1.0 / 3.0);
            switch (viewDirection.GetNormal())
            {
                case Vector3d v when v.IsEqualTo(Vector3d.ZAxis): return "Top";
                case Vector3d v when v.IsEqualTo(Vector3d.ZAxis.Negate()): return "Bottom";
                case Vector3d v when v.IsEqualTo(Vector3d.XAxis): return "Right";
                case Vector3d v when v.IsEqualTo(Vector3d.XAxis.Negate()): return "Left";
                case Vector3d v when v.IsEqualTo(Vector3d.YAxis): return "Back";
                case Vector3d v when v.IsEqualTo(Vector3d.YAxis.Negate()): return "Front";
                case Vector3d v when v.IsEqualTo(new Vector3d(sqrt033, sqrt033, sqrt033)): return "NE Isometric";
                case Vector3d v when v.IsEqualTo(new Vector3d(-sqrt033, sqrt033, sqrt033)): return "NW Isometric";
                case Vector3d v when v.IsEqualTo(new Vector3d(-sqrt033, -sqrt033, sqrt033)): return "SW Isometric";
                case Vector3d v when v.IsEqualTo(new Vector3d(sqrt033, -sqrt033, sqrt033)): return "SE Isometric";
                default: return $"Custom View";
            }
        }
        private static Polyline GeneratePartialPolyline(Polyline pLine, Point3d startPt, Point3d endPt)
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            var ed = currentDocument.Editor;
            Polyline poly = null;
            using (var tran = database.TransactionManager.StartTransaction())
            {
                Point3dCollection points = new Point3dCollection();
                if (startPt.IsEqualTo(pLine.StartPoint) && endPt.IsEqualTo(pLine.EndPoint))
                {
                    poly = pLine.Clone() as Polyline;
                }
                else
                {
                    if (startPt.IsEqualTo(pLine.StartPoint))
                    {
                        points.Add(endPt);

                        var dbObjects = pLine.GetSplitCurves(points);
                        if (dbObjects.Count == 2)
                        {
                            poly = dbObjects[0] as Polyline;
                            dbObjects[1].Dispose();
                        }
                        else
                        {
                            foreach (DBObject obj in dbObjects)
                            {
                                obj.Dispose();
                            }
                        }
                    }
                    else if (endPt.IsEqualTo(pLine.EndPoint))
                    {
                        points.Add(startPt);

                        var dbObjects = pLine.GetSplitCurves(points);
                        if (dbObjects.Count == 2)
                        {
                            poly = dbObjects[1] as Polyline;
                            dbObjects[0].Dispose();
                        }
                        else
                        {
                            foreach (DBObject obj in dbObjects)
                            {
                                obj.Dispose();
                            }
                        }
                    }
                    else
                    {
                        points.Add(startPt);
                        points.Add(endPt);
                        var dbObjects = pLine.GetSplitCurves(points);
                        if (dbObjects.Count == 3)
                        {
                            poly = dbObjects[1] as Polyline;
                            dbObjects[0].Dispose();
                            dbObjects[2].Dispose();
                        }
                        else if (dbObjects.Count == 2)
                        {

                            poly = dbObjects[0] as Polyline;
                            dbObjects[1].Dispose();
                        }
                        else
                        {
                            foreach (DBObject obj in dbObjects)
                            {
                                obj.Dispose();
                            }
                        }
                    }
                }
                tran.Commit();
            }
            return poly;
        }
        public static void Frontmargin()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            var ed = currentDocument.Editor;
            SetLayerCurrent("_Plot");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline Line: ");
            options.SetRejectMessage("\nSelected object is no a Plot Line.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            try
            {
                using (DocumentLock docLock = currentDocument.LockDocument())
                {
                    using (Transaction tr = database.TransactionManager.StartTransaction())
                    {
                        BlockTableRecord btr = (BlockTableRecord)tr.GetObject(database.CurrentSpaceId, OpenMode.ForWrite);
                        if (result.Status == PromptStatus.OK)
                        {
                            Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForWrite, false) as Polyline;
                            if (poly.Closed)
                            {
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);

                                Line acLine = new Line(sp, ep);
                                acLine.Color = Getcolor("red");
                                acLine.Layer = "_Plot";
                                Plugin.marginlinelist.Add(acLine);
                                //btr.AppendEntity(acLine);
                                //tr.AddNewlyCreatedDBObject(acLine, true);
                                Application.ShowAlertDialog("Front selected.");
                                marginPtlst.Add(sp);
                                marginPtlst.Add(ep);
                            }
                            else
                                Application.ShowAlertDialog("Select a Closed Polyline.");
                        }
                        tr.Commit();
                    }
                }
            }
            catch 
            {
                return;
            }
            
        }
        public static void Rearmargin()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            var ed = currentDocument.Editor;
            SetLayerCurrent("_Plot");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline Line: ");
            options.SetRejectMessage("\nSelected object is no a Plot Line.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            using (DocumentLock docLock = currentDocument.LockDocument())
            {
                using (Transaction tr = database.TransactionManager.StartTransaction())
                {
                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(database.CurrentSpaceId, OpenMode.ForWrite);
                    if (result.Status == PromptStatus.OK)
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForWrite, false) as Polyline;
                        if(poly.Closed)
                        {
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);

                            Line acLine = new Line(sp, ep);
                            acLine.Color = Getcolor("magenta");
                            acLine.Layer = "_Plot";
                            Plugin.marginlinelist.Add(acLine);
                            //btr.AppendEntity(acLine);
                            //tr.AddNewlyCreatedDBObject(acLine, true);
                            Application.ShowAlertDialog("Rear selected.");
                            marginPtlst.Add(sp);
                            marginPtlst.Add(ep);
                        }
                        else
                            Application.ShowAlertDialog("Select a Closed Polyline.");
                    }
                    tr.Commit();
                }
            }
        }
        public static void Side1margin()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            var ed = currentDocument.Editor;
            SetLayerCurrent("_Plot");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline Line: ");
            options.SetRejectMessage("\nSelected object is no a Plot Line.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            using (DocumentLock docLock = currentDocument.LockDocument())
            {
                using (Transaction tr = database.TransactionManager.StartTransaction())
                {
                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(database.CurrentSpaceId, OpenMode.ForWrite);
                    if (result.Status == PromptStatus.OK)
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForWrite, false) as Polyline;
                        if(poly.Closed)
                        {
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);

                            Line acLine = new Line(sp, ep);
                            acLine.Color = Getcolor("blue");
                            acLine.Layer = "_Plot";
                            Plugin.marginlinelist.Add(acLine);
                            //btr.AppendEntity(acLine);
                            //tr.AddNewlyCreatedDBObject(acLine, true);
                            Application.ShowAlertDialog("Side1 selected.");
                            marginPtlst.Add(sp);
                            marginPtlst.Add(ep);
                        }
                        else
                            Application.ShowAlertDialog("Select a Closed Polyline.");
                    }
                    tr.Commit();                    
                }
            }
        }
        public static void Side2margin()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            var ed = currentDocument.Editor;
            SetLayerCurrent("_Plot");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline Line: ");
            options.SetRejectMessage("\nSelected object is no a Plot Line.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            using (DocumentLock docLock = currentDocument.LockDocument())
            {
                using (Transaction tr = database.TransactionManager.StartTransaction())
                {
                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(database.CurrentSpaceId, OpenMode.ForWrite);
                    if (result.Status == PromptStatus.OK)
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForWrite, false) as Polyline;
                        if(poly.Closed)
                        {
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);

                            Line acLine = new Line(sp, ep);
                            acLine.Color = Getcolor("green");
                            acLine.Layer = "_Plot";
                            Plugin.marginlinelist.Add(acLine);
                            //btr.AppendEntity(acLine);
                            //tr.AddNewlyCreatedDBObject(acLine, true);
                            Application.ShowAlertDialog("Side2 selected.");
                            marginPtlst.Add(sp);
                            marginPtlst.Add(ep);
                        }                        
                        else
                            Application.ShowAlertDialog("Select a Closed Polyline.");
                    }
                    tr.Commit();
                }
            }
        }
        public static void MarginBlock()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            var ed = currentDocument.Editor;
            using (DocumentLock docLock = currentDocument.LockDocument())
            {                
                using (Transaction tr = database.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(database.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        if(acBlkTbl.Has("Margin_PreVal"))
                        {
                            //ed.WriteMessage("\nA block with this name already exists.");
                            //PromptStringOptions pso =new PromptStringOptions("\nEnter new block name: ");
                            //pso.AllowSpaces = true;
                            //PromptResult pr = ed.GetString(pso);
                            //if (pr.Status != PromptStatus.OK)
                            //    return;
                            //SymbolUtilityServices.ValidateSymbolName(pr.StringResult, false);
                            BlockTableRecord acBlkTblRec = new BlockTableRecord();
                            acBlkTblRec.Name = "Margin_PreVal" + System.DateTime.Now.Hour.ToString()+System.DateTime.Now.Millisecond.ToString()
                                +System.DateTime.Now.Minute.ToString();
                            acBlkTbl.UpgradeOpen();
                            ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                            tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                            DBObjectCollection ents = new DBObjectCollection();
                            foreach (Line pl in Plugin.marginlinelist)
                            {
                                ents.Add((pl));
                            }
                            foreach (Entity ent in ents)
                            {
                                acBlkTblRec.AppendEntity(ent);
                                tr.AddNewlyCreatedDBObject(ent, true);
                            }
                            BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                            var br = new BlockReference(Point3d.Origin, btrId);
                            ms.AppendEntity(br);
                            tr.AddNewlyCreatedDBObject(br, true);
                            tr.Commit();
                        }
                        else
                        {
                            BlockTableRecord acBlkTblRec = new BlockTableRecord();
                            acBlkTblRec.Name = "Margin_PreVal";
                            acBlkTbl.UpgradeOpen();
                            ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                            tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                            DBObjectCollection ents = new DBObjectCollection();
                            foreach (Line pl in Plugin.marginlinelist)
                            {
                                ents.Add((pl));
                            }
                            foreach (Entity ent in ents)
                            {
                                acBlkTblRec.AppendEntity(ent);
                                tr.AddNewlyCreatedDBObject(ent, true);
                            }
                            BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                            var br = new BlockReference(Point3d.Origin, btrId);
                            ms.AppendEntity(br);
                            tr.AddNewlyCreatedDBObject(br, true);
                            tr.Commit();
                        }
                        Plugin.marginlinelist.Clear();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        public static double PlotDepth()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            //Point2d pt1, pt2;
            using (Transaction acCurrTrans = db.TransactionManager.StartTransaction())
            {
                SetLayerCurrent("_Plot");
                Document acDoc = Application.DocumentManager.MdiActiveDocument;
                Database acCurDb = acDoc.Database;
                PromptPointResult pPtRes;
                PromptPointOptions pPtOpts = new PromptPointOptions("");
                // Prompt for the start point
                pPtOpts.Message = "\nEnter the start point of the Line: ";
                pPtRes = acDoc.Editor.GetPoint(pPtOpts);
                Point3d ptStart = pPtRes.Value;
                // Prompt for the end point
                pPtOpts.Message = "\nEnter the end point of the Line: ";
                pPtOpts.UseBasePoint = true;
                pPtOpts.BasePoint = ptStart;
                pPtRes = acDoc.Editor.GetPoint(pPtOpts);
                Point3d ptEnd = pPtRes.Value;
                Plugin.fmargindepth = Math.Abs(ptStart.Y - ptEnd.Y);
                acCurrTrans.Commit();
            }
            return Plugin.fmargindepth;
        }
        public static double PlotWidth()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            //Point2d pt1, pt2;
            using (Transaction acCurrTrans = db.TransactionManager.StartTransaction())
            {
                SetLayerCurrent("_Plot");
                Document acDoc = Application.DocumentManager.MdiActiveDocument;
                Database acCurDb = acDoc.Database;
                PromptPointResult pPtRes;
                PromptPointOptions pPtOpts = new PromptPointOptions("");
                // Prompt for the start point

                pPtOpts.Message = "\nEnter the start point of the Line: ";
                pPtRes = acDoc.Editor.GetPoint(pPtOpts);
                Point3d ptStart = pPtRes.Value;
                // Prompt for the end point
                pPtOpts.Message = "\nEnter the end point of the Line: ";
                pPtOpts.UseBasePoint = true;
                pPtOpts.BasePoint = ptStart;

                pPtRes = acDoc.Editor.GetPoint(pPtOpts);
                Point3d ptEnd = pPtRes.Value;
                Plugin.fmarginwidth = Math.Abs(ptEnd.X - ptStart.X);
                acCurrTrans.Commit();
            }
            return Plugin.fmarginwidth;
        }
        public static void MarginSave()
        {

        }
        public void GetPolylineEntitiesOnLayer(Database db, string layerName)
        {
            using (var tr = db.TransactionManager.StartOpenCloseTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                foreach (ObjectId btrId in blockTable)
                {
                    var btr = (BlockTableRecord)tr.GetObject(btrId, OpenMode.ForRead);
                    var PLineCls = RXObject.GetClass(typeof(Polyline));
                    if (btr.IsLayout)
                    {
                        foreach (ObjectId id in btr)
                        {
                            if (id.ObjectClass == PLineCls)
                            {
                                try
                                {
                                    var pLine = (Polyline)tr.GetObject(id, OpenMode.ForRead);
                                    if (pLine.Layer.Equals(layerName, System.StringComparison.CurrentCultureIgnoreCase))
                                    {
                                        if (!pLine.Closed)
                                        {
                                            Point3d startpt = pLine.StartPoint;
                                            Point3d endpt = pLine.EndPoint;
                                            Plugin.blnclosed = false;
                                            Plugin.unclosedlinelyrNm.Add(layerName);
                                            Plugin.unclosedlinePtStrt.Add(Convert.ToString(Convert.ToInt32(startpt.X)) + ", " + Convert.ToString(Convert.ToInt32(startpt.Y)));
                                            Plugin.unclosedlinePtEnd.Add(Convert.ToString(Convert.ToInt32(endpt.X)) + ", " + Convert.ToString(Convert.ToInt32(endpt.Y)));
                                        }
                                    }
                                }
                                catch
                                {
                                    throw;
                                }                                
                            }
                        }
                    }
                }
            }
        }
        public static Polyline GetPlotLine(string layername)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Polyline resultpLine = null;
            int cnt = 0;
            using (var tr = db.TransactionManager.StartOpenCloseTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                foreach (ObjectId btrId in blockTable)
                {
                    var btr = (BlockTableRecord)tr.GetObject(btrId, OpenMode.ForRead);
                    var PLineCls = RXObject.GetClass(typeof(Polyline));
                    if (btr.IsLayout)
                    {
                        foreach (ObjectId id in btr)
                        {
                            if (id.ObjectClass == PLineCls)
                            {
                                var pLine = (Polyline)tr.GetObject(id, OpenMode.ForRead);
                                if (pLine.Layer.Equals(layername, System.StringComparison.CurrentCultureIgnoreCase))
                                {
                                    if(pLine.Closed)
                                    {
                                        resultpLine = pLine;
                                        cnt++;
                                    }
                                }
                            }
                        }
                    }
                }
                if (cnt > 1)
                {
                    PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
                    options.SetRejectMessage("\nSelected object is no a Polyline.");
                    options.AddAllowedClass(typeof(Polyline), true);
                    PromptEntityResult result = ed.GetEntity(options);
                    resultpLine = tr.GetObject(result.ObjectId, OpenMode.ForRead) as Polyline;
                }                
            }
            return resultpLine;
        }
        public static void SetLayerCurrent(string curlay)
        {
            Document acDoc = Application.DocumentManager.MdiActiveDocument;
            Database acCurDb = acDoc.Database;
            using (DocumentLock docLock = acDoc.LockDocument())
            {
                using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
                {
                    try
                    {
                        LayerTable acLyrTbl;
                        acLyrTbl = acTrans.GetObject(acCurDb.LayerTableId,
                                                           OpenMode.ForRead) as LayerTable;
                        string sLayerName = curlay;
                        if (acLyrTbl.Has(sLayerName) == true&& (string)Application.GetSystemVariable("clayer") != curlay)
                        {
                            // Set the layer Center current
                            acCurDb.Clayer = acLyrTbl[sLayerName];
                            // Save the changes
                            acTrans.Commit();
                        }
                    }
                    catch
                    {

                    }
                }
            }

        }
        public static ObjectId SetLayerTransparency(string layerName, Byte layerTransparency)
        {
            Document activeDoc = Application.DocumentManager.MdiActiveDocument;
            Database db = activeDoc.Database;
            ObjectId layerId = ObjectId.Null;
            bool done = false;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                try
                {
                    LayerTable lt = tr.GetObject(db.LayerTableId, OpenMode.ForWrite) as LayerTable;
                    if (lt.Has(layerName))
                    {
                        layerId = lt[layerName];
                        LayerTableRecord ltr = tr.GetObject(layerId, OpenMode.ForWrite) as LayerTableRecord;
                        Byte alpha = (Byte)(255 * (100 - layerTransparency) / 100);
                        Transparency trans = new Transparency(alpha);
                        ltr.Transparency = trans;
                        done = true;
                    }
                    tr.Commit();
                }
                catch
                {
                    throw;
                }
                
            }
            if (done)
            {
                // RefreshEntities(layerId, activeDoc, db);
            }
            return layerId;
        }
        private void RefreshEntities(ObjectId layerId, Document activeDoc, Database db)
        {
            using (DocumentLock docLock = activeDoc.LockDocument())
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    BlockTable bt = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord btr = tr.GetObject(bt[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;

                    foreach (ObjectId entityId in btr)
                    {
                        Entity ent = tr.GetObject(entityId, OpenMode.ForRead) as Entity;
                        if (ent.LayerId.Equals(layerId))
                        {
                            ent.UpgradeOpen();
                            ent.RecordGraphicsModified(true);
                        }
                    }
                    tr.Commit();
                }
            }
        }
        public static Color Getcolor(string str)
        {
            Color result = Color.FromColorIndex(ColorMethod.ByAci, 1);
            Regex regex1 = new Regex(@"^[0-9]{1}$");
            Regex regex2 = new Regex(@"^[0-9]{2}$");
            Regex regex3 = new Regex(@"^[0-9]{3}$");
            if (regex1.IsMatch(str) || regex2.IsMatch(str) || regex3.IsMatch(str))
            {
                result = Color.FromColorIndex(ColorMethod.ByAci, (short)Convert.ToInt16(str));
            }
            else
            if (str.Contains(","))
            {
                str = str.Trim();
                str = str.Replace("(", "");
                str = str.Replace(")", "");
                string[] r = str.Split(',');
                //byte r=str.
                result = Color.FromRgb(Convert.ToByte(r[0].Trim()), Convert.ToByte(r[1].Trim()), Convert.ToByte(r[2].Trim()));
            }
            else
            {
                str = str.ToLower();
                switch (str)
                {
                    case "red":
                        result = Color.FromColorIndex(ColorMethod.ByAci, 1);
                        break;
                    case "yellow":
                        result = Color.FromColorIndex(ColorMethod.ByAci, 2);
                        break;
                    case "green":
                        result = Color.FromColorIndex(ColorMethod.ByAci, 3);
                        break;
                    case "cyan":
                        result = Color.FromColorIndex(ColorMethod.ByAci, 4);
                        break;
                    case "blue":
                        result = Color.FromColorIndex(ColorMethod.ByAci, 5);
                        break;
                    case "magenta":
                        result = Color.FromColorIndex(ColorMethod.ByAci, 6);
                        break;
                    case "white":
                        result = Color.FromColorIndex(ColorMethod.ByAci, 7);
                        break;
                }
            }
            return result;
        }
        public static bool getbool(string str)
        {
            bool bresult;
            str = str.ToLower();
            if (str == "false")
                bresult = false;
            else
                bresult = true;
            return bresult;
        }
        public static LineWeight GetLwgt(string str)
        {
            LineWeight resultwei = LineWeight.ByLineWeightDefault;
            str = str.Trim();
            str = str.ToLower();
            switch (str)
            {
                case "byblock":
                    resultwei = LineWeight.ByBlock;
                    break;
                case "bydips":
                    resultwei = LineWeight.ByDIPs;
                    break;
                case "bylayer":
                    resultwei = LineWeight.ByLayer;
                    break;
                case "byLineweightdefault":
                    resultwei = LineWeight.ByLineWeightDefault;
                    break;
                case "Lineweight000":
                    resultwei = LineWeight.LineWeight000;
                    break;
                case "Lineweight005":
                    resultwei = LineWeight.LineWeight005;
                    break;
                case "Lineweight009":
                    resultwei = LineWeight.LineWeight009;
                    break;
                case "Lineweight013":
                    resultwei = LineWeight.LineWeight013;
                    break;
                case "Lineweight015":
                    resultwei = LineWeight.LineWeight015;
                    break;
                case "Lineweight018":
                    resultwei = LineWeight.LineWeight018;
                    break;
                case "Lineweight020":
                    resultwei = LineWeight.LineWeight020;
                    break;
                case "Lineweight025":
                    resultwei = LineWeight.LineWeight025;
                    break;
                case "Lineweight030":
                    resultwei = LineWeight.LineWeight030;
                    break;
                case "Lineweight035":
                    resultwei = LineWeight.LineWeight035;
                    break;
                case "Lineweight040":
                    resultwei = LineWeight.LineWeight040;
                    break;
                case "Lineweight050":
                    resultwei = LineWeight.LineWeight050;
                    break;
                case "Lineweight053":
                    resultwei = LineWeight.LineWeight053;
                    break;
                case "Lineweight060":
                    resultwei = LineWeight.LineWeight060;
                    break;
                case "Lineweight070":
                    resultwei = LineWeight.LineWeight070;
                    break;
                case "Lineweight080":
                    resultwei = LineWeight.LineWeight080;
                    break;
                case "Lineweight090":
                    resultwei = LineWeight.LineWeight090;
                    break;
                case "Lineweight100":
                    resultwei = LineWeight.LineWeight100;
                    break;
                case "Lineweight106":
                    resultwei = LineWeight.LineWeight106;
                    break;
                case "Lineweight120":
                    resultwei = LineWeight.LineWeight120;
                    break;
                case "Lineweight140":
                    resultwei = LineWeight.LineWeight140;
                    break;
                case "Lineweight158":
                    resultwei = LineWeight.LineWeight158;
                    break;
                case "Lineweight200":
                    resultwei = LineWeight.LineWeight200;
                    break;
                case "Lineweight211":
                    resultwei = LineWeight.LineWeight211;
                    break;
            }
            return resultwei;
        }
        public static void SubscribeToDoc(AcadDocument doc)
        {
            //doc.CommandEnded += new CommandEventHandler(doc_CommandEnded);
            var ed = doc.Editor;
            ed.SelectionAdded += Obj_Selected;
        }
        static void doc_CommandEnded(object sender, CommandEventArgs e)
        {
            
        }
        static void Obj_Selected(object sender, SelectionAddedEventArgs e)
        {
            var ids = e.AddedObjects.GetObjectIds();
            //var doc = Application.DocumentManager.MdiActiveDocument;
            //var db = doc.Database;
            //var ed = doc.Editor;
        }

        public static void SelectObjectsCalcArea()
        {
            // Get the current document and database
            Document acDoc = Application.DocumentManager.MdiActiveDocument;
            Database acCurDb = acDoc.Database;
            Editor ed = acDoc.Editor;
            PromptEntityOptions peo = new PromptEntityOptions("\nSelect a pLine: ");
            peo.SetRejectMessage("\nNot a pLine try again: ");
            peo.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult per = ed.GetEntity(peo);
            if(per.Status==PromptStatus.OK)
            {
                try
                {
                    using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
                    {
                        double area = 0;
                        if (per.ObjectId != null)
                        {
                            Polyline p = (Polyline)acTrans.GetObject(per.ObjectId, OpenMode.ForRead);
                            area = p.Area;
                            ed.WriteMessage("Area is {0}: ", area);
                            Application.ShowAlertDialog(Convert.ToString(Convert.ToInt16(area)));
                            acTrans.Commit();
                        }
                    }
                }
                catch
                {
                    throw;
                }
            }            
        }
        public static List<string> LayersToList(Database db)
        {
            List<string> lstlay = new List<string>();

            LayerTableRecord layer;
            using (Transaction acTrans = db.TransactionManager.StartTransaction())
            {
                using (Transaction tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    LayerTable lt = tr.GetObject(db.LayerTableId, OpenMode.ForRead) as LayerTable;
                    foreach (ObjectId layerId in lt)
                    {
                        layer = tr.GetObject(layerId, OpenMode.ForWrite) as LayerTableRecord;
                        lstlay.Add(layer.Name);
                    }
                }
            }
            return lstlay;
        }
        public static void ChangeLayerName(string src, string dst)
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;
            Editor ed = doc.Editor;
            try
            {
                using (DocumentLock docLock = doc.LockDocument())
                {
                    using (Transaction acTrans = db.TransactionManager.StartTransaction())
                    {
                        LayerTable acLyrTbl;
                        acLyrTbl = acTrans.GetObject(db.LayerTableId,
                                                           OpenMode.ForRead) as LayerTable;
                        LayerTableRecord acLyrTblRec;
                        if (acLyrTbl.Has(src) == true && acLyrTbl.Has(dst) == false)
                        {
                            acLyrTblRec = acTrans.GetObject(acLyrTbl[src], OpenMode.ForWrite) as LayerTableRecord;
                            acLyrTblRec.Name = dst;
                        }
                        acLyrTbl.UpgradeOpen();
                        acTrans.Commit();
                    }
                }
            }
            catch
            {
                throw;
            }            
        }
        public static void TurnOnLayers(List<string> onlyrnamelist, List<string> offlyrnamelist)
        {
            Document acDoc = Application.DocumentManager.MdiActiveDocument;
            Database acCurDb = acDoc.Database;
            try
            {
                using (DocumentLock docLock = acDoc.LockDocument())
                {
                    using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
                    {
                        foreach (string str in onlyrnamelist)
                        {
                            LayerTable acLyrTbl;
                            acLyrTbl = acTrans.GetObject(acCurDb.LayerTableId,
                                                               OpenMode.ForWrite) as LayerTable;
                            LayerTableRecord acLyrTblRec;
                            if (acLyrTbl.Has(str) == true)
                            {
                                acLyrTblRec = acTrans.GetObject(acLyrTbl[str],
                                                      OpenMode.ForWrite) as LayerTableRecord;
                                acLyrTblRec.IsOff = false;
                            }
                            acLyrTbl.UpgradeOpen();
                        }
                        foreach (string str in offlyrnamelist)
                        {
                            LayerTable acLyrTbl;
                            acLyrTbl = acTrans.GetObject(acCurDb.LayerTableId,
                                                               OpenMode.ForWrite) as LayerTable;
                            LayerTableRecord acLyrTblRec;
                            if (acLyrTbl.Has(str) == true)
                            {
                                acLyrTblRec = acTrans.GetObject(acLyrTbl[str],
                                                      OpenMode.ForWrite) as LayerTableRecord;
                                acLyrTblRec.IsOff = true;
                            }
                            acLyrTbl.UpgradeOpen();
                        }
                        acTrans.Commit();
                    }
                }
            }
            catch
            {
                throw;
            }
        }

        public static double Angle(Point3d pt1, Point3d pt2)
        {
            return Math.Atan2((pt2.Y - pt1.Y), (pt2.X - pt1.X));
        }
        public static Point3d Polar(Point3d ptBase, double angle, double distance)
        {
            return new Point3d(ptBase.X + (distance * Math.Cos(angle)), ptBase.Y + (distance * Math.Sin(angle)), 0.0);
        }
        public static double Distance(Point3d pt1, Point3d pt2)
        {
            return Math.Sqrt(Math.Pow(pt2.X - pt1.X, 2) + Math.Pow(pt2.Y - pt1.Y, 2));
        }
        public static double WidthRectPolyline(Point3d pt1, Point3d pt2)
        {
            return (pt2.X - pt1.X);
        }
        public static double HeightRectPolyline(Point3d pt1, Point3d pt2)
        {
            return (pt2.Y - pt1.Y);
        }
        public static SelectionSet PromptForPolylineSSet(String prompt)
        {
            Editor ed = Application.DocumentManager.MdiActiveDocument.Editor;

            TypedValue[] typedValueArray = new TypedValue[1];
            typedValueArray.SetValue(new TypedValue((int)DxfCode.Start, "Polyline,LWPolyline,Line"), 0);

            var selectionFilter = new SelectionFilter(typedValueArray);

            var promptSelectionResult = ed.GetSelection(selectionFilter);

            var selectionSet = promptSelectionResult.Value;

            if (promptSelectionResult.Status == PromptStatus.OK)
            {
                Application.ShowAlertDialog($"Number of objects selected: " +
                                        $"{selectionSet.Count.ToString()}");
            }
            else
            {
                Application.ShowAlertDialog("Number of objects selected: 0");
                return null;
            }
            return selectionSet;
        }
        public static void AddLightweightPolyline(Polyline pl)
        {

            // Get the current document and database
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            // Start a transaction
            try
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Point3d leftpt = pl.GetPoint3dAt(0);
                    Point3d upperpt = pl.GetPoint3dAt(0);
                    Point3d rightpt = pl.GetPoint3dAt(0);
                    Point3d bottompt = pl.GetPoint3dAt(0);

                    int cnt1 = pl.NumberOfVertices;
                    for (int i = 0; i < cnt1; i++)
                    {
                        Point3d curpt = pl.GetPoint3dAt(i);
                        if (curpt.X < leftpt.X)
                            leftpt = curpt;
                        if (curpt.Y > upperpt.Y)
                            upperpt = curpt;
                        if (curpt.X > rightpt.X)
                            rightpt = curpt;
                        if (curpt.Y < bottompt.Y)
                            bottompt = curpt;
                    }
                    double basewidth = rightpt.X - leftpt.X;
                    double baseheight = upperpt.Y - bottompt.Y;
                    // Open the Block table for read
                    BlockTable acBlkTbl;
                    acBlkTbl = tr.GetObject(db.BlockTableId,
                                                       OpenMode.ForRead) as BlockTable;
                    // Open the Block table record Model space for write
                    BlockTableRecord acBlkTblRec;
                    acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                          OpenMode.ForWrite) as BlockTableRecord;
                    curPLine = pl;
                    if ((string)Application.GetSystemVariable("clayer") == "_Window"|| (string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
                    {
                        windowrule tmpwind = new ProsoftAcPlugin.windowrule();
                        tmpwind.pl = Commands.curPLine;
                        tmpwind.height = Plugin.nCurheight;
                        tmpwind.width = Plugin.nCurwidth;
                        tmpwind.depth = Plugin.nCurDepth;
                        tmpwind.objid = curoid;
                        tmpwind.hnd = curhnd;
                        tmpwind.kind = Commands.InswindName;
                        
                        //pl.XData= Plugin.nCurheight;
                        ProsoftAcPlugin.Commands.awindowrule.Add(tmpwind);
                    }

                    if ((string)Application.GetSystemVariable("clayer") == "_Door"|| (string)Application.GetSystemVariable("clayer") == "_Fire Door"
                        ||(string)Application.GetSystemVariable("clayer") == "_Fire Gate")
                    {
                        doorrule tmpdoor = new doorrule();
                        tmpdoor.pl = Commands.curPLine;
                        tmpdoor.height = Plugin.nCurheight;
                        tmpdoor.width = Plugin.nCurwidth;
                        tmpdoor.depth = Plugin.nCurDepth;
                        tmpdoor.objid = curoid;
                        tmpdoor.hnd = curhnd;
                        switch ((string)Application.GetSystemVariable("clayer"))
                        {
                            case "_Door":
                                {
                                    tmpdoor.kind = Commands.InsdoorName;
                                    break;
                                }
                            case "_Fire Door":
                                {
                                    tmpdoor.kind = Commands.InsFiredoorName;
                                    break;
                                }
                            case "_Fire Gate":
                                {
                                    tmpdoor.kind = Commands.InsFiregateName;
                                    break;
                                }

                        }
                        Commands.adoorrule.Add(tmpdoor);
                    }
                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                    ObjectId mtStyleid = db.Textstyle;

                    if (ts.Has("Romans"))
                    {
                        mtStyleid = ts["Romans"];
                    }

                    MText txt = new MText();
                    string curlayer = (string)Application.GetSystemVariable("clayer");
                    switch (curlayer)
                    {
                        case "_Door":
                            txt.Contents = Commands.InsdoorName; //<==change to your default string value
                            break;
                        case "_Fire Door":
                            txt.Contents = Commands.InsFiredoorName; //<==change to your default string value
                            break;
                        case "_Fire Gate":
                            txt.Contents = Commands.InsFiregateName; //<==change to your default string value
                            break;
                        case "_Window":
                            txt.Contents = Commands.InswindName;
                            break;
                    }
                    txt.SetDatabaseDefaults(db);
                    txt.Height = (double)baseheight / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                    txt.Width = (double)basewidth / 2;
                    //txt.TextStyleId = mtStyleid;
                    txt.TextHeight = 0.2;
                    //txt.TextHeight = (double)Plugin.nCurDepth-10;
                    txt.Attachment = AttachmentPoint.MiddleCenter;
                    txt.Location = new Point3d(leftpt.X + basewidth / 2, upperpt.Y - baseheight / 2, 0);
                    acBlkTblRec.AppendEntity(txt);
                    tr.AddNewlyCreatedDBObject(txt, true);
                    tr.Commit();
                }

            }
            catch
            {
                throw;
            }
        }
        public static Point3d Getleft(Polyline pl)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Point3d leftpt = pl.GetPoint3dAt(0);
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                int cnt1 = pl.NumberOfVertices;
                for (int i = 0; i < cnt1; i++)
                {
                    Point3d curpt = pl.GetPoint3dAt(i);
                    if (curpt.X < leftpt.X)
                        leftpt = curpt;
                }
                tr.Commit();
            }
            return leftpt;
        }
        public static Point3d Getright(Polyline pl)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Point3d rightpt = pl.GetPoint3dAt(0);
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                int cnt1 = pl.NumberOfVertices;
                for (int i = 0; i < cnt1; i++)
                {
                    Point3d curpt = pl.GetPoint3dAt(i);
                    if (curpt.X > rightpt.X)
                        rightpt = curpt;
                }
                tr.Commit();
            }
            return rightpt;
        }
        public static Point3d Gettop(Polyline pl)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Point3d toppt = pl.GetPoint3dAt(0);
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                int cnt1 = pl.NumberOfVertices;
                for (int i = 0; i < cnt1; i++)
                {
                    Point3d curpt = pl.GetPoint3dAt(i);
                    if (curpt.Y > toppt.Y)
                        toppt = curpt;
                }
                tr.Commit();
            }
            return toppt;
        }
        public static Point3d Getbottom(Polyline pl)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Point3d bottompt = pl.GetPoint3dAt(0);
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                int cnt1 = pl.NumberOfVertices;
                for (int i = 0; i < cnt1; i++)
                {
                    Point3d curpt = pl.GetPoint3dAt(i);
                    if (curpt.Y < bottompt.Y)
                        bottompt = curpt;
                }
                tr.Commit();
            }
            return bottompt;
        }
        public static bool IsOverlapped(Polyline pl)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            bool boverlap = false;
            try
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                    foreach (ObjectId btrId in blockTable)
                    {
                        var btr = (BlockTableRecord)tr.GetObject(btrId, OpenMode.ForRead);
                        var PLineCls = RXObject.GetClass(typeof(Polyline));
                        foreach (ObjectId id in btr)
                        {
                            if (id.ObjectClass == PLineCls)
                            {
                                var curve = (Curve)tr.GetObject(id, OpenMode.ForRead);
                                var points = new Point3dCollection();
                                pl.IntersectWith(curve, Intersect.OnBothOperands, points, IntPtr.Zero, IntPtr.Zero);
                                if (points.Count > 0)
                                    boverlap = true;
                            }
                        }
                    }
                }
            }
            catch
            {
                throw;
            }            
            return boverlap;
        }
        public static string GetMTextContent(MText txt)
        {
            string content = "";
            content = txt.Contents.ToString();
            return content;
        }
        public static double GetRoadWidth(string str)
        {
            string strcontents = str.ToLower();
            double result = 0;
            int pos = strcontents.IndexOf("m") - 1;
            string strtmp = strcontents.Substring(0, pos-1);
            try
            {
                result = Convert.ToDouble(strtmp);
            }
            catch
            {
                //Application.ShowAlertDialog("Wrong Test string Format! "+str);
            }
            return result;
        }
        private static bool IsincludedinList(string str, List<string> strlist)
        {
            bool bresult = false;
            foreach (string strinst in strlist)
            {
                if (str == strinst)
                {
                    bresult = true;
                    return bresult;
                }
            }
            return bresult;
        }
        public static void CallImplement()
        {
            ImplementANBnP(Plugin.ANBNPpl1, Plugin.ANBNPpl2);
        }
        public static void ImplementANBnP(Polyline pln1, Polyline pln2)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            try
            {
                using (DocumentLock docLock = doc.LockDocument())
                {
                    using (Transaction acCurrTrans = db.TransactionManager.StartTransaction())
                    {
                        TextStyleTable ts = (TextStyleTable)acCurrTrans.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;
                        if (ts.Has("Romans"))
                        {
                            mtStyleid = ts["Romans"];
                        }
                        if (pln1 != null && pln2 != null)
                        {
                            Point3d leftpt = pln1.GetPoint3dAt(0);
                            Point3d upperpt = pln1.GetPoint3dAt(0);
                            Point3d rightpt = pln1.GetPoint3dAt(0);
                            Point3d bottompt = pln1.GetPoint3dAt(0);

                            int cnt1 = pln1.NumberOfVertices;
                            for (int i = 0; i < cnt1; i++)
                            {
                                Point3d curpt = pln1.GetPoint3dAt(i);
                                if (curpt.X < leftpt.X)
                                    leftpt = curpt;
                                if (curpt.Y < upperpt.Y)
                                    upperpt = curpt;
                                if (curpt.X > rightpt.X)
                                    rightpt = curpt;
                                if (curpt.Y > bottompt.Y)
                                    bottompt = curpt;
                            }
                            BlockTableRecord btr = (BlockTableRecord)acCurrTrans.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            DBText txt = new DBText();
                            txt.TextString = Plugin.ANBNPwing + Plugin.ANBNPbuilding;
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 0.5; //<==change to your default height
                                              //txt.Height = HeightRectPolyline(upperpt, bottompt) / 8.0; //<==change to your default height
                                              //txt.Width = WidthRectPolyline(leftpt, rightpt);
                            txt.TextStyleId = mtStyleid;
                            //txt.Height = txt.Height / 3.0;

                            //txt.AlignmentPoint = TextHorizontalMode.TextCenter;
                            txt.Layer = pln1.Layer;
                            txt.Position = new Point3d(leftpt.X + WidthRectPolyline(leftpt, rightpt) / 2, upperpt.Y + HeightRectPolyline(upperpt, bottompt) / 2, 0);
                            btr.AppendEntity(txt);
                            acCurrTrans.AddNewlyCreatedDBObject(txt, true);

                            int cnt2 = pln2.NumberOfVertices;
                            leftpt = pln2.GetPoint3dAt(0);
                            upperpt = pln2.GetPoint3dAt(0);
                            rightpt = pln2.GetPoint3dAt(0);
                            bottompt = pln2.GetPoint3dAt(0);
                            for (int i = 0; i < cnt2; i++)
                            {
                                Point3d curpt = pln2.GetPoint3dAt(i);
                                if (curpt.X < leftpt.X)
                                    leftpt = curpt;
                                if (curpt.Y < upperpt.Y)
                                    upperpt = curpt;
                                if (curpt.X > rightpt.X)
                                    rightpt = curpt;
                                if (curpt.Y > bottompt.Y)
                                    bottompt = curpt;
                            }

                            BlockTableRecord btr1 = (BlockTableRecord)acCurrTrans.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            DBText txt1 = new DBText();
                            txt1.TextString = Plugin.ANBNPwing + Plugin.ANBNPbuilding;
                            txt1.SetDatabaseDefaults(db);
                            txt1.Height = 0.5; //<==change to your default height
                                               //txt1.Height = HeightRectPolyline(upperpt, bottompt) / 8.0; //<==change to your default height
                            txt1.TextStyleId = mtStyleid;
                            //txt1.Attachment = AttachmentPoint.TopCenter;
                            txt1.Layer = pln2.Layer;
                            txt1.Position = new Point3d(leftpt.X, upperpt.Y, 0);
                            btr1.AppendEntity(txt1);
                            acCurrTrans.AddNewlyCreatedDBObject(txt1, true);
                        }
                        acCurrTrans.Commit();
                    }
                }
            }
            catch
            {
                throw;
            }
        }
        public static void MakingMarginBox()
        {
            Polyline plotLine = GetPlotLine("_Plot");
            Point3d leftpt = Getleft(plotLine);
            Point3d rightpt = Getright(plotLine);
            Point3d toppt = Gettop(plotLine);
            Point3d bottompt = Getbottom(plotLine);
            List<Point3d>  points= new List<Point3d>();
            points.Add(leftpt);
            points.Add(rightpt);
            points.Add(toppt);
            points.Add(bottompt);
            SetLayerCurrent("_MarginLine");
            Document acDoc = Application.DocumentManager.MdiActiveDocument;
            Database acCurDb = acDoc.Database;
            using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
            {
                BlockTable acBlkTbl;
                acBlkTbl = acTrans.GetObject(acCurDb.BlockTableId,
                                             OpenMode.ForRead) as BlockTable;
                BlockTableRecord acBlkTblRec;
                acBlkTblRec = acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                OpenMode.ForWrite) as BlockTableRecord;
                for (int i=0;i<points.Count-1;i++)
                {
                    Line acLine = new Line(points[i], points[i + 1]);
                    acLine.SetDatabaseDefaults();
                    acBlkTblRec.AppendEntity(acLine);
                    acTrans.AddNewlyCreatedDBObject(acLine, true);
                }
                acTrans.Commit();
            }
        }
        public static string ProjecttypeTostring(uint index)
        {
            string result="";
            switch (index)
            {
                case 0:
                    {
                        result = "BuildingPermission";
                        break;
                    }
                case 1:
                    {
                        result = "SubDivision";
                        break;
                    }
                case 2:
                    {
                        result = "EWSorLIGScheme";
                        break;
                    }
                case 3:
                    {
                        result = "LayoutsOpenPlots";
                        break;
                    }
                case 4:
                    {
                        result = "LayoutwithoutGatedCommunity";
                        break;
                    }
                case 5:
                    {
                        result = "LayoutGatedCommunity";
                        break;
                    }
                case 6:
                    {
                        result = "Amalgamation";
                        break;
                    }
                case 7:
                    {
                        result = "MultistoriedBuildings";
                        break;
                    }
                case 8:
                    {
                        result = "GroupScheme";
                        break;
                    }
                case 9:
                    {
                        result = "CompoundWall";
                        break;
                    }
                case 10:
                    {
                        result = "RowTypeHousingScheme";
                        break;
                    }
                case 11:
                    {
                        result = "ClusterHousingScheme";
                        break;
                    }
                case 12:
                    {
                        result = "ChangeLandUse";
                        break;
                    }
            }
            return result;
        }
        public static uint ProjecttypetoUint(string prjtype)
        {
            uint result = 0;
            switch(prjtype)
            {
                case "BuildingPermission":
                    {
                        result = 0;
                        break;
                    }
                case "SubDivision":
                    {
                        result = 1;
                        break;
                    }
                case "EWSorLIGScheme":
                    {
                        result = 2;
                        break;
                    }
                case "LayoutsOpenPlots":
                    {
                        result = 3;
                        break;
                    }
                case "LayoutwithoutGatedCommunity":
                    {
                        result = 4;
                        break;
                    }
                case "LayoutGatedCommunity":
                    {
                        result = 5;
                        break;
                    }
                case "Amalgamation":
                    {
                        result = 6;
                        break;
                    }
                case "MultistoriedBuildings":
                    {
                        result = 7;
                        break;
                    }
                case "GroupScheme":
                    {
                        result = 8;
                        break;
                    }
                case "CompoundWall":
                    {
                        result = 9;
                        break;
                    }
                case "RowTypeHousingScheme":
                    {
                        result = 10;
                        break;
                    }
                case "ClusterHousingScheme":
                    {
                        result = 11;
                        break;
                    }
                case "ChangeLandUse":
                    {
                        result = 12;
                        break;
                    }
            }
            return result;
        }
        public static string PlotusetoString(uint index)
        {
            string result = "";
            switch (index)
            {
                case 0:
                    {
                        result = "Ressidential";
                        break;
                    }
                case 1:
                    {
                        result = "Commercial";
                        break;
                    }
                case 2:
                    {
                        result = "Industrial";
                        break;
                    }
                case 3:
                    {
                        result = "Assembly";
                        break;
                    }
                case 4:
                    {
                        result = "Public Utility";
                        break;
                    }
                case 5:
                    {
                        result = "Transportation and Communication";
                        break;
                    }
                case 6:
                    {
                        result = "Educational/Industrial";
                        break;
                    }
                case 7:
                    {
                        result = "Medical";
                        break;
                    }
                case 8:
                    {
                        result = "Storage";
                        break;
                    }
                case 9:
                    {
                        result = "Mixed Use";
                        break;
                    }
                case 10:
                    {
                        result = "Parking tower/Parking complex";
                        break;
                    }
            }
            return result;
        }
        public static uint PlotusetoUint(string plotuse)
        {
            uint result = 0;
            switch (plotuse)
            {
                case "Ressidential":
                    {
                        result = 0;
                        break;
                    }
                case "Commercial":
                    {
                        result = 1;
                        break;
                    }
                case "Industrial":
                    {
                        result = 2;
                        break;
                    }
                case "Assembly":
                    {
                        result = 3;
                        break;
                    }
                case "Public Utility":
                    {
                        result = 4;
                        break;
                    }
                case "Transportation and Communication":
                    {
                        result = 5;
                        break;
                    }
                case "Educational/Industrial":
                    {
                        result = 6;
                        break;
                    }
                case "Medical":
                    {
                        result = 7;
                        break;
                    }
                case "Storage":
                    {
                        result = 8;
                        break;
                    }
                case "Mixed Use":
                    {
                        result = 9;
                        break;
                    }
                case "Parking tower/Parking complex":
                    {
                        result = 10;
                        break;
                    }
            }
            return result;
        }

        [CommandMethod("SAVEHANDLES")]
        public void SaveHandles()
        {
            if ((short)Application.GetSystemVariable("DWGTITLED") == 0)
            {
                Application.ShowAlertDialog("Save the drawing before running the command again");
                return;
            }

            var doc = Application.DocumentManager.MdiActiveDocument;
            var ed = doc.Editor;

            var selection = ed.GetSelection();
            if (selection.Status != PromptStatus.OK)
                return;

            string[] Lines =
                selection.Value.GetObjectIds()
                .Select(id => id.Handle.ToString())
                .ToArray();

            string filename = Path.ChangeExtension(doc.Name, "txt");
            System.IO.File.WriteAllLines(filename, Lines);
        }

        [CommandMethod("SELECTHANDLES")]
        public static void SelectHandles()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;

            string filename = Path.ChangeExtension(doc.Name, "txt");
            if (!System.IO.File.Exists(filename))
            {
                Application.ShowAlertDialog($"{Path.GetFileName(filename)} not found");
                return;
            }

            string[] handles = System.IO.File.ReadAllLines(filename);

            var ids = new List<ObjectId>();
            foreach (string handle in handles)
            {
                if (long.TryParse(handle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                {
                    if (db.TryGetObjectId(new Handle(result), out ObjectId id))
                    {
                        ids.Add(id);
                    }
                }
            }
            ed.SetImpliedSelection(ids.ToArray());
        }
        [CommandMethod("rdj")]
        public static void ReadJson()
        {
            if (Plugin.strCurJsonPath == "")
            {
                string sourceFileName = "";
                System.Windows.Forms.OpenFileDialog openFileDialog1 = new System.Windows.Forms.OpenFileDialog
                {
                    InitialDirectory = @"D:\",
                    Title = "Browse json Files",
                    CheckFileExists = true,
                    CheckPathExists = true,
                    DefaultExt = "json",
                    Filter = "json files (*.json)|*.json|All files (*.*)|*.*",
                    FilterIndex = 2,
                    RestoreDirectory = true,
                    ReadOnlyChecked = true,
                    ShowReadOnly = true
                };

                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    sourceFileName = openFileDialog1.FileName;
                    Plugin.strCurJsonPath = sourceFileName;
                }
            }
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.CurrentDocument;
            var database = currentDocument.Database;
            Editor ed = currentDocument.Editor;
            if(System.IO.File.Exists(Plugin.strCurJsonPath))
            {
                string jobjectlist = System.IO.File.ReadAllText(Plugin.strCurJsonPath);
                List<JsonItems> jsonlists = new List<JsonItems>();
                jsonlists = JsonConvert.DeserializeObject<List<JsonItems>>(jobjectlist);
                foreach (JsonItems item in jsonlists)
                {
                    if (item.layer == "_Window")
                    {
                        ObjectId oid = ObjectId.Null;
                        Handle hnd;
                        if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                        {
                            if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                            {
                                hnd = new Handle(result);
                                oid = id;
                                Polyline poly;
                                using (Transaction tr = database.TransactionManager.StartTransaction())
                                {
                                    poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                    tr.Commit();
                                }
                                    windowrule wrule = new windowrule();
                                wrule.width = (float)item.width;
                                wrule.height = (float)item.height;
                                wrule.objid = oid;
                                wrule.hnd = hnd;
                                wrule.pl = poly;
                                Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                                ProsoftAcPlugin.Commands.awindowrule.Add(wrule);
                            }
                        }
                    }
                    if (item.layer == "_Door")
                    {
                        ObjectId oid = ObjectId.Null;
                        Handle hnd;
                        if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                        {
                            if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                            {
                                hnd = new Handle(result);
                                oid = id;
                                Polyline poly;
                                using (Transaction tr = database.TransactionManager.StartTransaction())
                                {
                                    poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                    tr.Commit();
                                }
                                doorrule wrule = new doorrule();
                                wrule.objid = oid;
                                wrule.width = (float)item.width;
                                wrule.height = (float)item.height;
                                wrule.hnd = hnd;
                                wrule.pl = poly;
                                Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                                ProsoftAcPlugin.Commands.adoorrule.Add(wrule);
                            }
                        }
                    }
                    if (item.layer == "_Room")
                    {
                        ObjectId oid = ObjectId.Null;
                        Handle hnd;
                        if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                        {
                            if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                            {
                                hnd = new Handle(result);
                                oid = id;
                                Polyline poly;
                                using (Transaction tr = database.TransactionManager.StartTransaction())
                                {
                                    poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                    tr.Commit();
                                }
                                roomrule wrule = new roomrule();
                                wrule.objid = oid;
                                wrule.width = (float)item.width;
                                wrule.height = (float)item.height;
                                wrule.hnd = hnd;
                                wrule.pl = poly;
                                Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                                ProsoftAcPlugin.Commands.aroomrule.Add(wrule);
                            }
                        }

                    }
                    if (item.layer == "_MainRoad")
                    {
                        ObjectId oid = ObjectId.Null;
                        Handle hnd;
                        if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                        {
                            if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                            {
                                hnd = new Handle(result);
                                oid = id;
                                Polyline poly;
                                using (Transaction tr = database.TransactionManager.StartTransaction())
                                {
                                    poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                    tr.Commit();
                                }
                                mroadrule wrule = new mroadrule();
                                wrule.objid = oid;
                                wrule.width = (float)item.width;
                                wrule.height = (float)item.height;
                                wrule.hnd = hnd;
                                wrule.pl = poly;
                                Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                                ProsoftAcPlugin.Commands.amroadrule.Add(wrule);
                            }else
                                Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                        }
                    }
                }
            }
            else
            {
                Application.ShowAlertDialog("There is no " + strCurJsonPath + " file.");
            }

        }

        [CommandMethod("crtlyrs")]
        public static void makingLayers()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            ObjectId layerId = ObjectId.Null;
            readExcel();
            try
            {
                using (DocumentLock docLock = currentDocument.LockDocument())
                {
                    using (Transaction acTrans = database.TransactionManager.StartTransaction())
                    {
                        LayerTable acLyrTbl;
                        acLyrTbl = acTrans.GetObject(database.LayerTableId,
                                                     OpenMode.ForWrite) as LayerTable;
                        for (int i = 0; i < Plugin.lyrName.Count; i++)
                        {
                            if (acLyrTbl.Has(Plugin.lyrName[i]) == false)
                            {
                                LayerTableRecord acLyrTblRec = new LayerTableRecord();
                                acLyrTblRec.Name = Plugin.lyrName[i];
                                //System.IO.File.WriteAllText(@"D:\layer.txt", Plugin.lyrName[i]);
                                acLyrTblRec.IsOff = getbool(Plugin.lyrOn[i]);
                                acLyrTblRec.IsFrozen = getbool(Plugin.lyrFreeze[i]);
                                acLyrTblRec.IsLocked = getbool(Plugin.lyrLock[i]);
                                acLyrTblRec.Color = Getcolor(Plugin.lyrColor[i]);

                                LinetypeTable acLinTbl;
                                acLinTbl = acTrans.GetObject(database.LinetypeTableId,
                                                                   OpenMode.ForWrite) as LinetypeTable;
                                if (acLinTbl.Has(Plugin.lyrLinetype[i]) == true)
                                {
                                    acLyrTblRec.LinetypeObjectId = acLinTbl[Plugin.lyrLinetype[i]];
                                }
                                acLyrTblRec.LineWeight = GetLwgt(Plugin.lyrLineweight[i]);
                                                                
                                acLyrTblRec.IsPlottable = getbool(Plugin.lyrPlot[i]);
                                acLyrTblRec.ViewportVisibilityDefault = getbool(Plugin.lyrNewVp[i]);
                                // Upgrade the Layer table for write
                                acLyrTbl.UpgradeOpen();

                                // Append the new layer to the Layer table and the transaction
                                acLyrTbl.Add(acLyrTblRec);
                                acTrans.AddNewlyCreatedDBObject(acLyrTblRec, true);
                            }
                        }
                        acTrans.Commit();
                    }
                    for (int i = 0; i < Plugin.lyrName.Count; i++)
                    {
                        SetLayerTransparency(Plugin.lyrName[i], (byte)Convert.ToInt32(Plugin.lyrTrans[i]));
                    }
                }
            }
            catch
            {
                throw;
            }
            SetLayerCurrent("0");
        }

        [CommandMethod("lyrsh")]
        public void LayersShowHide()
        {
            //makingLayers();
            if (!Plugin.blyrsh)
            {
                Plugin.blyrsh = true;
                var frm = new LayersShowHideForm();
                frm.Show();
            }
        }
        [CommandMethod("rnlyrs")]
        public void RenameNotincludedlayers()
        {
            Plugin.b_renamelyr = false;
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;
            Editor ed = doc.Editor;
            List<string> tmplst = LayersToList(db);
            var list1 = tmplst.Except(Plugin.lyrName);
            foreach (string str in list1)
            {
                Plugin.differentlyrs.Add(str);
            }
            var frm = new LayerRenameForm();
            frm.Show();
        }

        [CommandMethod("calcarea")]
        public void CalculateArea()
        {
            SelectObjectsCalcArea();
        }
        [CommandMethod("autodraw")]
        public void AutoDrawing()
        {
            List<string> roomtextlist = new List<string>();
            roomtextlist.Add("Bed Room");
            roomtextlist.Add("M.Bed Room");
            roomtextlist.Add("Ch.Bed Room");
            roomtextlist.Add("Dinning/Kitchen");
            roomtextlist.Add("Living/Kitchen");
            roomtextlist.Add("Living/Dinning");
            roomtextlist.Add("Study Room");
            roomtextlist.Add("Guest Room");
            roomtextlist.Add("Common Toilet");
            roomtextlist.Add("Attached Toilet");
            roomtextlist.Add("Servant's Room");
            roomtextlist.Add("Verandah");
            roomtextlist.Add("T.V Room");
            roomtextlist.Add("Drawing Room");
            roomtextlist.Add("Dress Room");
            roomtextlist.Add("Multi-purpose Room");
            //roomtextlist.Add("Passage");
            roomtextlist.Add("Lounge");
            roomtextlist.Add("Work Area");
            roomtextlist.Add("Living");
            roomtextlist.Add("Dining");
            roomtextlist.Add("Kitchen");
            roomtextlist.Add("Puja");
            roomtextlist.Add("Store");
            roomtextlist.Add("Bath");
            roomtextlist.Add("W. C");
            roomtextlist.Add("Wash");
            roomtextlist.Add("Toilet");
            roomtextlist.Add("Commbined Toilet");
            roomtextlist.Add("Kitchenette");
            roomtextlist.Add("Family Room");
            roomtextlist.Add("Utility");
            roomtextlist.Add("Hall");
            roomtextlist.Add("Entrance");
            roomtextlist.Add("Foyer");
            roomtextlist.Add("Sit out");
            //roomtextlist.Add("Balcony");
            //roomtextlist.Add("Room");
            roomtextlist.Add("Pantry");
            roomtextlist.Add("Cabin");
            roomtextlist.Add("Office");
            roomtextlist.Add("Bakeries");
            roomtextlist.Add("Reception");
            roomtextlist.Add("Restaurant");
            roomtextlist.Add("Cafeteria");
            roomtextlist.Add("Show Room");
            roomtextlist.Add("Hotel Room");
            roomtextlist.Add("Departmental Store");
            roomtextlist.Add("Conference Hall");
            roomtextlist.Add("Entrance Lobby");
            roomtextlist.Add("Fire Control Room");
            roomtextlist.Add("Waiting Room");
            roomtextlist.Add("Laundry");
            roomtextlist.Add("Shop");
            roomtextlist.Add("Atrium");
            roomtextlist.Add("Bank");
            roomtextlist.Add("Safe Room");
            roomtextlist.Add("Auditorium");
            roomtextlist.Add("General Ward");
            roomtextlist.Add("Special Room");
            roomtextlist.Add("Cinema Hall");
            roomtextlist.Add("Assembly Hall");
            roomtextlist.Add("Entrance Hall");
            roomtextlist.Add("Operation Theatre");
            roomtextlist.Add("Marriage Hall");
            roomtextlist.Add("Clinic");
            roomtextlist.Add("Consulting");
            roomtextlist.Add("Community Hall");
            roomtextlist.Add("Meeting Hall");
            roomtextlist.Add("Library");
            roomtextlist.Add("Laboratory");
            roomtextlist.Add("Servant Bath");
            roomtextlist.Add("Servant Toilet");
            roomtextlist.Add("Class Room");
            roomtextlist.Add("Hostel Room");
            roomtextlist.Add("Staff Room");
            roomtextlist.Add("KinderGarden");
            roomtextlist.Add("WorkShop");
            roomtextlist.Add("Storage Room");
            roomtextlist.Add("Open Shed");
            roomtextlist.Add("Shed");
            roomtextlist.Add("Factory");
            roomtextlist.Add("GodOwn");
            roomtextlist.Add("Room with Attached Toilet");
            roomtextlist.Add("Room without Attached Toilet");

            Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;
            Editor ed = doc.Editor;
            //NBCrelate.GetNeededEntitiesOnLayer(db, "0");
            roomlyraidraw(roomtextlist);
            RoomlyrTextAIDraw(roomtextlist);
            WindowlyrDraw();
            DoorlyrDraw();
            LiftlyrDraw();
            StaircaselyrDraw();
            TerracelyrDraw();
            FloorlyrDraw();
            ParkinglyrDraw();
            SitePlanlyrDraw();
            ProposedWrklyrDraw();
            MainRoadlyrDraw();
            SectionlyrDraw();
            FloorInSectionlyrDraw();
            BuildingNamelyrDraw();
            OrganizedOpenSpacelyrDraw();
            BalconylyrDraw();
            CarpetArealyrDraw();
            CompoundWalllyrDraw();
            PassagelyrDraw();
        }
        [CommandMethod("chkcls")]
        public void CheckAllClosed()
        {
            Document acDoc = Application.DocumentManager.MdiActiveDocument;
            Database acCurDb = acDoc.Database;
            Editor ed = acDoc.Editor;
            var frm = new PlineCloseFrm();
            frm.Show();
            frm.Show_LineCloseResult();
        }
        [CommandMethod("updatepreval")]
        public void updatepreval()
        {
            var frm = new UpdateFrm();
            frm.Show();

        }


        [CommandMethod("mtch")]
        public static void MakeTouch()
        {
            Document acDoc = Application.DocumentManager.MdiActiveDocument;
            Database db = acDoc.Database;
            Editor ed = acDoc.Editor;
            Polyline pln1, pln2;
            TypedValue[] acTypedValueArray = new TypedValue[2];
            acTypedValueArray.SetValue(new TypedValue(0 /*(int)DxfCode.Start*/, "LWPolyline"), 0);
            SelectionFilter acSelectionFilter = new SelectionFilter(acTypedValueArray);
            PromptSelectionOptions acPoptions = new PromptSelectionOptions
            {
                SingleOnly = false,
                SinglePickInSpace = false

            };
            try
            {
                using (Transaction acCurrTrans = db.TransactionManager.StartTransaction())
                {
                    PromptEntityOptions options = new PromptEntityOptions("\nSelect a first Polyline: ");
                    options.SetRejectMessage("\nSelected object is no a Polyline.");
                    options.AddAllowedClass(typeof(Polyline), true);
                    PromptEntityResult result = ed.GetEntity(options);
                    if (result.Status == PromptStatus.OK)
                    {
                        pln1 = acCurrTrans.GetObject(result.ObjectId, OpenMode.ForWrite, false) as Polyline;
                        Plugin.ANBNPpl1 = pln1;
                        PromptEntityOptions options1 = new PromptEntityOptions("\nSelect a second Polyline: ");
                        options1.SetRejectMessage("\nSelected object is no a Polyline.");
                        options1.AddAllowedClass(typeof(Polyline), true);
                        PromptEntityResult result1 = ed.GetEntity(options1);
                        if (result1.Status == PromptStatus.OK)
                        {
                            pln2 = acCurrTrans.GetObject(result1.ObjectId, OpenMode.ForWrite, false) as Polyline;
                            Plugin.ANBNPpl2 = pln2;
                            TwoPolyTouch frm = new TwoPolyTouch();
                            if (frm.ShowDialog() == DialogResult.OK)
                            {
                                Point3d left1 = ProsoftAcPlugin.Commands.Getleft(ProsoftAcPlugin.Plugin.ANBNPpl1);
                                Point3d top1 = ProsoftAcPlugin.Commands.Gettop(ProsoftAcPlugin.Plugin.ANBNPpl1);
                                Point3d right1 = ProsoftAcPlugin.Commands.Getright(ProsoftAcPlugin.Plugin.ANBNPpl1);
                                Point3d bottom1 = ProsoftAcPlugin.Commands.Getbottom(ProsoftAcPlugin.Plugin.ANBNPpl1);

                                Point3d left2 = ProsoftAcPlugin.Commands.Getleft(ProsoftAcPlugin.Plugin.ANBNPpl2);
                                Point3d top2 = ProsoftAcPlugin.Commands.Gettop(ProsoftAcPlugin.Plugin.ANBNPpl2);
                                Point3d right2 = ProsoftAcPlugin.Commands.Getright(ProsoftAcPlugin.Plugin.ANBNPpl2);
                                Point3d bottom2 = ProsoftAcPlugin.Commands.Getbottom(ProsoftAcPlugin.Plugin.ANBNPpl2);
                                double distance = 0;
                                switch (ProsoftAcPlugin.Plugin.twopolystr1)
                                {
                                    case "l1":
                                        {
                                            distance = left2.X - right1.X;
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acCurrTrans.GetObject(db.BlockTableId,
                                                                               OpenMode.ForWrite) as BlockTable;
                                            BlockTableRecord acBlkTblRec;
                                            acBlkTblRec = acCurrTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                  OpenMode.ForWrite) as BlockTableRecord;
                                            Point3d acPt3d = new Point3d(right1.X, 0, 0);
                                            Vector3d acVec3d = acPt3d.GetVectorTo(new Point3d(left2.X, 0, 0));
                                            for (int i = 0; i < pln1.NumberOfVertices; i++)
                                            {
                                                Point3d pt = pln1.GetPoint3dAt(i);
                                                if (pt.X == right1.X)
                                                {
                                                    pln1.SetPointAt(i, new Point2d(left2.X, pt.Y));
                                                }
                                            }
                                            bool istch = NBCrelate.checkTwoPlineTouch(pln2, pln1);
                                            if (istch)
                                                Application.ShowAlertDialog("Two Polyline touched");
                                            //acBlkTblRec.AppendEntity(pln1);
                                            //acCurrTrans.AddNewlyCreatedDBObject(pln1, true);
                                            break;
                                        }
                                    case "r1":
                                        {
                                            distance = left1.X - right2.X;
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acCurrTrans.GetObject(db.BlockTableId,
                                                                               OpenMode.ForWrite) as BlockTable;
                                            BlockTableRecord acBlkTblRec;
                                            acBlkTblRec = acCurrTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                  OpenMode.ForWrite) as BlockTableRecord;
                                            Point3d acPt3d = new Point3d(left1.X, 0, 0);
                                            Vector3d acVec3d = acPt3d.GetVectorTo(new Point3d(right2.X, 0, 0));
                                            for (int i = 0; i < pln1.NumberOfVertices; i++)
                                            {
                                                Point3d pt = pln1.GetPoint3dAt(i);
                                                if (pt.X == left1.X)
                                                {
                                                    pln1.SetPointAt(i, new Point2d(right2.X, pt.Y));
                                                }
                                            }
                                            bool istch = NBCrelate.checkTwoPlineTouch(pln2, pln1);
                                            if (istch)
                                                Application.ShowAlertDialog("Two Polyline touched");
                                            break;
                                        }
                                    case "t1":
                                        {
                                            distance = bottom1.Y - top2.Y;
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acCurrTrans.GetObject(db.BlockTableId,
                                                                               OpenMode.ForWrite) as BlockTable;
                                            BlockTableRecord acBlkTblRec;
                                            acBlkTblRec = acCurrTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                  OpenMode.ForWrite) as BlockTableRecord;
                                            Point3d acPt3d = new Point3d(bottom1.Y, 0, 0);
                                            Vector3d acVec3d = acPt3d.GetVectorTo(new Point3d(top2.Y, 0, 0));
                                            for (int i = 0; i < pln1.NumberOfVertices; i++)
                                            {
                                                Point3d pt = pln1.GetPoint3dAt(i);
                                                if (pt.Y == bottom1.Y)
                                                {
                                                    pln1.SetPointAt(i, new Point2d(pt.X, top2.Y));
                                                }
                                            }
                                            bool istch = NBCrelate.checkTwoPlineTouch(pln2, pln1);
                                            if (istch)
                                                Application.ShowAlertDialog("Two Polyline touched");
                                            break;
                                        }
                                    case "d1":
                                        {
                                            distance = bottom2.Y - top1.Y;
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acCurrTrans.GetObject(db.BlockTableId,
                                                                               OpenMode.ForWrite) as BlockTable;
                                            BlockTableRecord acBlkTblRec;
                                            acBlkTblRec = acCurrTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                  OpenMode.ForWrite) as BlockTableRecord;
                                            Point3d acPt3d = new Point3d(bottom2.Y, 0, 0);
                                            Vector3d acVec3d = acPt3d.GetVectorTo(new Point3d(top1.Y, 0, 0));
                                            //pln1.TransformBy(Matrix3d.Displacement(acVec3d));
                                            for (int i = 0; i < pln1.NumberOfVertices; i++)
                                            {
                                                Point3d pt = pln1.GetPoint3dAt(i);
                                                if (pt.Y == top1.Y)
                                                {
                                                    pln1.SetPointAt(i, new Point2d(pt.X, bottom2.Y));
                                                }
                                            }
                                            break;
                                        }
                                }
                            }
                        }
                    }
                    acCurrTrans.Commit();
                    ed.UpdateScreen();
                }
            }
            catch
            {
                throw;
            }
        }
        [CommandMethod("viewchk")]
        public void ViewCheck()
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;
            Editor ed = doc.Editor;
            // Ask the user for the layer name, allowing
            using (var view = ed.GetCurrentView())
            {
                ed.WriteMessage($"\nCurrent View: {GetViewName(view.ViewDirection)}");
            }
        }
        [CommandMethod("nbcrule")]
        public void NBCRULECheck()
        {
            //var frm = new NBCruleCheck();
            //frm.Show();
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.CurrentDocument;
            var database = currentDocument.Database;
            Plugin.allLayers = Commands.LayersToList(database);
            //string strlayrlist="";
            //foreach (string str in Plugin.allLayers)
            //    strlayrlist = strlayrlist + "\n" + str;
            //System.IO.File.WriteAllText(@"D:\splayCompareCross.txt", strlayrlist);
            NBCrelate.Rulecheck();
            //var frm = new RuleCheckForm();
            //frm.Show();
        }
        [CommandMethod("errdlg")]
        public static void ErrDlg()
        {
            var frm = new RuleCheckForm();
            frm.Show();
        }
        [CommandMethod("openpro")]
        public void OpenProj()
        {
            bNewproj = false;
            string sourceFileName = "";
            System.Windows.Forms.OpenFileDialog openFileDialog1 = new System.Windows.Forms.OpenFileDialog
            {
                //InitialDirectory = @"C:\",
                Title = "Browse Drawing Files",
                CheckFileExists = true,
                CheckPathExists = true,
                DefaultExt = "dwg",
                Filter = "Drawing files (*.dwg)|*.dwg",
                FilterIndex = 2,
                RestoreDirectory = true,
                ReadOnlyChecked = true,
                ShowReadOnly = true
            };


            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                sourceFileName = openFileDialog1.FileName;
                Plugin.strCurDocPath = sourceFileName;
                int posstring = sourceFileName.LastIndexOf(".");
                string strJsonName= Path.ChangeExtension(sourceFileName, "json");
                strCurJsonPath = strJsonName;
            }
            DocumentCollection acDocMgr = Application.DocumentManager;
            if (System.IO.File.Exists(sourceFileName))
            {
                Document curdoc = acDocMgr.Open(sourceFileName, false);
                acDocMgr.MdiActiveDocument = curdoc;
                curdoc.SendStringToExecute("Application" + "\n", false, false, false);
                bLpmhs = true;
                curdoc.SendStringToExecute(
                  "LAYERCLOSE" + "\n",
                  false, false, false);
                sourceFileName = openFileDialog1.FileName;
                Plugin.strCurDocPath = sourceFileName;
                //SignDraw(curdoc);
            }
            else
            {
                acDocMgr.MdiActiveDocument.Editor.WriteMessage("File " + strCurJsonPath +
                                                                     " does not exist.");
                sourceFileName = "";
                Plugin.strCurDocPath = sourceFileName;
            }
            DocumentCollection docs = Application.DocumentManager;

            foreach (Document doc in docs)
            {
                if (doc.Name == sourceFileName)
                {
                    docs.CurrentDocument= doc;
                    makingLayers();
                }
            }
            //ReadJson();
            //if (!System.IO.File.Exists(strCurJsonPath))
            //{
            //    var frm = new ProjTypeForm();
            //    frm.Show();
            //}
            JsonLst= ReadFromNod();
            WriteAllList(Commands.JsonLst);
            if(JsonLst.Count==0&&sourceFileName!="")
            {
                var frm = new ProjTypeForm();
                    frm.Show();
            }
        }      

        [CommandMethod("mmg")]
        public void MarkMargin()
        {
            //MakingMarginBox();
            var frm = new NBCLayers.MarginForm();
            frm.Show();
        }

        [CommandMethod("nbcsave")]
        public void NbcSave()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var database = currentDocument.Database;
            var ed = currentDocument.Editor;

            if (Plugin.strCurDocPath == "")
            {
                System.Windows.Forms.SaveFileDialog svdlg = new System.Windows.Forms.SaveFileDialog();
                svdlg.Filter = "Drawing files (*.dwg)|*.dwg|All files (*.*)|*.*";
                svdlg.FilterIndex = 2;
                svdlg.RestoreDirectory = true;
                string str = "";
                if (svdlg.ShowDialog() == DialogResult.OK)
                {
                    str = svdlg.FileName;
                    Plugin.strCurDocPath = str;
                }
                if (str != "")
                {
                    WriteToNOD();
                    currentDocument.Database.SaveAs(Plugin.strCurDocPath, true, DwgVersion.Current,
                        currentDocument.Database.SecurityParameters);                    
                    var frm = new WDRFrm();
                    frm.Show();
                    Plugin.strCurJsonPath = Path.ChangeExtension(strCurDocPath, "json");
                    //NBCrelate.MakeJson();
                }
            }
            else
            {
                //database.SaveAs(Plugin.strCurDocPath, DwgVersion.Current);
                WriteToNOD();
                currentDocument.Database.SaveAs(Plugin.strCurDocPath, true, DwgVersion.Current,
                        currentDocument.Database.SecurityParameters);
                //NBCrelate.MakeJson();
                if (Plugin.projtypestate != 3 || Plugin.projtypestate != 4 || Plugin.projtypestate != 5)
                {
                    var frm = new WDRFrm();
                    frm.Show();
                }
            }
        }
        [CommandMethod("hsl")]
        public void hideshowLPM()
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            object oldCmdEcho = Application.GetSystemVariable("CMDECHO");
            if (bLpmhs)
            {
                doc.SendStringToExecute(
              "LAYER" + "\n",
              false, false, false);
                bLpmhs = !bLpmhs;
            }
            else
            {
                doc.SendStringToExecute(
              "LAYERCLOSE" + "\n",
              false, false, false);
                bLpmhs = !bLpmhs;
            }
        }
        [CommandMethod("newpro")]
        public void NewProj()
        {
            makingLayers();
            var authrFrm = new projectinForm();
            authrFrm.Show();
            
        }

        [CommandMethod("Application")]
        public void MonitorCommandEvents_Method()
        {
            SubscribeToDoc(Application.DocumentManager.MdiActiveDocument);
        }
        [CommandMethod("WNOD")]

        public void WriteToNOD()
        {
            var documentManager = Application.DocumentManager;
            var currentDocument = documentManager.MdiActiveDocument;
            var db = currentDocument.Database;
            var ed = currentDocument.Editor;
            if (ProsoftAcPlugin.Commands.amroadrule.Count == 0)
            {
                NBCrelate.getonlyMroadentity();
            }
            List<JsonItems> jsonlists = new List<JsonItems>();
            IEnumerable<windowrule> windrulelst = ProsoftAcPlugin.Commands.awindowrule.Distinct();
            IEnumerable<doorrule> doorrulelst = ProsoftAcPlugin.Commands.adoorrule.Distinct();
            IEnumerable<roomrule> rmrulelst = ProsoftAcPlugin.Commands.aroomrule.Distinct();
            IEnumerable<mroadrule> mroadlst = ProsoftAcPlugin.Commands.amroadrule.Distinct();

            foreach (mroadrule wrule in mroadlst)
            {
                jsonlists.Add(new JsonItems()
                {
                    layer = "_MainRoad",
                    OId = wrule.objid.ToString(),
                    width = wrule.width,
                    height = wrule.height,
                    hndle = wrule.hnd.ToString(),
                    projtype = ProjecttypeTostring(Plugin.projtypestate)
                });
            }
            foreach (windowrule wrule in windrulelst)
            {
                jsonlists.Add(new JsonItems()
                {
                    layer = "_Window",
                    OId = wrule.objid.ToString(),
                    width = wrule.width,
                    height = wrule.height,
                    depth=wrule.depth,
                    hndle = wrule.hnd.ToString(),
                    kind=wrule.kind,
                    projtype = ProjecttypeTostring(Plugin.projtypestate)
                });
            }
            foreach (doorrule wrule in doorrulelst)
            {
                jsonlists.Add(new JsonItems()
                {
                    layer = "_Door",
                    OId = wrule.objid.ToString(),
                    width = wrule.width,
                    height = wrule.height,
                    depth = wrule.depth,
                    hndle = wrule.hnd.ToString(),
                    kind = wrule.kind,
                    projtype = ProjecttypeTostring(Plugin.projtypestate)
                });
            }
            foreach (roomrule wrule in rmrulelst)
            {
                jsonlists.Add(new JsonItems()
                {
                    layer = "_Room",
                    OId = wrule.objid.ToString(),
                    width = wrule.width,
                    height = wrule.height,
                    hndle = wrule.hnd.ToString(),
                    projtype = ProjecttypeTostring(Plugin.projtypestate)
                });
            }
            try
            {
                using (Transaction trans = db.TransactionManager.StartTransaction())
                {
                    var nod = (DBDictionary)trans.GetObject(db.NamedObjectsDictionaryId, OpenMode.ForWrite);
                    DBDictionary prevaldict;
                    if (nod.Contains("PrevalData"))
                    {
                        prevaldict = (DBDictionary)trans.GetObject(nod.GetAt("PrevalData"), OpenMode.ForWrite);                        
                    }
                    else
                    {                        
                        trans.GetObject(db.NamedObjectsDictionaryId, OpenMode.ForWrite);
                        prevaldict = new DBDictionary();
                        nod.SetAt("PrevalData", prevaldict);
                        trans.AddNewlyCreatedDBObject(prevaldict, true);
                    }

                    for (int i = 0; i < jsonlists.Count; i++)
                    {
                        Xrecord myXrecord = new Xrecord();
                        prevaldict.SetAt(i.ToString(), myXrecord);
                        trans.AddNewlyCreatedDBObject(myXrecord, true);
                        ResultBuffer resbuf = jsonlists[i].ToResultBuffer();
                        myXrecord.Data = resbuf;
                    }
                    trans.Commit();
                } 

            }

            catch (Exception e)
            {
                //System.Diagnostics.Debug.Print(e.ToString());
            }

        }

        public static List<JsonItems> ReadFromNod()
        {
            List<JsonItems> resultlst = new List<JsonItems>();
            var db = HostApplicationServices.WorkingDatabase;
            using (var tr = db.TransactionManager.StartTransaction())
            {
                var Nod = (DBDictionary)tr.GetObject(db.NamedObjectsDictionaryId, OpenMode.ForRead);
                if(Nod.Contains("PrevalData"))
                {
                    try
                    {
                        var prevaldict = (DBDictionary)tr.GetObject(Nod.GetAt("PrevalData"), OpenMode.ForRead);
                        for (int i = 0; i < prevaldict.Count; i++)
                        {
                            var xrec = (Xrecord)tr.GetObject(prevaldict.GetAt(i.ToString()), OpenMode.ForRead);
                            var data = xrec.Data;
                            resultlst.Add(GetJsonitms(data));
                        }
                        return resultlst;
                    }
                    catch 
                    {
                        throw;
                    }
                }
            }
            return resultlst;
        }
        public static void WriteAllList(List<JsonItems> jsonlists)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var database = doc.Database;
            var ed = doc.Editor;
            foreach (JsonItems item in jsonlists)
            {
                if (item.layer == "_Window")
                {
                    ObjectId oid = ObjectId.Null;
                    Handle hnd;
                    if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                    {
                        if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                        {
                            hnd = new Handle(result);
                            oid = id;
                            Polyline poly;
                            using (Transaction tr = database.TransactionManager.StartTransaction())
                            {
                                poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                tr.Commit();
                            }
                            windowrule wrule = new windowrule();
                            wrule.width = (float)item.width;
                            wrule.height = (float)item.height;
                            wrule.depth = (float)item.depth;
                            wrule.objid = oid;
                            wrule.hnd = hnd;
                            wrule.pl = poly;
                            wrule.kind = item.kind;
                            Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                            ProsoftAcPlugin.Commands.awindowrule.Add(wrule);
                        }
                    }
                }
                if (item.layer == "_Door")
                {
                    ObjectId oid = ObjectId.Null;
                    Handle hnd;
                    if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                    {
                        if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                        {
                            hnd = new Handle(result);
                            oid = id;
                            Polyline poly;
                            using (Transaction tr = database.TransactionManager.StartTransaction())
                            {
                                poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                tr.Commit();
                            }
                            doorrule wrule = new doorrule();
                            wrule.width = (float)item.width;
                            wrule.height = (float)item.height;
                            wrule.depth = (float)item.depth;
                            wrule.objid = oid;
                            wrule.hnd = hnd;
                            wrule.pl = poly;
                            wrule.kind = item.kind;
                            Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                            ProsoftAcPlugin.Commands.adoorrule.Add(wrule);
                        }
                    }
                }
                if (item.layer == "_Room")
                {
                    ObjectId oid = ObjectId.Null;
                    Handle hnd;
                    if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                    {
                        if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                        {
                            hnd = new Handle(result);
                            oid = id;
                            Polyline poly;
                            using (Transaction tr = database.TransactionManager.StartTransaction())
                            {
                                poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                tr.Commit();
                            }
                            roomrule wrule = new roomrule();
                            wrule.objid = oid;
                            wrule.width = (float)item.width;
                            wrule.height = (float)item.height;
                            wrule.hnd = hnd;
                            wrule.pl = poly;
                            Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                            ProsoftAcPlugin.Commands.aroomrule.Add(wrule);
                        }
                    }

                }
                if (item.layer == "_MainRoad")
                {
                    ObjectId oid = ObjectId.Null;
                    Handle hnd;
                    if (long.TryParse(item.hndle, NumberStyles.HexNumber, CultureInfo.CurrentCulture, out long result))
                    {
                        if (database.TryGetObjectId(new Handle(result), out ObjectId id))
                        {
                            hnd = new Handle(result);
                            oid = id;
                            Polyline poly;
                            using (Transaction tr = database.TransactionManager.StartTransaction())
                            {
                                poly = tr.GetObject(oid, OpenMode.ForRead, false) as Polyline;
                                tr.Commit();
                            }
                            mroadrule wrule = new mroadrule();
                            wrule.objid = oid;
                            wrule.width = (float)item.width;
                            wrule.height = (float)item.height;
                            wrule.hnd = hnd;
                            wrule.pl = poly;
                            Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                            ProsoftAcPlugin.Commands.amroadrule.Add(wrule);
                        }
                        else
                            Plugin.projtypestate = ProjecttypetoUint(item.projtype);
                    }
                }
            }
            //Application.ShowAlertDialog(ProsoftAcPlugin.Commands.amroadrule.Count.ToString());
        }
        public static JsonItems GetJsonitms(ResultBuffer resbuf)
        {
            JsonItems resitems = new JsonItems();
            if (resbuf != null)
            {                
                var data = resbuf.AsArray();
                if (data.Length == 9)
                {
                    resitems = new JsonItems()
                    {
                        layer = (string)data[0].Value,
                        OId = (string)data[1].Value,
                        width = (double)data[2].Value,
                        height = (double)data[3].Value,
                        depth=(double)data[4].Value,
                        hndle = (string)data[5].Value,
                        projtype = (string)data[6].Value,
                        bpass = (string)data[7].Value,
                        kind = (string)data[8].Value
                    };
                }
                
            }
            return resitems;
        }

        [CommandMethod("RoomRename")]               ///////Assign Name Module   /////////////////
        public void RenameRoom()
        {
            //var doc = Application.DocumentManager.MdiActiveDocument;
            //var db = doc.Database;
            //var ed = doc.Editor;
            Plugin.bARoom = true;
            var frm = new RoomNameForm();
            frm.Show();            
        }
        [CommandMethod("entgate")]               
        public void Enterancegatename()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Plugin.bARoom = true;
            var frm = new EnteranceGateFrm();
            if(frm.ShowDialog()==DialogResult.OK)
            {
                SetLayerCurrent("_AccessoryUse");
                PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
                options.SetRejectMessage("\nSelected object is no a Polyline.");
                options.AddAllowedClass(typeof(Polyline), true);
                PromptEntityResult result = ed.GetEntity(options);
                if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
                {
                    if (result.Status == PromptStatus.OK)
                    {
                        // at this point we know an entity have been selected and it is a Polyline
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                            curhnd = result.ObjectId.Handle;
                            curoid = result.ObjectId;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    Point3d pickPoint = result.PickedPoint;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.InsdoorName;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextHeight = 0.3;
                                    txt.TextStyleId = mtStyleid;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                    double rdwidth = GetRoadWidth(txt.Contents);
                                    Gaterule mrdrule = new Gaterule();
                                    mrdrule.pl = poly;
                                    mrdrule.width = Plugin.nCurwidth;
                                    mrdrule.height = Plugin.nCurheight;
                                    mrdrule.objid = curoid;
                                    mrdrule.hnd = curhnd;
                                    mrdrule.kind = Commands.ProjecttypeTostring(Plugin.projtypestate);
                                    mrdrule.depth = Plugin.nCurDepth;
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            tr.Commit();
                        }
                    }
                }
            }            
        }
        [CommandMethod("exitgate")]
        public void Exitegatename()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Plugin.bARoom = true;
            var frm = new ExitGateFrm();
            if (frm.ShowDialog() == DialogResult.OK)
            {
                SetLayerCurrent("_AccessoryUse");
                PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
                options.SetRejectMessage("\nSelected object is no a Polyline.");
                options.AddAllowedClass(typeof(Polyline), true);
                PromptEntityResult result = ed.GetEntity(options);
                if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
                {
                    if (result.Status == PromptStatus.OK)
                    {
                        // at this point we know an entity have been selected and it is a Polyline
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                            curhnd = result.ObjectId.Handle;
                            curoid = result.ObjectId;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    Point3d pickPoint = result.PickedPoint;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.InsdoorName;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextHeight = 0.3;
                                    txt.TextStyleId = mtStyleid;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                    double rdwidth = GetRoadWidth(txt.Contents);
                                    Gaterule mrdrule = new Gaterule();
                                    mrdrule.pl = poly;
                                    mrdrule.width = Plugin.nCurwidth;
                                    mrdrule.height = Plugin.nCurheight;
                                    mrdrule.objid = curoid;
                                    mrdrule.hnd = curhnd;
                                    mrdrule.kind = Commands.ProjecttypeTostring(Plugin.projtypestate);
                                    mrdrule.depth = Plugin.nCurDepth;
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            tr.Commit();
                        }
                    }
                }
            }
        }
        [CommandMethod("assignroad")]
        public void assignroad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            var frm = new NBCLayers.RoadAName();
            frm.Show();
            SetLayerCurrent("_MainRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MainRoad")
            {
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        curhnd = result.ObjectId.Handle;
                        curoid = result.ObjectId;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Plugin.ANexistRdwidth + " " + Plugin.ANpropRdwidth + "ROAD";
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                                double rdwidth = GetRoadWidth(txt.Contents);
                                mroadrule mrdrule = new mroadrule();
                                mrdrule.pl = poly;
                                mrdrule.width = (float)width;
                                mrdrule.height = (float)height;
                                mrdrule.objid = curoid;
                                mrdrule.hnd = curhnd;
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
            Plugin.bANRd = false;
        }

        [CommandMethod("assignpassage")]
        public void assignpassage()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Passage");
            var frm = new NBCLayers.ANPassage();
            frm.Show();
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Passage" && resultSet.Count != 0)
            {
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            int i = 0;
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Plugin.ANPgewidth + " " + Plugin.ANPgeitem;
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
            Plugin.bANPge = false;
        }

        [CommandMethod("assignbuilding")]
        public void assignbuilding()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Plugin.bANBNP = true;
            Polyline pln1;
            var frm = new ANBnPropWork();
            if(frm.ShowDialog()==DialogResult.OK)
            {
                TypedValue[] acTypedValueArray = new TypedValue[2];
                acTypedValueArray.SetValue(new TypedValue(0 /*(int)DxfCode.Start*/, "LWPolyline"), 0);
                SelectionFilter acSelectionFilter = new SelectionFilter(acTypedValueArray);
                Application.ShowAlertDialog("First Select a _BuildingName Layer Polyline.");
                PromptSelectionOptions acPoptions = new PromptSelectionOptions
                {
                    SingleOnly = false,
                    SinglePickInSpace = false
                };
                
                using (Transaction acCurrTrans = db.TransactionManager.StartTransaction())
                {
                    TextStyleTable ts = (TextStyleTable)acCurrTrans.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                    ObjectId mtStyleid = db.Textstyle;
                    if (ts.Has("Romans"))
                    {
                        mtStyleid = ts["Romans"];
                    }
                    PromptEntityOptions options = new PromptEntityOptions("\nSelect a BuildingName Polyline: ");
                    options.SetRejectMessage("\nSelected object is no a Polyline.");
                    options.AddAllowedClass(typeof(Polyline), true);
                    PromptEntityResult result = ed.GetEntity(options);
                    SetLayerCurrent("_BuildingName");
                    if (result.Status == PromptStatus.OK)
                    {
                        try
                        {
                            pln1 = acCurrTrans.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                            Plugin.ANBNPpl1 = pln1;
                            Application.ShowAlertDialog("_BuildingName Polyline OK, Select _ProposedWork Polylines.");
                            SetLayerCurrent("_ProposedWork");
                            Point3d leftpt = pln1.GetPoint3dAt(0);
                            Point3d upperpt = pln1.GetPoint3dAt(0);
                            Point3d rightpt = pln1.GetPoint3dAt(0);
                            Point3d bottompt = pln1.GetPoint3dAt(0);

                            int cnt1 = pln1.NumberOfVertices;
                            for (int i = 0; i < cnt1; i++)
                            {
                                Point3d curpt = pln1.GetPoint3dAt(i);
                                if (curpt.X < leftpt.X)
                                    leftpt = curpt;
                                if (curpt.Y < bottompt.Y)
                                    bottompt = curpt;
                                if (curpt.X > rightpt.X)
                                    rightpt = curpt;
                                if (curpt.Y > upperpt.Y)
                                    upperpt = curpt;
                            }
                            BlockTableRecord btr = (BlockTableRecord)acCurrTrans.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            DBText txt = new DBText();
                            txt.TextString = Plugin.ANBNPwing + Plugin.ANBNPbuilding;
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 0.5; //<==change to your default height
                                              //txt.Height = HeightRectPolyline(upperpt, bottompt) / 8.0; //<==change to your default height
                                              //txt.Width = WidthRectPolyline(leftpt, rightpt);
                            txt.TextStyleId = mtStyleid;
                            txt.Layer = pln1.Layer;
                            txt.Position = new Point3d(leftpt.X, bottompt.Y, 0);
                            btr.AppendEntity(txt);
                            acCurrTrans.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    acCurrTrans.Commit();
                }
                var resultSet = PromptForPolylineSSet("\nSelect ProposedWork Polylines:");
                if (resultSet == null)
                    return;
                ObjectId[] oids = resultSet.GetObjectIds();
                if ((string)Application.GetSystemVariable("clayer") == "_ProposedWork" && resultSet.Count != 0)
                {
                    int i = 1;
                    foreach (SelectedObject obj in resultSet)
                    {
                        if (obj != null)
                        {
                            using (Transaction tr = db.TransactionManager.StartTransaction())
                            {
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                                if (poly != null)
                                {
                                    try
                                    {
                                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                        ObjectId mtStyleid = db.Textstyle;
                                        if (ts.Has("Romans"))
                                        {
                                            mtStyleid = ts["Romans"];
                                        }
                                        PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                        PickPointDescriptor ppd = ppsd.PickPoint;
                                        Point3d pickPoint = ppd.PointOnLine;
                                        Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                        double param = 0;
                                        param = poly.GetParameterAtPoint(oPoint);
                                        double sparam = 0, eparam = 0;
                                        sparam = (int)param;
                                        eparam = sparam + 1;
                                        Point3d sp = poly.GetPointAtParameter(sparam);
                                        Point3d ep = poly.GetPointAtParameter(eparam);
                                        double ang = Angle(sp, ep);
                                        Extents3d ext = poly.GeometricExtents;
                                        Point3d min = ext.MinPoint;
                                        Point3d max = ext.MaxPoint;
                                        Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                        BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                        MText txt = new MText();
                                        txt.Contents = Plugin.ANBNPwing + Plugin.ANBNPbuilding + " " + i.ToString();
                                        txt.SetDatabaseDefaults(db);
                                        Point3d ptleft = Getleft(poly);
                                        Point3d ptright = Getright(poly);
                                        Point3d pttop = Gettop(poly);
                                        Point3d ptbottom = Getbottom(poly);
                                        double width = ptright.X - ptleft.X;
                                        double height = pttop.Y - ptbottom.Y;
                                        txt.Height = height / 2;
                                        txt.Width = width / 2;
                                        txt.TextStyleId = mtStyleid;
                                        txt.TextHeight = 0.3;
                                        txt.Attachment = AttachmentPoint.BottomLeft;
                                        txt.Location = new Point3d(ptleft.X, ptbottom.Y, 0);
                                        txt.Layer = poly.Layer;
                                        btr.AppendEntity(txt);
                                        tr.AddNewlyCreatedDBObject(txt, true);
                                    }
                                    catch
                                    {
                                        throw;
                                    }
                                }                                
                                tr.Commit();
                            }
                        }
                        i++;
                    }
                }
            }
        }

        [CommandMethod("AssignFloorName")]
        public static void AssignFloorNames()
        {            
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            NBCLayers.FloorNameForm frm = new NBCLayers.FloorNameForm();
            frm.Show();
        }

        [CommandMethod("assignramp")]
        public void assignramp()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Ramp");
            var frm = new NBCLayers.ANRamp();
            frm.Show();
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Ramp" && resultSet.Count != 0)
            {
                int i = 0;
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    foreach (SelectedObject obj in resultSet)
                    {
                        Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                PickPointDescriptor ppd = ppsd.PickPoint;
                                Point3d pickPoint = ppd.PointOnLine;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Plugin.ANRmpwidth + " " + Plugin.ANRmplngh + " " + Plugin.ANRmphght + " " + Plugin.ANrmpitem;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextStyleId = mtStyleid;
                                txt.TextHeight = 0.3;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                    }
                    i++;
                    tr.Commit();
                }
            }
        }
        [CommandMethod("firepipewt")]
        public void firepipewt()
        {
            if(Plugin.allLayers.Contains("_Fire Fighting Pipe"))
            {
                var doc = Application.DocumentManager.MdiActiveDocument;
                var db = doc.Database;
                var ed = doc.Editor;
                var frm = new FirePipe();
                if(frm.ShowDialog()==DialogResult.OK)
                {
                    SetLayerCurrent("_Fire Fighting Pipe");
                    PromptEntityOptions peo = new PromptEntityOptions("\nSelect a Fire Fighting Pipe layer entity:");
                    peo.SetRejectMessage("\nSelected object is not a Polyline or Line.");
                    peo.AddAllowedClass(typeof(Polyline), true);
                    peo.AddAllowedClass(typeof(Line), true);
                    PromptEntityResult per = ed.GetEntity(peo);
                    if(per.Status==PromptStatus.OK)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Entity ent = (Entity)tr.GetObject(per.ObjectId, OpenMode.ForWrite);
                            if (ent.Layer == "_Fire Fighting Pipe")
                            {
                                LayerTable acLyrTbl;
                                acLyrTbl = tr.GetObject(db.LayerTableId, OpenMode.ForRead) as LayerTable;
                                LayerTableRecord lyrtbr;
                                lyrtbr = tr.GetObject(acLyrTbl["_Fire Fighting Pipe"], OpenMode.ForWrite) as LayerTableRecord;
                                switch (linewgt)
                                {
                                    case 0:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight030;
                                            ent.LineWeight = LineWeight.LineWeight030;
                                            break;
                                        }
                                    case 1:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight040;
                                            ent.LineWeight = LineWeight.LineWeight040;
                                            break;
                                        }
                                    case 2:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight060;
                                            ent.LineWeight = LineWeight.LineWeight060;
                                            break;
                                        }
                                    case 3:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight070;
                                            ent.LineWeight = LineWeight.LineWeight070;
                                            break;
                                        }
                                    case 4:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight090;
                                            ent.LineWeight = LineWeight.LineWeight090;
                                            break;
                                        }
                                    case 5:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight106;
                                            ent.LineWeight = LineWeight.LineWeight106;
                                            break;
                                        }
                                    case 6:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight120;
                                            ent.LineWeight = LineWeight.LineWeight120;
                                            break;
                                        }
                                    case 7:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight140;
                                            ent.LineWeight = LineWeight.LineWeight140;
                                            break;
                                        }
                                }
                            }
                            else
                                Application.ShowAlertDialog("Please select a correct layer entity.");
                            tr.Commit();
                        }
                    }
                    
                }
            }
            else
            {
                Application.ShowAlertDialog("There is no _Fire Fighting Pipe layer.");
                return;
            }
        }
        [CommandMethod("headerpipewt")]
        public void headerpipewt()
        {
            
            if (Plugin.allLayers.Contains("_Header Pipe"))
            {
                var doc = Application.DocumentManager.MdiActiveDocument;
                var db = doc.Database;
                var ed = doc.Editor;
                
                var frm = new FirePipe();
                if (frm.ShowDialog() == DialogResult.OK)
                {
                    SetLayerCurrent("_Header Pipe");
                    PromptEntityOptions peo = new PromptEntityOptions("\nSelect a Fire Fighting Pipe layer entity:");
                    peo.SetRejectMessage("\nSelected object is not a Polyline or Line.");
                    peo.AddAllowedClass(typeof(Polyline), true);
                    peo.AddAllowedClass(typeof(Line), true);
                    PromptEntityResult per = ed.GetEntity(peo);
                    if (per.Status == PromptStatus.OK)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Entity ent = (Entity)tr.GetObject(per.ObjectId, OpenMode.ForWrite);
                            if (ent.Layer == "_Header Pipe")
                            {
                                LayerTable acLyrTbl;
                                acLyrTbl = tr.GetObject(db.LayerTableId, OpenMode.ForRead) as LayerTable;
                                LayerTableRecord lyrtbr;
                                lyrtbr = tr.GetObject(acLyrTbl["_Header Pipe"], OpenMode.ForWrite) as LayerTableRecord;
                                switch (linewgt)
                                {
                                    case 0:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight030;
                                            ent.LineWeight = LineWeight.LineWeight030;
                                            break;
                                        }
                                    case 1:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight040;
                                            ent.LineWeight = LineWeight.LineWeight040;
                                            break;
                                        }
                                    case 2:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight060;
                                            ent.LineWeight = LineWeight.LineWeight060;
                                            break;
                                        }
                                    case 3:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight070;
                                            ent.LineWeight = LineWeight.LineWeight070;
                                            break;
                                        }
                                    case 4:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight090;
                                            ent.LineWeight = LineWeight.LineWeight090;
                                            break;
                                        }
                                    case 5:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight106;
                                            ent.LineWeight = LineWeight.LineWeight106;
                                            break;
                                        }
                                    case 6:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight120;
                                            ent.LineWeight = LineWeight.LineWeight120;
                                            break;
                                        }
                                    case 7:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight140;
                                            ent.LineWeight = LineWeight.LineWeight140;
                                            break;
                                        }
                                }
                            }
                            else
                                Application.ShowAlertDialog("Please select a correct layer entity.");
                            tr.Commit();
                        }
                    }
                }
            }
            else
            {
                Application.ShowAlertDialog("There is no Header Pipe layer.");
                return;
            }
        }
        [CommandMethod("branchpipewt")]
        public void branchpipewt()
        {

            if (Plugin.allLayers.Contains("_Header Pipe"))
            {
                var doc = Application.DocumentManager.MdiActiveDocument;
                var db = doc.Database;
                var ed = doc.Editor;

                var frm = new FirePipe();
                if (frm.ShowDialog() == DialogResult.OK)
                {
                    SetLayerCurrent("_Branch Pipe");
                    PromptEntityOptions peo = new PromptEntityOptions("\nSelect a Fire Fighting Pipe layer entity:");
                    peo.SetRejectMessage("\nSelected object is not a Polyline or Line.");
                    peo.AddAllowedClass(typeof(Polyline), true);
                    peo.AddAllowedClass(typeof(Line), true);
                    PromptEntityResult per = ed.GetEntity(peo);
                    if (per.Status == PromptStatus.OK)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Entity ent = (Entity)tr.GetObject(per.ObjectId, OpenMode.ForWrite);
                            if (ent.Layer == "_Branch Pipe")
                            {
                                LayerTable acLyrTbl;
                                acLyrTbl = tr.GetObject(db.LayerTableId, OpenMode.ForRead) as LayerTable;
                                LayerTableRecord lyrtbr;
                                lyrtbr = tr.GetObject(acLyrTbl["_Branch Pipe"], OpenMode.ForWrite) as LayerTableRecord;
                                switch (linewgt)
                                {
                                    case 0:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight030;
                                            ent.LineWeight = LineWeight.LineWeight030;
                                            break;
                                        }
                                    case 1:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight040;
                                            ent.LineWeight = LineWeight.LineWeight040;
                                            break;
                                        }
                                    case 2:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight060;
                                            ent.LineWeight = LineWeight.LineWeight060;
                                            break;
                                        }
                                    case 3:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight070;
                                            ent.LineWeight = LineWeight.LineWeight070;
                                            break;
                                        }
                                    case 4:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight090;
                                            ent.LineWeight = LineWeight.LineWeight090;
                                            break;
                                        }
                                    case 5:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight106;
                                            ent.LineWeight = LineWeight.LineWeight106;
                                            break;
                                        }
                                    case 6:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight120;
                                            ent.LineWeight = LineWeight.LineWeight120;
                                            break;
                                        }
                                    case 7:
                                        {
                                            lyrtbr.LineWeight = LineWeight.LineWeight140;
                                            ent.LineWeight = LineWeight.LineWeight140;
                                            break;
                                        }
                                }
                            }
                            else
                                Application.ShowAlertDialog("Please select a correct layer entity.");
                            tr.Commit();
                        }
                    }
                }
            }
            else
            {
                Application.ShowAlertDialog("There is no Branch Pipe layer.");
                return;
            }
        }

        /// <summary>
        /// Assign Name Module End//////////////
        /// </summary>
        [CommandMethod("InstWindow")]               ////////////Insert Menu Module
        public void InsertWindow()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Window");
            var frm = new NBCLayers.WindowSizeFrm();
            frm.Show();
 reselect:          
            var resultSet = PromptForPolylineSSet("\nSelect Wwindow Polyline:");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Window")
            {
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            int i = 0;
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            curhnd = obj.ObjectId.Handle;
                            curoid = obj.ObjectId;
                            if (poly != null&&poly.Layer== "_Window")
                            {
                                AddLightweightPolyline(poly);
                            }
                            else
                            {
                                MessageBox.Show("Selected Polyline layer is not Window, Please retry.");
                                goto reselect;
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }                
                Commands.brmnamechanged = false;
            }
        }
        [CommandMethod("InstDoor")]
        public void InsertDoor()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Door");
            var frm = new ProsoftAcPlugin.DoorSizeFrm();
            if(frm.ShowDialog() == DialogResult.OK)
            {
            reselect: var resultSet = PromptForPolylineSSet("nSelect Door Polyline:");
                if (resultSet == null)
                    return;
                ObjectId[] oids = resultSet.GetObjectIds();

                if ((string)Application.GetSystemVariable("clayer") == "_Door" && resultSet.Count != 0)
                {
                    foreach (SelectedObject obj in resultSet)
                    {
                        if (obj != null)
                        {
                            using (Transaction tr = db.TransactionManager.StartTransaction())
                            {
                                int i = 0;
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                                curhnd = obj.ObjectId.Handle;
                                curoid = obj.ObjectId;
                                if (poly != null&&poly.Layer== "_Door")
                                {
                                    AddLightweightPolyline(poly);
                                }
                                else
                                {
                                    MessageBox.Show("Selected Polyline layer is not Door, Please retry.");
                                    goto reselect;
                                }
                                i++;
                                tr.Commit();
                            }
                        }
                    }
                    Commands.brmnamechanged = false;
                }
            }
            
        }
        [CommandMethod("instfiredoor")]
        public void instfiredoor()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Fire Door");
            var frm = new ProsoftAcPlugin.FireDoorFrm();
            if(frm.ShowDialog()==DialogResult.OK)
            {
            reselect: var resultSet = PromptForPolylineSSet("nSelect Door Polyline:");
                if (resultSet == null)
                    return;
                ObjectId[] oids = resultSet.GetObjectIds();

                if ((string)Application.GetSystemVariable("clayer") == "_Fire Door" && resultSet.Count != 0)
                {
                    foreach (SelectedObject obj in resultSet)
                    {
                        if (obj != null)
                        {
                            using (Transaction tr = db.TransactionManager.StartTransaction())
                            {
                                int i = 0;
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                                curhnd = obj.ObjectId.Handle;
                                curoid = obj.ObjectId;
                                if (poly != null)
                                {
                                    AddLightweightPolyline(poly);
                                }
                                else
                                {
                                    MessageBox.Show("Selected Polyline layer is not FireDoor, Please retry.");
                                    goto reselect;
                                }
                                i++;
                                tr.Commit();
                            }
                        }
                    }
                    Commands.brmnamechanged = false;
                }
            }
        
        }

        [CommandMethod("instsump")]
        public void instsump()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Fire Fighting Installation");
            var frm = new ProsoftAcPlugin.SumpFrm();
            if (frm.ShowDialog() == DialogResult.OK)
            {
            reselect: var resultSet = PromptForPolylineSSet("nSelect Door Polyline:");
                if (resultSet == null)
                    return;
                ObjectId[] oids = resultSet.GetObjectIds();

                if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation" && resultSet.Count != 0)
                {
                    foreach (SelectedObject obj in resultSet)
                    {
                        if (obj != null)
                        {
                            using (Transaction tr = db.TransactionManager.StartTransaction())
                            {
                                int i = 0;
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                                curhnd = obj.ObjectId.Handle;
                                curoid = obj.ObjectId;
                                if (poly != null)
                                {
                                    AddLightweightPolyline(poly);
                                }
                                else
                                {
                                    MessageBox.Show("Selected Polyline layer is not correct layer, Please retry.");
                                    goto reselect;
                                }
                                i++;
                                tr.Commit();
                            }
                        }
                    }
                    Commands.brmnamechanged = false;
                }
            }

        }
        [CommandMethod("insttank")]
        public void insttank()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Fire Fighting Installation");
            var frm = new ProsoftAcPlugin.TankFrm();
            if (frm.ShowDialog() == DialogResult.OK)
            {
            reselect: var resultSet = PromptForPolylineSSet("nSelect a Polyline:");
                if (resultSet == null)
                    return;
                ObjectId[] oids = resultSet.GetObjectIds();

                if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation" && resultSet.Count != 0)
                {
                    foreach (SelectedObject obj in resultSet)
                    {
                        if (obj != null)
                        {
                            using (Transaction tr = db.TransactionManager.StartTransaction())
                            {
                                int i = 0;
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                                curhnd = obj.ObjectId.Handle;
                                curoid = obj.ObjectId;
                                if (poly != null)
                                {
                                    AddLightweightPolyline(poly);
                                }
                                else
                                {
                                    MessageBox.Show("Selected Polyline layer is not correct layer, Please retry.");
                                    goto reselect;
                                }
                                i++;
                                tr.Commit();
                            }
                        }
                    }
                    Commands.brmnamechanged = false;
                }
            }

        }
        [CommandMethod("instfiregate")]
        public void instfiregate()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Fire Gate");
            var frm = new ProsoftAcPlugin.FireGateFrm();
            if (frm.ShowDialog() == DialogResult.OK)
            {
            reselect: var resultSet = PromptForPolylineSSet("nSelect a Polyline:");
                if (resultSet == null)
                    return;
                ObjectId[] oids = resultSet.GetObjectIds();

                if ((string)Application.GetSystemVariable("clayer") == "_Fire Gate" && resultSet.Count != 0)
                {
                    foreach (SelectedObject obj in resultSet)
                    {
                        if (obj != null)
                        {
                            using (Transaction tr = db.TransactionManager.StartTransaction())
                            {
                                int i = 0;
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                                curhnd = obj.ObjectId.Handle;
                                curoid = obj.ObjectId;
                                if (poly != null)
                                {
                                    AddLightweightPolyline(poly);
                                }
                                else
                                {
                                    MessageBox.Show("Selected Polyline layer is not correct layer, Please retry.");
                                    goto reselect;
                                }
                                i++;
                                tr.Commit();
                            }
                        }
                    }
                    Commands.brmnamechanged = false;
                }
            }

        }

        [CommandMethod("InstBuTem")]
        public void InstBuTem()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_BuildingName");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_BuildingName")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                            txt.Width = 10;
                            txt.TextHeight = 0.3;
                            txt.Contents = "Building Template";
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("InstRefCir")]
        public void InstRefCir()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Floor");
            int refcircount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("DirectionRef_PreVal"))
                        {
                            refcircount++;
                        }
                    }
                }
                tr.Commit();
            }
            refcircount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {                        
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "DirectionRef_PreVal" +"_Floor" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + refcircount.ToString();
                        //Application.ShowAlertDialog("DirectionRef_PreVal" + "_Floor" + System.DateTime.Now.Minute.ToString()
                        //    + System.DateTime.Now.Second.ToString() + refcircount.ToString());
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = makefloorcircle(ptCenter);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {                        
                        DBObjectCollection ents1 = makeResiBUAcircle(ptCenter);
                        BlockTable acBlkTbl1;
                        acBlkTbl1 = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec1 = new BlockTableRecord();
                        acBlkTblRec1.Name = "DirectionRef_PreVal" + "_ResiBUA" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + refcircount.ToString();
                        acBlkTblRec1.Origin = ptCenter;
                        acBlkTbl1.UpgradeOpen();
                        ObjectId btrId1 = acBlkTbl1.Add(acBlkTblRec1);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec1, true);
                        foreach (Entity ent1 in ents1)
                        {
                            acBlkTblRec1.AppendEntity(ent1);
                            tr.AddNewlyCreatedDBObject(ent1, true);
                        }
                        BlockTableRecord ms1 = (BlockTableRecord)tr.GetObject(acBlkTbl1[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br1 = new BlockReference(ptCenter, btrId1);
                        ms1.AppendEntity(br1);
                        tr.AddNewlyCreatedDBObject(br1, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("InstNDir")]
        public void InstNDir()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nEnter the center point of the north Point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Autodesk.AutoCAD.DatabaseServices.Group tmpgrp = new Autodesk.AutoCAD.DatabaseServices.Group("", true);
                    if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec = new BlockTableRecord();
                            acBlkTblRec.Name = "NorthDirection_PreVal"+System.DateTime.Now.Minute.ToString()+
                                System.DateTime.Now.Second.ToString();
                            acBlkTbl.UpgradeOpen();
                            ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                            tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                            DBObjectCollection ents = SquareOfLines();
                            foreach (Entity ent in ents)
                            {
                                acBlkTblRec.AppendEntity(ent);
                                tr.AddNewlyCreatedDBObject(ent, true);
                            }
                            BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);

                            BlockReference br = new BlockReference(Point3d.Origin, btrId);
                            ms.AppendEntity(br);
                            tr.AddNewlyCreatedDBObject(br, true);
                            Hatch acHatch = new Hatch();
                            acHatch.SetDatabaseDefaults();
                            acBlkTblRec.AppendEntity(acHatch);
                            tr.AddNewlyCreatedDBObject(acHatch, true);
                            acHatch.SetHatchPattern(HatchPatternType.PreDefined, "SOLID");
                            acHatch.Associative = true;
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("insertsection")]
        public void insertsection()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SectionLine");
            var frm = new SecLineFrm();
            frm.Show();
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nEnter the Start point of the Section Line: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptstart = pPtRes.Value;
            if ((string)Application.GetSystemVariable("clayer") == "_SectionLine")
            {
                if (pPtRes.Status == PromptStatus.OK)
                {
                    PromptPointResult pPtRes1;
                    PromptPointOptions pPtOpts1 = new PromptPointOptions("");
                    // Prompt for the start point
                    pPtOpts1.Message = "\nEnter the End point of the Section Line: ";
                    pPtRes1 = ed.GetPoint(pPtOpts);
                    Point3d ptend = pPtRes1.Value;
                    if (pPtRes1.Status == PromptStatus.OK)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            try
                            {
                                BlockTable acBlkTbl;
                                acBlkTbl = tr.GetObject(db.BlockTableId,
                                                             OpenMode.ForRead) as BlockTable;
                                BlockTableRecord acBlkTblRec;
                                acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                OpenMode.ForWrite) as BlockTableRecord;
                                Polyline secLine = new Polyline();
                                secLine.SetDatabaseDefaults();
                                secLine.AddVertexAt(0, new Point2d(ptstart.X, ptstart.Y), 0, 0, 0);
                                secLine.AddVertexAt(1, new Point2d(ptend.X, ptstart.Y), 0, 0, 0);
                                secLine.Closed = true;
                                // Add the new object to the block table record and the transaction
                                acBlkTblRec.AppendEntity(secLine);
                                tr.AddNewlyCreatedDBObject(secLine, true);
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                MText txt = new MText();
                                txt.SetDatabaseDefaults(db);
                                txt.Height = 5; 
                                txt.Width = 10;
                                txt.TextHeight = 0.3;
                                txt.Contents = "Section Line";
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptstart.X + (ptend.X - ptstart.X) / 2, ptstart.Y + 2, 0);
                                acBlkTblRec.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                                tr.Commit();
                            }
                            catch
                            {
                                throw;
                            }
                        }
                    }
                }
            }
        }

        [CommandMethod("inserttitle")]
        public void inserttitle()               ///////////This needs fixing./////////////////////
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            var frm = new NBCLayers.Projtittle();
            frm.Show();
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nPick the point of the Tittle: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;
                            Polyline rectangle = new Polyline();
                            rectangle.SetDatabaseDefaults();
                            rectangle.AddVertexAt(0, new Point2d(ptCenter.X, ptCenter.Y), 0, 0, 0);
                            rectangle.AddVertexAt(1, new Point2d(ptCenter.X + 60, ptCenter.Y), 0, 0, 0);
                            rectangle.AddVertexAt(2, new Point2d(ptCenter.X + 60, ptCenter.Y + 20), 0, 0, 0);
                            rectangle.AddVertexAt(3, new Point2d(ptCenter.X, ptCenter.Y + 20), 0, 0, 0);
                            rectangle.Closed = true;
                            acBlkTblRec.AppendEntity(rectangle);
                            tr.AddNewlyCreatedDBObject(rectangle, true);
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 20;
                            txt.Width = 30;
                            txt.TextHeight = 0.3;
                            txt.Contents = Commands.InsProjstr;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X + 30, ptCenter.Y + 15, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }
        [CommandMethod("InstTree")]
        public void InstTree()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Tree");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nPick the point of the Tree: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Tree")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5;
                            txt.Width = 10;
                            txt.Contents = "Tree";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("scooter")]
        public void scooter()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Parking")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; 
                            txt.Width = 10;
                            txt.Contents = "Scooter";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("car")]
        public void car()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Parking")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5;
                            txt.Width = 10;
                            txt.Contents = "Car";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("transportvechicle")]
        public void transportvechicle()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Parking")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5;
                            txt.Width = 10;
                            txt.TextHeight = 0.3;
                            txt.Contents = "Transport Vechicle";
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("busparking")]
        public void busparking()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Parking")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5;
                            txt.Width = 10;
                            txt.Contents = "Bus Parking";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("cycle")]
        public void cycle()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Parking")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5;
                            txt.Width = 10;
                            txt.Contents = "Cycle";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("physicallyhandicapped")]
        public void physicallyhandicapped()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Parking")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; 
                            txt.Width = 10;
                            txt.Contents = "Physically Handicapped";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("ablution")]
        public void ablution()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Ablution Tap";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("kitchensink")]
        public void kitchensink()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Kitchen Sink";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("washbasin")]
        public void washbasin()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Wash Basin";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("washingsink")]
        public void washingsink()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Washing Sink";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("cleanersink")]
        public void cleanersink()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Cleaner Sink";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("urinal")]
        public void urinal()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Urinal";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("drinkingwater")]
        public void drinkingwater()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Drinking Water";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }
        [CommandMethod("washingtap")]
        public void washingtap()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sanitation");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    if ((string)Application.GetSystemVariable("clayer") == "_Sanitation")
                    {
                        try
                        {
                            BlockTable acBlkTbl;
                            acBlkTbl = tr.GetObject(db.BlockTableId,
                                                         OpenMode.ForRead) as BlockTable;

                            // Open the Block table record Model space for write
                            BlockTableRecord acBlkTblRec;
                            acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                            OpenMode.ForWrite) as BlockTableRecord;

                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;

                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }

                            MText txt = new MText();
                            txt.SetDatabaseDefaults(db);
                            txt.Height = 5; //<==change to your default height
                                            //txt.Rotation = ang;
                            txt.Width = 10;
                            txt.Contents = "Washing Tap";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptCenter.X, ptCenter.Y, 0);
                            acBlkTblRec.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("stairup")]
        public void stairup()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            if (pPtRes.Status == PromptStatus.OK)
            {
                using (DocumentLock docLock = doc.LockDocument())
                {
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        if ((string)Application.GetSystemVariable("clayer") == "_StairCase")
                        {
                            try
                            {
                                BlockTable acBlkTbl;
                                acBlkTbl = tr.GetObject(db.BlockTableId,
                                                             OpenMode.ForRead) as BlockTable;
                                BlockTableRecord acBlkTblRec=new BlockTableRecord();
                                acBlkTblRec.Name = "StairUp" + System.DateTime.Now.Minute.ToString() + System.DateTime.Now.Second.ToString();
                                
                                acBlkTblRec.Origin = ptCenter;
                                acBlkTbl.UpgradeOpen();
                                ObjectId btrId = acBlkTbl.Add(acBlkTblRec); 
                                tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                                DBObjectCollection ents = new DBObjectCollection();
                                Leader leader = new Leader();
                                leader.SetDatabaseDefaults();
                                leader.AppendVertex(ptCenter);
                                leader.AppendVertex(new Point3d(ptCenter.X + 2, ptCenter.Y, 0));
                                leader.HasArrowHead = true;
                                ents.Add(leader);
                                MText mText = new MText();
                                mText.SetDatabaseDefaults();
                                mText.Width = 20;
                                mText.Height = 10;
                                mText.TextHeight = 0.3;
                                mText.SetContentsRtf("Up");
                                mText.Location = new Point3d(ptCenter.X + 2, ptCenter.Y, 0);
                                ents.Add(mText);
                                foreach (Entity ent in ents)                                    
                                {
                                    acBlkTblRec.AppendEntity(ent);
                                    tr.AddNewlyCreatedDBObject(ent, true);
                                }
                                BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                                var br = new BlockReference(ptCenter, btrId);
                                ms.AppendEntity(br);
                                tr.AddNewlyCreatedDBObject(br, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("stairdown")]
        public void stairdown()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;

            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_StairCase");
            if (pPtRes.Status == PromptStatus.OK)
            {
                using (DocumentLock docLock = doc.LockDocument())
                {
                   using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            if ((string)Application.GetSystemVariable("clayer") == "_StairCase")
                            {
                                try
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = tr.GetObject(db.BlockTableId,
                                                                 OpenMode.ForRead) as BlockTable;
                                    BlockTableRecord acBlkTblRec=new BlockTableRecord();
                                    acBlkTblRec.Name = "StairDown" + System.DateTime.Now.Minute.ToString() + System.DateTime.Now.Second.ToString();
                                    acBlkTblRec.Origin = ptCenter;
                                    acBlkTbl.UpgradeOpen();
                                    ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                                    tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                                    DBObjectCollection ents = new DBObjectCollection();
                                    Leader leader = new Leader();
                                    leader.SetDatabaseDefaults();
                                    leader.AppendVertex(ptCenter);
                                    leader.AppendVertex(new Point3d(ptCenter.X + 2, ptCenter.Y, 0));
                                    leader.HasArrowHead = true;
                                    ents.Add(leader);
                                    MText mText = new MText();

                                    mText.SetDatabaseDefaults();
                                    mText.Width = 20;
                                    mText.Height = 10;
                                    mText.TextHeight = 0.3;
                                    mText.SetContentsRtf("Down");
                                    mText.Location = new Point3d(ptCenter.X + 2, ptCenter.Y, 0);
                                    ents.Add(mText);
                                    foreach (Entity ent in ents)
                                    {
                                        acBlkTblRec.AppendEntity(ent);
                                        tr.AddNewlyCreatedDBObject(ent, true);
                                    }
                                    BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                                    var br = new BlockReference(ptCenter, btrId);
                                    ms.AppendEntity(br);
                                    tr.AddNewlyCreatedDBObject(br, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            tr.Commit();
                        }
                }
            }
        }

        [CommandMethod("rmpup")]
        public void Rampup()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Ramp");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;

            if (pPtRes.Status == PromptStatus.OK)
            {
                using (DocumentLock docLock = doc.LockDocument())
                {
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        if ((string)Application.GetSystemVariable("clayer") == "_Ramp")
                        {
                            try
                            {
                                BlockTable acBlkTbl;
                                acBlkTbl = tr.GetObject(db.BlockTableId,
                                                             OpenMode.ForRead) as BlockTable;

                                BlockTableRecord acBlkTblRec=new BlockTableRecord();
                                acBlkTblRec.Name = "RampUp" + System.DateTime.Now.Minute.ToString() + System.DateTime.Now.Second.ToString();
                                acBlkTblRec.Origin = ptCenter;
                                acBlkTbl.UpgradeOpen();
                                ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                                tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                                DBObjectCollection ents = new DBObjectCollection();
                                Leader leader = new Leader();
                                leader.SetDatabaseDefaults();
                                leader.AppendVertex(ptCenter);
                                leader.AppendVertex(new Point3d(ptCenter.X + 2, ptCenter.Y, 0));
                                leader.HasArrowHead = true;
                                ents.Add(leader);
                                MText mText = new MText();

                                mText.SetDatabaseDefaults();
                                mText.Width = 20;
                                mText.Height = 10;
                                mText.TextHeight = 0.3;
                                mText.SetContentsRtf("Up");
                                mText.Location = new Point3d(ptCenter.X + 2, ptCenter.Y, 0);
                                ents.Add(mText);
                                foreach (Entity ent in ents)
                                {
                                    acBlkTblRec.AppendEntity(ent);
                                    tr.AddNewlyCreatedDBObject(ent, true);
                                }
                                BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                                var br = new BlockReference(ptCenter, btrId);
                                ms.AppendEntity(br);
                                tr.AddNewlyCreatedDBObject(br, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("rmpdown")]
        public void Rampdown()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;

            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            // Prompt for the start point
            pPtOpts.Message = "\nPick the point of the Tree: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Ramp");
            if (pPtRes.Status == PromptStatus.OK)
            {
                using (DocumentLock docLock = doc.LockDocument())
                {
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        if ((string)Application.GetSystemVariable("clayer") == "_Ramp")
                        {
                            try
                            {
                                BlockTable acBlkTbl;
                                acBlkTbl = tr.GetObject(db.BlockTableId,
                                                             OpenMode.ForRead) as BlockTable;
                                BlockTableRecord acBlkTblRec=new BlockTableRecord();
                                acBlkTblRec.Name = "RampDown" + System.DateTime.Now.Minute.ToString() + System.DateTime.Now.Second.ToString();
                                acBlkTblRec.Origin = ptCenter;
                                acBlkTbl.UpgradeOpen();
                                ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                                tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                                DBObjectCollection ents = new DBObjectCollection();
                                Leader leader = new Leader();
                                leader.SetDatabaseDefaults();
                                leader.AppendVertex(ptCenter);
                                leader.AppendVertex(new Point3d(ptCenter.X + 2, ptCenter.Y, 0));
                                leader.HasArrowHead = true;
                                ents.Add(leader);
                                MText mText = new MText();

                                mText.SetDatabaseDefaults();
                                mText.Width = 20;
                                mText.Height = 10;
                                mText.TextHeight = 0.3;
                                mText.SetContentsRtf("Down");
                                mText.Location = new Point3d(ptCenter.X + 2, ptCenter.Y, 0);
                                ents.Add(mText);
                                foreach (Entity ent in ents)
                                {
                                    acBlkTblRec.AppendEntity(ent);
                                    tr.AddNewlyCreatedDBObject(ent, true);
                                }
                                BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                                var br = new BlockReference(ptCenter, btrId);
                                ms.AppendEntity(br);
                                tr.AddNewlyCreatedDBObject(br, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        /// <summary>
        /// Insert Menu End/////////////////////////////
        /// </summary>
        [CommandMethod("MarkAccessRoad")]           ///////////////Mark Menu Module begin
        public void MarkAccessRoad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MainRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MainRoad")
            {
                Commands.tmpmarkstring = "AccessRoad";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            { throw; }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MarkMainRoad")]
        public void MarkMainRoad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MainRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MainRoad")
            {
                Commands.tmpmarkstring = "MainRoad";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            { throw; }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MarkOrrRadialRoad")]
        public void MarkOrrRadialRoad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MainRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MainRoad")
            {
                Commands.tmpmarkstring = "ORR Radial Road";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            { throw; }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MarkOrrServiceRoad")]
        public void MarkOrrServiceRoad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MainRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MainRoad")
            {
                Commands.tmpmarkstring = "ORR Service Road";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MarkCommercialRoad")]
        public void MarkCommercialRoad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MainRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MainRoad")
            {
                Commands.tmpmarkstring = "Commercial Road";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }                                
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("Amenityfree")]
        public void Amenityfree()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Amenity");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Amenity")
            {
                Commands.tmpmarkstring = "Area to be given free of cost for disposal for Resi or Comm Use";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("AmenitySocial")]
        public void AmenitySocial()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Amenity");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Amenity")
            {
                Commands.tmpmarkstring = "Area for Social Infrastructure";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("AmenitySpecific")]
        public void AmenitySpecific()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Amenity");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Amenity")
            {
                Commands.tmpmarkstring = "Area for specific sites for bus stands, auto stand etc";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("NurSchool")]
        public void NurSchool()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Nursery School";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("PriSchool")]
        public void PriSchool()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Primary School";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("HighSchool")]
        public void HighSchool()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "High School";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("DegreeCollege")]
        public void DegreeCollege()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Degree College";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("GenHospital")]
        public void GenHospital()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "General Hospital";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("Shops")]
        public void Shops()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Shops";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("SubpOffice")]
        public void SubpOffice()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Sub-PostOffice";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("posttelegoc")]
        public void posttelegoc()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Sub-PostOffice";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("deliverybooktph")]
        public void deliverybooktph()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Delivery & Booking TelePhone";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("exchange1000")]
        public void exchange1000()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Exchange For 1000 Lines";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("electricsubsta")]
        public void electricsubsta()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Electrical Sub-Station";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("polsta")]
        public void polsta()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Police Station";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("polpost")]
        public void polpost()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Police Post";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("firesta")]
        public void firesta()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Fire Station";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("ReligBuilding")]
        public void ReligBuilding()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Religious Building";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("CommunityHall")]
        public void CommunityHall()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Community Hall/KalyanaMandapam/Convention Center/Liverary";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("districtsports")]
        public void districtsports()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "District Sports Centre";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("divisional")]
        public void divisional()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Divisional Sports Centre";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("transstation")]
        public void transstation()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Facilities");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Facilities")
            {
                Commands.tmpmarkstring = "Transfer station and Waste Segregation Place";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                txt.Layer = "_Facilities";
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("OpenGreenStrip")]
        public void OpenGreenStrip()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_OrganizedOpenSpace");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_OrganizedOpenSpace" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Green Strip";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
                             
            }
        }

        [CommandMethod("OpenGreenBelt")]
        public void OpenGreenBelt()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_OrganizedOpenSpace");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_OrganizedOpenSpace" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Green Belt";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("OpenTotlot")]
        public void OpenTotlot()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_OrganizedOpenSpace");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_OrganizedOpenSpace" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Tot lot";
                int i = 0; 
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("MortgageBuilt")]
        public void MortgageBuilt()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Built Up Area to Mortgage";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
                        
            }
        }
        [CommandMethod("MortgageBuiltNala")]
        public void MortgageBuiltNala()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Built Up Area to Mortgage Nala";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("bmclevel")]
        public void BuiltUpareatoMortgageforCityLevel()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Built-Up area to Mortgage for City Level";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("bmdc")]
        public void BuiltupareatoMortgageforDC()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Built-up area to Mortgage for DC";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MortgageDwelling")]
        public void MortgageDwelling()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Dwelling Unit to Mortgage";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MortgageDwellingNala")]
        public void MortgageDwellingNala()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Dwelling Unit to Mortgage Nala";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("dwellingdc")]
        public void DwellingUnittoMortgageforDC()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Dwelling Unit to Mortgage for DC";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MortgageExtra")]
        public void MortgageExtra()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Extra Installment Mortgage";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("MortgageLand")]
        public void MortgageLand()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Land Area to Mortgage";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("naMG")]
        public void NalaMortgage()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MortgageArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_MortgageArea")
            {
                Commands.tmpmarkstring = "Land Area to Mortgage Nala";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ProposedCentrally")]
        public void ProposedCentrally()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ProposedWork");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ProposedWork")
            {
                Commands.tmpmarkstring = "Centrally AC Bldg";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("udamen")]
        public void UndomarkingDefaultAmenity()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Amenity");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }        

        [CommandMethod("udprop")]
        public void UndomarkingDefaultProposed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ProposedWork");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("udrm")]
        public void UndomarkingDefaultRoom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Room");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("udprk")]
        public void UndomarkingDefaultParking()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("udstair")]
        public void UndomarkingDefaultStaircase()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("udlift")]
        public void UndomarkingDefaultLift()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Lift");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Lift");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if ((string)Application.GetSystemVariable("clayer") == "_Lift" && resultSet.Count != 0)
            {
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("udbua")]
        public void UndomarkingDefaultBUA()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ResiBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("udcarpt")]
        public void UndomarkingDefaultCarpet()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_CarpetArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("udb")]
        public void UndomarkingDefaultBalcony()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Balcony");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if ((string)Application.GetSystemVariable("clayer") == "_Balcony" && resultSet.Count != 0)
            {
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("udrd")]
        public void UndomarkingDefaultMainRoad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_MainRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("udrw")]
        public void UndomarkingDefaultWidening()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_RoadWidening");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("udnw")]
        public void UndomarkingDefaultNalaRoad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_NalaRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSwitch to correct Active Layer and Select a Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            string CurLayer = (string)Application.GetSystemVariable("clayer");
            string markstr = CurLayer.Remove(0, 1);
            Commands.tmpmarkstring = markstr;
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
        }

        [CommandMethod("RoomAC")]
        public void RoomAC()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Room");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Room")
            {
                Commands.tmpmarkstring = "AC Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ParkingVisitors")]
        public void RooParkingVisitors()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Parking")
            {
                Commands.tmpmarkstring = "Vistors Parking";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("twostackParking")]
        public void twostackParking()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Parking")
            {
                Commands.tmpmarkstring = "Two Stack Parking";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("threestackParking")]
        public void threestackParking()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Parking")
            {
                Commands.tmpmarkstring = "Three Stack Parking";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("fourstackparking")]
        public void fourstackparking()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Parking");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Parking")
            {
                Commands.tmpmarkstring = "Four Stack Parking";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("oneway")]
        public void oneway()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Driveway");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Driveway")
            {
                Commands.tmpmarkstring = "One way";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("twoway")]
        public void twoway()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Driveway");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Driveway")
            {
                Commands.tmpmarkstring = "Two way";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("tdrfloor")]
        public void tdrfloor()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_FloorInSection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_FloorInSection")
            {
                Commands.tmpmarkstring = "TDR Floor";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForWrite, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                poly.Color=  Color.FromColorIndex(ColorMethod.ByAci, 240);
                                bool binMtxt = false;
                                bool binDBtxt = false;
                                foreach(MText txt in Plugin.aFlrinSecTxt)
                                {
                                    binMtxt = NBCrelate.IsPointInside(txt.Location, poly);
                                    if (binMtxt)
                                    {
                                        Entity ent = tr.GetObject(txt.ObjectId, OpenMode.ForWrite, false) as MText;
                                        ent.Color= Color.FromColorIndex(ColorMethod.ByAci, 240);
                                        break;
                                    }
                                }
                                if(binMtxt)
                                {
                                    foreach (DBText txt in Plugin.aFlrinSecSTxt)
                                    {
                                        binDBtxt = NBCrelate.IsPointInside(txt.Position, poly);
                                        if (binDBtxt)
                                        {
                                            Entity ent = tr.GetObject(txt.ObjectId, OpenMode.ForWrite, false) as DBText;
                                            ent.Color = Color.FromColorIndex(ColorMethod.ByAci, 240);
                                            break;
                                        }
                                    }
                                }
                                //TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                //ObjectId mtStyleid = db.Textstyle;
                                //if (ts.Has("Romans"))
                                //{
                                //    mtStyleid = ts["Romans"];
                                //}
                                //Point3d pickPoint = result.PickedPoint;
                                //Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                //double param = 0;
                                //param = poly.GetParameterAtPoint(oPoint);
                                //double sparam = 0, eparam = 0;
                                //sparam = (int)param;
                                //eparam = sparam + 1;
                                //Point3d sp = poly.GetPointAtParameter(sparam);
                                //Point3d ep = poly.GetPointAtParameter(eparam);
                                //double ang = Angle(sp, ep);
                                //Extents3d ext = poly.GeometricExtents;
                                //Point3d min = ext.MinPoint;
                                //Point3d max = ext.MaxPoint;
                                //Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                //BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                //MText txt = new MText();
                                //txt.Contents = Commands.tmpmarkstring;
                                //txt.SetDatabaseDefaults(db);
                                //Point3d ptleft = Getleft(poly);
                                //Point3d ptright = Getright(poly);
                                //Point3d pttop = Gettop(poly);
                                //Point3d ptbottom = Getbottom(poly);
                                //double width = ptright.X - ptleft.X;
                                //double height = pttop.Y - ptbottom.Y;
                                //txt.Height = height / 2; //<==change to your default height
                                //                         //txt.Rotation = ang;
                                //txt.Width = width / 2;
                                //txt.TextHeight = 0.3;
                                //txt.TextStyleId = mtStyleid;
                                //txt.Attachment = AttachmentPoint.MiddleCenter;
                                //txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                //btr.AppendEntity(txt);
                                //tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("roadwidening")]
        public void roadwidening()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_FloorInSection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_FloorInSection")
            {
                Commands.tmpmarkstring = "Road Widening";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("sectiondemolished")]
        public void sectiondemolished()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_FloorInSection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_FloorInSection")
            {
                Commands.tmpmarkstring = "Floor in Section to be demolished";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("acroomfloor")]
        public void acroomfloor()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_FloorInSection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_FloorInSection")
            {
                Commands.tmpmarkstring = "AC Room Floor";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("defaultfloorsection")]
        public void defaultfloorsection()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_FloorInSection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_FloorInSection")
            {
                Commands.tmpmarkstring = "Floor in Section";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("acduct")]
        public void acduct()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SectionalItem");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SectionalItem")
            {
                Commands.tmpmarkstring = "AC Duct";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("beam")]
        public void beam()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_SectionalItem");
            if ((string)Application.GetSystemVariable("clayer") == "_SectionalItem")
            {
                Commands.tmpmarkstring = "Beam";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("slab")]
        public void slab()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SectionalItem");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SectionalItem")
            {
                Commands.tmpmarkstring = "Slab";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("sunkslab")]
        public void sunkslab()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SectionalItem");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SectionalItem")
            {
                Commands.tmpmarkstring = "Sunk Slab";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("escalator")]
        public void escalator()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Escalator";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("openstaircase")]
        public void openstaircase()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Open StairCase";
                int i = 0; foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("fireescStair")]
        public void fireescStair()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Fire Escape StairCase";
                int i = 0; foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("spiralstair")]
        public void spiralstair()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Spiral/Fabricated StairCase";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("threestair")]
        public void threestair()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Three Flight StairCase";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("fourstair")]
        public void fourstair()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Four Flight StairCase";
                int i = 0;
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    foreach (SelectedObject obj in resultSet)
                    {
                        Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                PickPointDescriptor ppd = ppsd.PickPoint;
                                Point3d pickPoint = ppd.PointOnLine;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextStyleId = mtStyleid;
                                txt.TextHeight = 0.3;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                    }
                    i++;
                    tr.Commit();
                }
            }
        }
        [CommandMethod("interlanding")]
        public void interlanding()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Intermediate Landing";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            var PLineCls = RXObject.GetClass(typeof(Polyline));
                            var LineCls= RXObject.GetClass(typeof(Line));
                            Entity subent = tr.GetObject(obj.ObjectId, OpenMode.ForRead) as Entity;
                            if(obj.ObjectId.ObjectClass== PLineCls)
                            {
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Polyline;
                                if (poly != null)
                                {
                                    try
                                    {
                                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                        ObjectId mtStyleid = db.Textstyle;
                                        if (ts.Has("Romans"))
                                        {
                                            mtStyleid = ts["Romans"];
                                        }
                                        PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                        PickPointDescriptor ppd = ppsd.PickPoint;
                                        Point3d pickPoint = ppd.PointOnLine;
                                        Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                        double param = 0;
                                        param = poly.GetParameterAtPoint(oPoint);
                                        double sparam = 0, eparam = 0;
                                        sparam = (int)param;
                                        eparam = sparam + 1;
                                        Point3d sp = poly.GetPointAtParameter(sparam);
                                        Point3d ep = poly.GetPointAtParameter(eparam);
                                        double ang = Angle(sp, ep);
                                        Extents3d ext = poly.GeometricExtents;
                                        Point3d min = ext.MinPoint;
                                        Point3d max = ext.MaxPoint;
                                        Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                        BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                        poly.Color = Getcolor("161");
                                        poly.UpgradeOpen();
                                        MText txt = new MText();
                                        txt.Contents = Commands.tmpmarkstring;
                                        txt.SetDatabaseDefaults(db);
                                        Point3d ptleft = Getleft(poly);
                                        Point3d ptright = Getright(poly);
                                        Point3d pttop = Gettop(poly);
                                        Point3d ptbottom = Getbottom(poly);
                                        double width = ptright.X - ptleft.X;
                                        double height = pttop.Y - ptbottom.Y;
                                        txt.Height = height / 2; //<==change to your default height
                                                                 //txt.Rotation = ang;
                                        txt.Width = width / 2;
                                        txt.TextStyleId = mtStyleid;
                                        txt.TextHeight = 0.3;
                                        txt.Attachment = AttachmentPoint.MiddleCenter;
                                        txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                        btr.AppendEntity(txt);
                                        tr.AddNewlyCreatedDBObject(txt, true);
                                    }
                                    catch
                                    {
                                        throw;
                                    }
                                }
                            }
                                
                            if(obj.ObjectId.ObjectClass == LineCls)
                            {
                                Line poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Line;
                                if (poly != null)
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }                                    
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    poly.Color = Getcolor("161");
                                    poly.UpgradeOpen();
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    double width = Math.Abs(poly.StartPoint.X - poly.EndPoint.X);
                                    double height = Math.Abs(poly.StartPoint.Y - poly.EndPoint.Y);
                                    double left, top;
                                    if (poly.StartPoint.X < poly.EndPoint.X)
                                        left = poly.StartPoint.X;
                                    else
                                        left = poly.EndPoint.X;
                                    if (poly.StartPoint.Y > poly.EndPoint.Y)
                                        top = poly.StartPoint.Y;
                                    else
                                        top = poly.EndPoint.Y;
                                    Point3d ptbegin = new Point3d(left, top, 0);
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptbegin.X + width / 2, ptbegin.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                            }
                            
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("flightwidth")]
        public void flightwidth()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Flight Width";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            var PLineCls = RXObject.GetClass(typeof(Polyline));
                            var LineCls = RXObject.GetClass(typeof(Line));
                            Entity subent = tr.GetObject(obj.ObjectId, OpenMode.ForRead) as Entity;
                            if (obj.ObjectId.ObjectClass == PLineCls)
                            {
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Polyline;
                                if (poly != null)
                                {
                                    try
                                    {
                                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                        ObjectId mtStyleid = db.Textstyle;
                                        if (ts.Has("Romans"))
                                        {
                                            mtStyleid = ts["Romans"];
                                        }
                                        PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                        PickPointDescriptor ppd = ppsd.PickPoint;
                                        Point3d pickPoint = ppd.PointOnLine;
                                        Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                        double param = 0;
                                        param = poly.GetParameterAtPoint(oPoint);
                                        double sparam = 0, eparam = 0;
                                        sparam = (int)param;
                                        eparam = sparam + 1;
                                        Point3d sp = poly.GetPointAtParameter(sparam);
                                        Point3d ep = poly.GetPointAtParameter(eparam);
                                        double ang = Angle(sp, ep);
                                        Extents3d ext = poly.GeometricExtents;
                                        Point3d min = ext.MinPoint;
                                        Point3d max = ext.MaxPoint;
                                        Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                        BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                        poly.Color = Getcolor("161");
                                        poly.UpgradeOpen();
                                        MText txt = new MText();
                                        txt.Contents = Commands.tmpmarkstring;
                                        txt.SetDatabaseDefaults(db);
                                        Point3d ptleft = Getleft(poly);
                                        Point3d ptright = Getright(poly);
                                        Point3d pttop = Gettop(poly);
                                        Point3d ptbottom = Getbottom(poly);
                                        double width = ptright.X - ptleft.X;
                                        double height = pttop.Y - ptbottom.Y;
                                        txt.Height = height / 2; //<==change to your default height
                                                                 //txt.Rotation = ang;
                                        txt.Width = width / 2;
                                        txt.TextStyleId = mtStyleid;
                                        txt.TextHeight = 0.3;
                                        txt.Attachment = AttachmentPoint.MiddleCenter;
                                        txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                        btr.AppendEntity(txt);
                                        tr.AddNewlyCreatedDBObject(txt, true);
                                    }
                                    catch
                                    {
                                        throw;
                                    }
                                }
                            }

                            if (obj.ObjectId.ObjectClass == LineCls)
                            {
                                Line poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Line;
                                if (poly != null)
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    poly.Color = Getcolor("161");
                                    poly.UpgradeOpen();
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    double width = Math.Abs(poly.StartPoint.X - poly.EndPoint.X);
                                    double height = Math.Abs(poly.StartPoint.Y - poly.EndPoint.Y);
                                    double left, top;
                                    if (poly.StartPoint.X < poly.EndPoint.X)
                                        left = poly.StartPoint.X;
                                    else
                                        left = poly.EndPoint.X;
                                    if (poly.StartPoint.Y > poly.EndPoint.Y)
                                        top = poly.StartPoint.Y;
                                    else
                                        top = poly.EndPoint.Y;
                                    Point3d ptbegin = new Point3d(left, top, 0);
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptbegin.X + width / 2, ptbegin.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                            }

                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("floorlanding")]
        public void floorlanding()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_StairCase");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_StairCase" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Floor Landing";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            var PLineCls = RXObject.GetClass(typeof(Polyline));
                            var LineCls = RXObject.GetClass(typeof(Line));
                            Entity subent = tr.GetObject(obj.ObjectId, OpenMode.ForRead) as Entity;
                            if (obj.ObjectId.ObjectClass == PLineCls)
                            {
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Polyline;
                                if (poly != null)
                                {
                                    try
                                    {
                                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                        ObjectId mtStyleid = db.Textstyle;
                                        if (ts.Has("Romans"))
                                        {
                                            mtStyleid = ts["Romans"];
                                        }
                                        PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                        PickPointDescriptor ppd = ppsd.PickPoint;
                                        Point3d pickPoint = ppd.PointOnLine;
                                        Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                        double param = 0;
                                        param = poly.GetParameterAtPoint(oPoint);
                                        double sparam = 0, eparam = 0;
                                        sparam = (int)param;
                                        eparam = sparam + 1;
                                        Point3d sp = poly.GetPointAtParameter(sparam);
                                        Point3d ep = poly.GetPointAtParameter(eparam);
                                        double ang = Angle(sp, ep);
                                        Extents3d ext = poly.GeometricExtents;
                                        Point3d min = ext.MinPoint;
                                        Point3d max = ext.MaxPoint;
                                        Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                        BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                        poly.Color = Getcolor("161");
                                        poly.UpgradeOpen();
                                        MText txt = new MText();
                                        txt.Contents = Commands.tmpmarkstring;
                                        txt.SetDatabaseDefaults(db);
                                        Point3d ptleft = Getleft(poly);
                                        Point3d ptright = Getright(poly);
                                        Point3d pttop = Gettop(poly);
                                        Point3d ptbottom = Getbottom(poly);
                                        double width = ptright.X - ptleft.X;
                                        double height = pttop.Y - ptbottom.Y;
                                        txt.Height = height / 2; //<==change to your default height
                                                                 //txt.Rotation = ang;
                                        txt.Width = width / 2;
                                        txt.TextStyleId = mtStyleid;
                                        txt.TextHeight = 0.3;
                                        txt.Attachment = AttachmentPoint.MiddleCenter;
                                        txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                        btr.AppendEntity(txt);
                                        tr.AddNewlyCreatedDBObject(txt, true);
                                    }
                                    catch
                                    {
                                        throw;
                                    }
                                }
                            }

                            if (obj.ObjectId.ObjectClass == LineCls)
                            {
                                Line poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Line;
                                if (poly != null)
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    poly.Color = Getcolor("161");
                                    poly.UpgradeOpen();
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    double width = Math.Abs(poly.StartPoint.X - poly.EndPoint.X);
                                    double height = Math.Abs(poly.StartPoint.Y - poly.EndPoint.Y);
                                    double left, top;
                                    if (poly.StartPoint.X < poly.EndPoint.X)
                                        left = poly.StartPoint.X;
                                    else
                                        left = poly.EndPoint.X;
                                    if (poly.StartPoint.Y > poly.EndPoint.Y)
                                        top = poly.StartPoint.Y;
                                    else
                                        top = poly.EndPoint.Y;
                                    Point3d ptbegin = new Point3d(left, top, 0);
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptbegin.X + width / 2, ptbegin.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("machineroom")]
        public void machineroom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Lift");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Lift" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Lift Machine Room";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("firelift")]
        public void firelift()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Lift");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Lift" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Fire Escape Lift";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            var PLineCls = RXObject.GetClass(typeof(Polyline));
                            var LineCls = RXObject.GetClass(typeof(Line));
                            Entity subent = tr.GetObject(obj.ObjectId, OpenMode.ForRead) as Entity;
                            if (obj.ObjectId.ObjectClass == PLineCls)
                            {
                                Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Polyline;
                                if (poly != null)
                                {
                                    try
                                    {
                                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                        ObjectId mtStyleid = db.Textstyle;
                                        if (ts.Has("Romans"))
                                        {
                                            mtStyleid = ts["Romans"];
                                        }
                                        PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                        PickPointDescriptor ppd = ppsd.PickPoint;
                                        Point3d pickPoint = ppd.PointOnLine;
                                        Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                        double param = 0;
                                        param = poly.GetParameterAtPoint(oPoint);
                                        double sparam = 0, eparam = 0;
                                        sparam = (int)param;
                                        eparam = sparam + 1;
                                        Point3d sp = poly.GetPointAtParameter(sparam);
                                        Point3d ep = poly.GetPointAtParameter(eparam);
                                        double ang = Angle(sp, ep);
                                        Extents3d ext = poly.GeometricExtents;
                                        Point3d min = ext.MinPoint;
                                        Point3d max = ext.MaxPoint;
                                        Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                        BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                        poly.Color = Getcolor("161");
                                        poly.UpgradeOpen();
                                        MText txt = new MText();
                                        txt.Contents = Commands.tmpmarkstring;
                                        txt.SetDatabaseDefaults(db);
                                        Point3d ptleft = Getleft(poly);
                                        Point3d ptright = Getright(poly);
                                        Point3d pttop = Gettop(poly);
                                        Point3d ptbottom = Getbottom(poly);
                                        double width = ptright.X - ptleft.X;
                                        double height = pttop.Y - ptbottom.Y;
                                        txt.Height = height / 2; //<==change to your default height
                                                                 //txt.Rotation = ang;
                                        txt.Width = width / 2;
                                        txt.TextStyleId = mtStyleid;
                                        txt.TextHeight = 0.3;
                                        txt.Attachment = AttachmentPoint.MiddleCenter;
                                        txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                        btr.AppendEntity(txt);
                                        tr.AddNewlyCreatedDBObject(txt, true);
                                    }
                                    catch
                                    {
                                        throw;
                                    }
                                }
                            }

                            if (obj.ObjectId.ObjectClass == LineCls)
                            {
                                Line poly = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Line;
                                if (poly != null)
                                {
                                    try
                                    {
                                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                        ObjectId mtStyleid = db.Textstyle;
                                        if (ts.Has("Romans"))
                                        {
                                            mtStyleid = ts["Romans"];
                                        }
                                        BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                        poly.Color = Getcolor("161");
                                        poly.UpgradeOpen();
                                        MText txt = new MText();
                                        txt.Contents = Commands.tmpmarkstring;
                                        txt.SetDatabaseDefaults(db);
                                        double width = Math.Abs(poly.StartPoint.X - poly.EndPoint.X);
                                        double height = Math.Abs(poly.StartPoint.Y - poly.EndPoint.Y);
                                        double left, top;
                                        if (poly.StartPoint.X < poly.EndPoint.X)
                                            left = poly.StartPoint.X;
                                        else
                                            left = poly.EndPoint.X;
                                        if (poly.StartPoint.Y > poly.EndPoint.Y)
                                            top = poly.StartPoint.Y;
                                        else
                                            top = poly.EndPoint.Y;
                                        Point3d ptbegin = new Point3d(left, top, 0);
                                        txt.Height = height / 2; //<==change to your default height
                                                                 //txt.Rotation = ang;
                                        txt.Width = width / 2;
                                        txt.TextStyleId = mtStyleid;
                                        txt.TextHeight = 0.3;
                                        txt.Attachment = AttachmentPoint.MiddleCenter;
                                        txt.Location = new Point3d(ptbegin.X + width / 2, ptbegin.Y - height / 2, 0);
                                        btr.AppendEntity(txt);
                                        tr.AddNewlyCreatedDBObject(txt, true);
                                    }
                                    catch
                                    {
                                        throw;
                                    }
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("hydrauliclift")]
        public void hydrauliclift()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Lift");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Lift" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Hydraulic Lift";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("carlift")]
        public void carlift()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Lift");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Lift" && resultSet.Count != 0)
            {
                Commands.tmpmarkstring = "Car Lift";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("openpassage")]
        public void openpassage()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Passage");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Passage"&& resultSet.Count!=0)
            {
                Commands.tmpmarkstring = "Open Passage";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("eduinstitution")]
        public void eduinstitution()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Educational/Institutional";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("publicutility")]
        public void publicutility()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Public Utility";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("transcommu")]
        public void transcommu()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Transportation and Communication";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("medical")]
        public void medical()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Medical";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("unclassified")]
        public void unclassified()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Unclassified";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("assembly")]
        public void assembly()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Assembly";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("mixed")]
        public void mixed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Mixed";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("offbusiness")]
        public void offbusiness()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Office/Business";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("storage")]
        public void storage()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Storage";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("hazardous")]
        public void hazardous()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Hazardous";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("nanotech")]
        public void nanotech()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "NanoTechnology Building";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("biotech")]
        public void biotech()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "BioTechnology Building";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("inftech")]
        public void inftech()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Information Technology Building";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("wholesale")]
        public void wholesale()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Wholesale establishment";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("floriculture")]
        public void floriculture()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "FloriCulture Land-use";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("hotel")]
        public void hotel()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Hotel";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("constructed")]
        public void constructed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine" || (string)Application.GetSystemVariable("clayer") == "_ExistingStructure")
            {
                Commands.tmpmarkstring = "Existing constructed as per rules";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("approved")]
        public void approved()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "Existing approved but not constructed";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("existingbua")]
        public void existingbua()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "ExistingBUA outLine";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("tobedemo")]
        public void tobedemo()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SpecialUseBUAOutLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SpecialUseBUAOutLine")
            {
                Commands.tmpmarkstring = "To be Demolished";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("splittedtene")]
        public void splittedtene()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_CarpetArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_CarpetArea")
            {
                Commands.tmpmarkstring = "splitted Tenement";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("enclosedbal")]
        public void enclosedbal()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Balcony");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Balcony")
            {
                Commands.tmpmarkstring = "Enclosed Balcony";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("servicebal")]
        public void serviceba()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Balcony");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_Balcony")
            {
                Commands.tmpmarkstring = "Service Balcony";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("nalabufarea")]
        public void nalabufarea()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_BufferZone");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_BufferZone")
            {
                Commands.tmpmarkstring = "Nala Buffer Area";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("wbufarea")]
        public void wbufarea()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_BufferZone");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_BufferZone")
            {
                Commands.tmpmarkstring = "WaterBodies Buffer Area";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("obufarea")]
        public void obufarea()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_BufferZone");
            var resultSet = PromptForPolylineSSet("Select the Polylines to name Room");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            if ((string)Application.GetSystemVariable("clayer") == "_BufferZone")
            {
                Commands.tmpmarkstring = "ORR Buffer Area";
                int i = 0;
                foreach (SelectedObject obj in resultSet)
                {
                    if (obj != null)
                    {
                        using (Transaction tr = db.TransactionManager.StartTransaction())
                        {
                            Polyline poly = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Polyline;
                            if (poly != null)
                            {
                                try
                                {
                                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                    ObjectId mtStyleid = db.Textstyle;
                                    if (ts.Has("Romans"))
                                    {
                                        mtStyleid = ts["Romans"];
                                    }
                                    PickPointSelectedObject ppsd = obj as PickPointSelectedObject;
                                    PickPointDescriptor ppd = ppsd.PickPoint;
                                    Point3d pickPoint = ppd.PointOnLine;
                                    Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                    double param = 0;
                                    param = poly.GetParameterAtPoint(oPoint);
                                    double sparam = 0, eparam = 0;
                                    sparam = (int)param;
                                    eparam = sparam + 1;
                                    Point3d sp = poly.GetPointAtParameter(sparam);
                                    Point3d ep = poly.GetPointAtParameter(eparam);
                                    double ang = Angle(sp, ep);
                                    Extents3d ext = poly.GeometricExtents;
                                    Point3d min = ext.MinPoint;
                                    Point3d max = ext.MaxPoint;
                                    Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                    MText txt = new MText();
                                    txt.Contents = Commands.tmpmarkstring;
                                    txt.SetDatabaseDefaults(db);
                                    Point3d ptleft = Getleft(poly);
                                    Point3d ptright = Getright(poly);
                                    Point3d pttop = Gettop(poly);
                                    Point3d ptbottom = Getbottom(poly);
                                    double width = ptright.X - ptleft.X;
                                    double height = pttop.Y - ptbottom.Y;
                                    txt.Height = height / 2; //<==change to your default height
                                                             //txt.Rotation = ang;
                                    txt.Width = width / 2;
                                    txt.TextStyleId = mtStyleid;
                                    txt.TextHeight = 0.3;
                                    txt.Attachment = AttachmentPoint.MiddleCenter;
                                    txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                    btr.AppendEntity(txt);
                                    tr.AddNewlyCreatedDBObject(txt, true);
                                }
                                catch
                                {
                                    throw;
                                }
                            }
                            i++;
                            tr.Commit();
                        }
                    }
                }
            }
        }

        [CommandMethod("cornice")]                  //Projections   
        public void cornice()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Cornice";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("chajja")]
        public void chajja()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Chhajja";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("weathershed")]
        public void weathershed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Weather shed";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("canopy")]
        public void canopy()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Canopy";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("porch")]
        public void porch()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Porch";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("loft")]
        public void loft()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Loft";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("steps")]
        public void steps()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Steps";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("otta")]
        public void otta()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "OTTA";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("verandah")]
        public void verandah()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Open Verandah";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("glassfacade")]
        public void glassfacade()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ArchProjection");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ArchProjection")
            {
                Commands.tmpmarkstring = "Glass Facade";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("wideningfreecost")]
        public void wideningfreecost()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_RoadWidening");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_RoadWidening")
            {
                Commands.tmpmarkstring = "Surrendered Free of Cost";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("periphery")]
        public void periphery()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_RoadWidening");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_RoadWidening")
            {
                Commands.tmpmarkstring = "Periphery";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("nalafreecost")]
        public void nalafreecost()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_NalaRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_NalaRoad")
            {
                Commands.tmpmarkstring = "Surrendered Free of Cost";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("sturucturedemolished")]
        public void sturucturedemolished()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ExistingStructure");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ExistingStructure")
            {
                Commands.tmpmarkstring = "To be Demolished";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                txt.Height = HeightRectPolyline(min, max) / 3.0; //<==change to your default height
                                txt.Rotation = ang;
                                txt.Width = WidthRectPolyline(min, max) / 2.0;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.TextHeight = HeightRectPolyline(min, max) / 20.0;
                                txt.Attachment = AttachmentPoint.TopCenter;
                                txt.Location = new Point3d(min.X + WidthRectPolyline(min, max) / 2, min.Y + HeightRectPolyline(min, max) * 2 / 3, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("retained")]
        public void retained()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ExistingStructure");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ExistingStructure")
            {
                Commands.tmpmarkstring = "To be retained";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("appnotconstructed")]
        public void appnotconstructed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ExistingStructure");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ExistingStructure")
            {
                Commands.tmpmarkstring = "Existing approved but not onstructed:";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("notconstructed")]
        public void notconstructed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ExistingStructure");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ExistingStructure")
            {
                Commands.tmpmarkstring = "Existing not constructed as per the Rule";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("notconstructed1")]
        public void notconstructed1()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ExistingStructure");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ExistingStructure")
            {
                Commands.tmpmarkstring = "Existing not constructed as per the Rule:";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("chemicalplant")]
        public void chemicalplant()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Open Chemical Plant";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("solarlightening")]
        public void solarlightening()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Solar Lightening system";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("rainwater")]
        public void rainwater()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Rain Water Harvesting";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("solarheating")]
        public void solarheating()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Solar Water Heating System";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("distributiontrans")]
        public void distributiontrans()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Distribution transformer";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("securityguard")]
        public void securityguard()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Security Guard Booth";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("garage")]
        public void garage()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Garage";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("explossivestorage")]
        public void explossivestorage()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Explossive Storage";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("pumproom")]
        public void pumproom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Pump House/Moter Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("electrictrans")]
        public void electrictrans()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Electric Transformer";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("waterrecycle")]
        public void waterrecycle()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Waste water recyling";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("acplantroom")]
        public void acplantroom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "AC Plant Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("gategroomty")]
        public void gategroomty()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Gate Groomty";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("septictank")]
        public void septictank()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Septic Tank";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("toiletblock")]
        public void toiletblock()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Toilet/Sanitary Block";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("bore")]
        public void bore()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Bore";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("sump")]
        public void sump()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Sump";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height/2; //<==change to your default height
                            //txt.Rotation = ang;
                            txt.Width = width/2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("boilerroom")]
        public void boilerroom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Boiler Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;s
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("servantquarter")]
        public void servantquarter()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Servant Quarter";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("well")]
        public void well()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Well";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("parkingsheds")]
        public void parkingsheds()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Parking Sheds";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("garbagepit")]
        public void garbagepit()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Circle: ");
            options.SetRejectMessage("\nSelected object is not a Circle.");
            options.AddAllowedClass(typeof(Circle), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Garbage Pit";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Circle poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Circle;
                        if (poly != null&&poly.Layer== "_AccessoryUse")
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = new Point3d(poly.Center.X - poly.Radius,poly.Center.Y,0);
                            Point3d ptright = new Point3d(poly.Center.X + poly.Radius, poly.Center.Y, 0);
                            Point3d pttop = new Point3d(poly.Center.X, poly.Center.Y+poly.Radius, 0);
                            Point3d ptbottom = new Point3d(poly.Center.X, poly.Center.Y-poly.Radius, 0);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Height = height/2; //<==change to your default height
                            //txt.Rotation = ang;
                            txt.Width = width/2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("undergroundwantertank")]
        public void undergroundwantertank()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Underground water Tank";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("sewagetreatment")]
        public void sewagetreatment()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Sewage Treatment Plant";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("overheadwatertank")]
        public void overheadwatertank()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Overhead water Tank";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("swimmingpool")]
        public void swimmingpool()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Swimming pool";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("fitnesscenter")]
        public void fitnesscenter()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Fitness Center";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("percolationwell")]
        public void percolationwell()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Percolation well or Percolation Pit";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ahu")]
        public void ahu()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "AHU";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("garbage")]
        public void garbage()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Garbage Bin";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("meterroom")]
        public void meterroom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Meter Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("drypit")]
        public void drypit()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Dry Pit";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("effuentrtreat")]
        public void effuentrtreat()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Effluent Treatment Plant";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("enterancegate")]
        public void enterancegate()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Entrance Gate";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("extgate")]
        public void exitgate()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Exit Gate";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("societyoffice")]
        public void societyoffice()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Society Office";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("clubhouse")]
        public void clubhouse()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Club House";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("weighbridge")]
        public void weighbridge()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Weigh Bridge";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("wetpit")]
        public void wetpit()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Wet Pit";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("helipad")]
        public void helipad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Helipad";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("dgsetroom")]
        public void dgsetroom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "D G Set Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("laundry")]
        public void laundry()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Laundry";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("utility")]
        public void utility()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Utility";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("lobby")]
        public void lobby()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Lobby";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("firecontrol")]
        public void firecontrol()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Fire Control Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("watchman")]
        public void watchman()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Watchman Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("firecommand")]
        public void firecommand()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Fire Command Centre";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("storagetank")]
        public void storagetank()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Storage Tank";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("generatorroom")]
        public void generatorroom()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_AccessoryUse");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_AccessoryUse")
            {
                Commands.tmpmarkstring = "Generator Room";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("htensionLine")]
        public void htensionLine()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ElectricLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ElectricLine")
            {
                Commands.tmpmarkstring = "High Tension Electricity Lines";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                Plugin.eLinestate = 1;
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("eltowerLine")]
        public void eltowerLine()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ElectricLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ElectricLine")
            {
                Commands.tmpmarkstring = "Electricity Tower Lines";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                                Plugin.eLinestate = 2;
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ltensionLine")]
        public void ltensionLine()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ElectricLine");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_ElectricLine")
            {
                Commands.tmpmarkstring = "Low Tension Electricity Lines";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                                Plugin.eLinestate = 3;
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("waterbodycanal")]
        public void waterbodycanal()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_WaterBodies");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_WaterBodies")
            {
                Commands.tmpmarkstring = "Defined Boundary of Canal, Vagu, Nala, Storm Water Drain of width up to 10m";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("waterbodyabove")]
        public void waterbodyabove()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_WaterBodies");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_WaterBodies")
            {
                Commands.tmpmarkstring = "FTL Boundary of Lakes/Tanks/Kuntas of area 10Ha and above";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("waterbodyless")]
        public void waterbodyless()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_WaterBodies");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_WaterBodies")
            {
                Commands.tmpmarkstring = "FTL Boundary of Lakes/Tanks/Kuntas of area less thatn 10Ha/shikam lands";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("waterbodymore")]
        public void waterbodymore()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_WaterBodies");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_WaterBodies")
            {
                Commands.tmpmarkstring = "Defined Boundary of Canal, Vagu, Nala, Storm Water Drain of width more than 10m";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("waterbodyriver")]
        public void waterbodyriver()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_WaterBodies");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_WaterBodies")
            {
                Commands.tmpmarkstring = "River";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("contour")]
        public void contour()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Contours";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("locationplan")]
        public void locationplan()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Location Plan";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailsection")]
        public void detailsection()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Section";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailmaster")]
        public void detailmaster()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Extract of Master Plan";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailkey")]
        public void detailkey()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Key Plan";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailcertificate")]
        public void detailcertificate()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Certificate";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailelivation2")]
        public void detailelivation2()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Elevation_2";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailtitle")]
        public void detailtitle()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Project Title";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailstructal")]
        public void detailstructal()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Structural Detail";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("detailelevation1")]
        public void detailelevation1()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = "Elevation_1";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("detailwdinf")]
        public void detailWDINF()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_PrintAdditionalDetail");
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptposition = pPtRes.Value;
            if ((string)Application.GetSystemVariable("clayer") == "_PrintAdditionalDetail")
            {
                Commands.tmpmarkstring = MakingWind_DoorList();
                if (pPtRes.Status == PromptStatus.OK)
                {
                    try
                    {
                        MakeWind_DoorText(Commands.tmpmarkstring, ptposition);
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("from")]
        public void From()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_TransferOfSetback");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_TransferOfSetback")
            {
                Commands.tmpmarkstring = "Transfer FROM";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Color = Getcolor("blue");
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("to")]
        public void To()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_TransferOfSetback");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_TransferOfSetback")
            {
                Commands.tmpmarkstring = "Transfer TO";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Color = Getcolor("green");
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("front")]
        public void front()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_TransferOfSetback");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_TransferOfSetback")
            {
                Commands.tmpmarkstring = "Front";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Color = Getcolor("red");
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("rear")]
        public void Rear()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_TransferOfSetback");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_TransferOfSetback")
            {
                Commands.tmpmarkstring = "Rear";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Color = Getcolor("magenta");
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("side1")]
        public void Side1()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_TransferOfSetback");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_TransferOfSetback")
            {
                Commands.tmpmarkstring = "Side1";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Color = Getcolor("blue");
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("side2")]
        public void Side2()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_TransferOfSetback");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_TransferOfSetback")
            {
                Commands.tmpmarkstring = "Side2";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Color = Getcolor("green");
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("lsection")]
        public void lsection()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Section");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Section")
            {
                Commands.tmpmarkstring = "Section";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Section";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lintroad")]
        public void lintroad()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_InternalRoad");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_InternalRoad")
            {
                Commands.tmpmarkstring = "Internal Road";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_InternalRoad";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lrefuge")]
        public void lrefuge()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_RefugeArea");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_RefugeArea")
            {
                Commands.tmpmarkstring = "Refuge Area";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_RefugeArea";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lsplay")]
        public void lsplay()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Splay");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Splay")
            {
                Commands.tmpmarkstring = "Splay";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Splay";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("ldrvway")]
        public void ldrvway()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Driveway");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Driveway")
            {
                Commands.tmpmarkstring = "Drive Way";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Driveway";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lbufzone")]
        public void lbufzone()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_BufferZone");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_BufferZone")
            {
                Commands.tmpmarkstring = "BufferZone";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_BufferZone";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lslabcut")]
        public void lslabcut()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_SlabCutoutVoid");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_SlabCutoutVoid")
            {
                Commands.tmpmarkstring = "Slab Cutout Void";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_SlabCutoutVoid";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lventilshaft")]
        public void lventilshaft()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_VentilationShaft");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_VentilationShaft")
            {
                Commands.tmpmarkstring = "Ventilation Shaft";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_VentilationShaft";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lplot")]
        public void lplot()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Plot");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Plot")
            {
                Commands.tmpmarkstring = "Plot";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Plot";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("lnetplot")]
        public void lnetplot()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_NetPlot");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_NetPlot")
            {
                Commands.tmpmarkstring = "NetPlot";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_NetPlot";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("LightHazard")]
        public void LightHazard()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireTower");
            if ((string)Application.GetSystemVariable("clayer") == "_FireTower")
            {
                Commands.tmpmarkstring = "Light Hazard Class";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireTower";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("ModerateHazard")]
        public void ModerateHazard()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireTower");
            if ((string)Application.GetSystemVariable("clayer") == "_FireTower")
            {
                Commands.tmpmarkstring = "Moderate Hazard Class";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireTower";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("pendenttype")]
        public void pendenttype()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("PendentType_Sprinkler"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Sprinkler");
            if ((string)Application.GetSystemVariable("clayer") == "_Sprinkler")
            {
                Commands.tmpmarkstring = "PT";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "PendentType_Sprinkler" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        //Application.ShowAlertDialog("DirectionRef_PreVal" + "_Floor" + System.DateTime.Now.Minute.ToString()
                        //    + System.DateTime.Now.Second.ToString() + refcircount.ToString());
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = PendentMaker(ptCenter, ptcount);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);

                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("UprightType")]
        public void UprightType()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("UpRight_Sprinkler"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Sprinkler");
            if ((string)Application.GetSystemVariable("clayer") == "_Sprinkler")
            {
                Commands.tmpmarkstring = "UP";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "UpRight_Sprinkler" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = UprightMaker(ptCenter,ptcount);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);

                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("SideWallType")]
        public void SideWallType()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("SideWall_Sprinkler"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Sprinkler");
            if ((string)Application.GetSystemVariable("clayer") == "_Sprinkler")
            {
                Commands.tmpmarkstring = "SW";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "SideWall_Sprinkler" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = SideWallMaker(ptCenter,ptcount);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);

                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("Concealed")]
        public void Concealed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Block: ");
            options.SetRejectMessage("\nSelected object is no a Block.");
            options.AddAllowedClass(typeof(BlockReference), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Sprinkler");
            Commands.tmpmarkstring = "Concealed";
            if ((string)Application.GetSystemVariable("clayer") == "_Sprinkler")
            {
                int ptcount = 0;
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                    var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                    foreach (ObjectId id in modelSpace)
                    {
                        if (id.ObjectClass.DxfName == "INSERT")
                        {
                            var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                            ed.WriteMessage("\n" + blockReference.Name);
                            if (blockReference.Name.Contains("SideWall_Sprinkler"))
                            {
                                ptcount++;
                            }
                        }
                    }
                    tr.Commit();
                }
                ptcount++;
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Entity poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Entity;
                        if (poly != null && poly.Layer == "_Sprinkler")
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;

                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;

                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                txt.Layer = "_Sprinkler";
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = pickPoint;
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }

        }
        [CommandMethod("ftower")]
        public void ftower()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireTower");
            if ((string)Application.GetSystemVariable("clayer") == "_FireTower")
            {
                Commands.tmpmarkstring = "Fire Tower";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireTower";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("fcc")]
        public void FireCommandCen()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Command Center");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Command Center")
            {
                Commands.tmpmarkstring = "Fire Command Center";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Command Center";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("watercurtainpumphouse")]
        public void watercurtainpumphouse()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_WaterCurtain");
            if ((string)Application.GetSystemVariable("clayer") == "_WaterCurtain")
            {
                Commands.tmpmarkstring = "Water Curtain Pump";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_WaterCurtain";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("watercurtainpump")]
        public void watercurtainpump()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_WaterCurtain");
            if ((string)Application.GetSystemVariable("clayer") == "_WaterCurtain")
            {
                Commands.tmpmarkstring = "Water Curtain Pump House";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_WaterCurtain";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("2hrfire")]
        public void twohrfire()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireWall");
            if ((string)Application.GetSystemVariable("clayer") == "_FireWall")
            {
                Commands.tmpmarkstring = "2 Hr fire rated";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireWall";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("3hrfire")]
        public void threehrfire()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireWall");
            if ((string)Application.GetSystemVariable("clayer") == "_FireWall")
            {
                Commands.tmpmarkstring = "3 Hr fire rated";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireWall";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("4hrfire")]
        public void fourhrfire()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireWall");
            if ((string)Application.GetSystemVariable("clayer") == "_FireWall")
            {
                Commands.tmpmarkstring = "4 Hr fire rated";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireWall";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }
        [CommandMethod("physicalBarrier")]
        public void physicalBarrier()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireWall");
            if ((string)Application.GetSystemVariable("clayer") == "_FireWall")
            {
                Commands.tmpmarkstring = "2HR Physical Barrier For 15000 sq.Mts";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireWall";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ElectricalPumps")]
        public void ElectricalPumps()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Electrical Pumps(1620,2280,2850 LPM)";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("DieselPumps")]
        public void DieselPumps()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Diesel Pumps(1620,2280, LPM)";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("JockyPumps")]
        public void JockyPumps()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Jockery Pump in Pumps(180 LPM)";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }
        [CommandMethod("boosterpump")]
        public void boosterpump()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Booster Pump in Pumps(450,900,1350 LPM)";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("watercepump")]
        public void watercepump()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Water Curtain Electrical Pumps(1620,2280,2850 LPM)";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("PumpHouse")]
        public void PumpHouse()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Pump House";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("DryRiserInlet")]
        public void DryRiserInlet()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Dry Riser Inlet";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("DryRiserOutlet")]
        public void DryRiserOutlet()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Dry Riser Outlet";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installationn";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("FireOHT")]
        public void FireOHT()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Fire OHT   -----    L X W X H Option";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("DomesticOHT")]
        public void DomesticOHT()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Domestic OHT   -----    L X W X H Option";
            if (result.Status == PromptStatus.OK)
            {
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                            txt.Layer = "_Fire Fighting Installation";
                            txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("firesump")]
        public void firesump()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Fire Sump   -----    L X W X H Option";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("Domesticsump")]
        public void Domesticsump()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Domestic Sump   -----    L X W X H Option";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }
        

        [CommandMethod("TravelDistance")]
        public void TravelDistance()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Travel Distance");
            if ((string)Application.GetSystemVariable("clayer") == "_Travel Distance")
            {
                Commands.tmpmarkstring = "Travel Distance";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Entity poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Entity;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            txt.Layer = "_Travel Distance";
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = pickPoint;
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("DeadandCorridor")]
        public void DeadendCorridor()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Travel Distance");
            if ((string)Application.GetSystemVariable("clayer") == "_Travel Distance")
            {
                Commands.tmpmarkstring = "Dead End Corridor";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Entity poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Entity;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);                            
                            txt.Layer = "_Travel Distance";
                                
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = pickPoint;
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("ManuallyFireAlarm")]
        public void ManuallyFireAlarm()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_RefugeArea");
            if ((string)Application.GetSystemVariable("clayer") == "_RefugeArea")
            {
                Commands.tmpmarkstring = "Manually Fire Alarm";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_RefugeArea";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("AutomaticFireAlarm")]
        public void AutomaticFireAlarm()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_RefugeArea");
            if ((string)Application.GetSystemVariable("clayer") == "_RefugeArea")
            {
                Commands.tmpmarkstring = "Automatic Fire Alarm";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_RefugeArea";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }
        [CommandMethod("45ton")]
        public void fortyfiveton()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Driveway");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Driveway")
            {
                Commands.tmpmarkstring = "Fire Driveway is with 45 tons Load Bearing Capacity";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Driveway";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("65ton")]
        public void sixtyfiveton()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Driveway");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Driveway")
            {
                Commands.tmpmarkstring = "Fire Driveway is with 65 tons Load Bearing Capacity";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Driveway";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("hydval")]
        public void hydval()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("HYDVALVE_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Hydrant Valve";
                //Commands.tmpmarkstring = "";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "HYDVALVE_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Circle acCirc1 = new Circle();
                        acCirc1.SetDatabaseDefaults();
                        acCirc1.Center = ptCenter;
                        acCirc1.Radius = 0.065;
                        ents.Add(acCirc1);
                        Circle acCirc2 = new Circle();
                        acCirc2.SetDatabaseDefaults();
                        acCirc2.Center = ptCenter;
                        acCirc2.Radius = 0.115;
                        ents.Add(acCirc2);
                        Line ln1 = new Line(new Point3d(ptCenter.X, ptCenter.Y + 0.065,0),new Point3d(ptCenter.X,ptCenter.Y-0.065,0));
                        Line ln2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.115, 0), new Point3d(ptCenter.X, ptCenter.Y - 0.235, 0));
                        Line ln3 = new Line(new Point3d(ptCenter.X, ptCenter.Y + 0.115, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.205, 0));
                        Line ln4 = new Line(new Point3d(ptCenter.X-0.115, ptCenter.Y + 0.21, 0), new Point3d(ptCenter.X+0.115, ptCenter.Y +0.21, 0));
                        Line ln5 = new Line(new Point3d(ptCenter.X-0.07, ptCenter.Y + 0.09, 0), new Point3d(ptCenter.X-0.07, ptCenter.Y +0.21, 0));
                        Line ln6 = new Line(new Point3d(ptCenter.X + 0.07, ptCenter.Y + 0.09, 0), new Point3d(ptCenter.X + 0.07, ptCenter.Y + 0.21, 0));
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        ents.Add(ln5);
                        ents.Add(ln6);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.2;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }            
        }
        [CommandMethod("buttervalve")]
        public void buttervalve()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("BUTVALVE_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                //Commands.tmpmarkstring = "Hydrant Valve(Wet Riser)";
                Commands.tmpmarkstring = "";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "BUTVALVE_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Circle acCirc1 = new Circle();
                        acCirc1.SetDatabaseDefaults();
                        acCirc1.Center = ptCenter;
                        acCirc1.Radius = 0.03;
                        ents.Add(acCirc1);
                        ObjectIdCollection ids = new ObjectIdCollection();
                        Entity ent1 = acCirc1 as Entity;
                        ids.Add(acBlkTblRec.AppendEntity(ent1));
                        tr.AddNewlyCreatedDBObject(ent1, true);

                        Point2d pt1 = new Point2d(ptCenter.X - 0.013, ptCenter.Y + 0.02);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.12, ptCenter.Y + 0.08);
                        Point2d pt3 = new Point2d(ptCenter.X - 0.12, ptCenter.Y - 0.07);
                        //Point2d pt4 = new Point2d(ptCenter.X - 0.11, ptCenter.Y - 0.07);
                        //Point2d pt5 = new Point2d(ptCenter.X - 0.11, ptCenter.Y + 0.06);
                        //Point2d pt6 = new Point2d(ptCenter.X - 0.028, ptCenter.Y + 0.005);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.ConstantWidth = 0.02;
                        ents.Add(pl1);
                        //pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        //pl1.AddVertexAt(4, pt5, 0, 0, 0);
                        //pl1.AddVertexAt(5, pt6, 0, 0, 0);
                        //pl1.Closed = true;
                        //ents.Add(pl1);
                        ////ObjectIdCollection ids1 = new ObjectIdCollection();
                        //Entity ent2 = pl1 as Entity;
                        //ent2.ColorIndex = 1;
                        //ent2.Transparency = new Transparency(127);
                        //acBlkTblRec.AppendEntity(ent2);
                        //tr.AddNewlyCreatedDBObject(ent2, true);
                        Point2d pt7 = new Point2d(ptCenter.X + 0.013, ptCenter.Y - 0.02);
                        Point2d pt8 = new Point2d(ptCenter.X + 0.12, ptCenter.Y - 0.08);
                        Point2d pt9 = new Point2d(ptCenter.X + 0.12, ptCenter.Y + 0.07);
                        
                        //Point2d pt10 = new Point2d(ptCenter.X + 0.11, ptCenter.Y + 0.07);
                        //Point2d pt11 = new Point2d(ptCenter.X + 0.11, ptCenter.Y - 0.06);
                        //Point2d pt12 = new Point2d(ptCenter.X + 0.028, ptCenter.Y - 0.005);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, pt7, 0, 0, 0);
                        pl2.AddVertexAt(1, pt8, 0, 0, 0);
                        pl2.AddVertexAt(2, pt9, 0, 0, 0);
                        pl2.ConstantWidth = 0.02;
                        ents.Add(pl2);
                        //pl2.AddVertexAt(3, pt10, 0, 0, 0);
                        //pl2.AddVertexAt(4, pt11, 0, 0, 0);
                        //pl2.AddVertexAt(5, pt12, 0, 0, 0);
                        //pl2.Closed = true;
                        //ents.Add(pl2);
                        //Entity ent3 = pl2 as Entity;
                        //ent3.ColorIndex = 1;
                        //ent3.Transparency = new Transparency(127);
                        //acBlkTblRec.AppendEntity(ent3);
                        //tr.AddNewlyCreatedDBObject(ent3, true);

                        Hatch hat = new Hatch();
                        hat.SetHatchPattern(HatchPatternType.PreDefined, "SOLID");
                        ObjectId hatId = acBlkTblRec.AppendEntity(hat);
                        tr.AddNewlyCreatedDBObject(hat, true);
                        hat.Associative = true;
                        hat.AppendLoop(HatchLoopTypes.Default, ids);
                        hat.EvaluateHatch(true);
                        Line ln1 = new Line(new Point3d(ptCenter.X - 0.12, ptCenter.Y, 0), new Point3d(ptCenter.X - 0.18, ptCenter.Y, 0));
                        Line ln2 = new Line(new Point3d(ptCenter.X + 0.12, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.18, ptCenter.Y, 0));
                        ents.Add(ln1);
                        ents.Add(ln2);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.2;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            if(!ent.GetType().Equals(typeof(Circle)))
                            {
                                acBlkTblRec.AppendEntity(ent);
                                tr.AddNewlyCreatedDBObject(ent, true);
                            }
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("flowswitch")]
        public void flowswitch()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("FLOWSWITCH_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FS";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "FLOWSWITCH_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        
                        Point2d pt1 = new Point2d(ptCenter.X - 0.15, ptCenter.Y + 0.07);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.15, ptCenter.Y - 0.07);
                        Point2d pt3 = new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.07);
                        Point2d pt4 = new Point2d(ptCenter.X + 0.15, ptCenter.Y + 0.07);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        pl1.Closed = true;
                        pl1.LinetypeScale = 10;
                        pl1.ConstantWidth = 0.02;
                        
                        
                        ents.Add(pl1);
                        Line ln1 = new Line(new Point3d(pt1.X, pt1.Y, 0), new Point3d(pt3.X , pt3.Y, 0));
                        Line ln2 = new Line(new Point3d(pt2.X, pt2.Y, 0), new Point3d(pt4.X, pt4.Y, 0));
                        ents.Add(ln1);
                        ents.Add(ln2);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.1;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.2;
                        txt.Height = 0.1;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("ballvalve")]
        public void ballvalve()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("BALLVALVE_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                //Commands.tmpmarkstring = "Hydrant Valve(Wet Riser)";
                Commands.tmpmarkstring = "BV";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "BALLVALVE_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point2d pt1 = new Point2d(ptCenter.X - 0.005, ptCenter.Y + 0.1);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.005, ptCenter.Y);
                        Point2d pt3 = new Point2d(ptCenter.X +0.005, ptCenter.Y);
                        Point2d pt4 = new Point2d(ptCenter.X +0.005, ptCenter.Y +0.1);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Point2d pt7 = new Point2d(ptCenter.X - 0.08, ptCenter.Y + 0.11);
                        Point2d pt8 = new Point2d(ptCenter.X -0.08, ptCenter.Y + 0.1);
                        Point2d pt9 = new Point2d(ptCenter.X +0.08, ptCenter.Y + 0.1);
                        Point2d pt10 = new Point2d(ptCenter.X + 0.08, ptCenter.Y + 0.11);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, pt7, 0, 0, 0);
                        pl2.AddVertexAt(1, pt8, 0, 0, 0);
                        pl2.AddVertexAt(2, pt9, 0, 0, 0);
                        pl2.AddVertexAt(3, pt10, 0, 0, 0);
                        pl2.Closed = true;
                        ents.Add(pl2);
                        Point2d pt13 = new Point2d(ptCenter.X - 0.005, ptCenter.Y + 0.115);
                        Point2d pt14 = new Point2d(ptCenter.X - 0.005, ptCenter.Y + 0.11);
                        Point2d pt15 = new Point2d(ptCenter.X + 0.005, ptCenter.Y + 0.11);
                        Point2d pt16 = new Point2d(ptCenter.X + 0.005, ptCenter.Y + 0.115);
                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, pt13, 0, 0, 0);
                        pl3.AddVertexAt(1, pt14, 0, 0, 0);
                        pl3.AddVertexAt(2, pt15, 0, 0, 0);
                        pl3.AddVertexAt(3, pt16, 0, 0, 0);
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Point2d pt17 = new Point2d(ptCenter.X - 0.09, ptCenter.Y);
                        Point2d pt18 = new Point2d(ptCenter.X - 0.09, ptCenter.Y -0.16);
                        Point2d pt19 = new Point2d(ptCenter.X - 0.12, ptCenter.Y -0.16);
                        Point2d pt20 = new Point2d(ptCenter.X - 0.12, ptCenter.Y);
                        Polyline pl4 = new Polyline();
                        pl4.AddVertexAt(0, pt17, 0, 0, 0);
                        pl4.AddVertexAt(1, pt18, 0, 0, 0);
                        pl4.AddVertexAt(2, pt19, 0, 0, 0);
                        pl4.AddVertexAt(3, pt20, 0, 0, 0);
                        pl4.Closed = true;
                        ents.Add(pl4);
                        Point2d pt21 = new Point2d(ptCenter.X + 0.09, ptCenter.Y);
                        Point2d pt22 = new Point2d(ptCenter.X + 0.09, ptCenter.Y - 0.16);
                        Point2d pt23 = new Point2d(ptCenter.X + 0.12, ptCenter.Y - 0.16);
                        Point2d pt24 = new Point2d(ptCenter.X + 0.12, ptCenter.Y);
                        Polyline pl5 = new Polyline();
                        pl5.AddVertexAt(0, pt21, 0, 0, 0);
                        pl5.AddVertexAt(1, pt22, 0, 0, 0);
                        pl5.AddVertexAt(2, pt23, 0, 0, 0);
                        pl5.AddVertexAt(3, pt24, 0, 0, 0);
                        pl5.Closed = true;
                        ents.Add(pl5);
                        Line ln1 = new Line(new Point3d(ptCenter.X, ptCenter.Y, 0), new Point3d(ptCenter.X, ptCenter.Y-0.17, 0));
                        Line ln2 = new Line(new Point3d(ptCenter.X - 0.105, ptCenter.Y, 0), new Point3d(ptCenter.X - 0.105, ptCenter.Y - 0.16, 0));
                        Line ln3 = new Line(new Point3d(ptCenter.X + 0.105, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.105, ptCenter.Y - 0.16, 0));
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        Line ln4 = new Line(new Point3d(ptCenter.X - 0.08, ptCenter.Y - 0.02, 0), new Point3d(ptCenter.X - 0.09, ptCenter.Y - 0.02, 0));
                        Line ln5 = new Line(new Point3d(ptCenter.X - 0.08, ptCenter.Y - 0.14, 0), new Point3d(ptCenter.X - 0.09, ptCenter.Y - 0.14, 0));
                        Line ln6 = new Line(new Point3d(ptCenter.X + 0.08, ptCenter.Y - 0.02, 0), new Point3d(ptCenter.X + 0.09, ptCenter.Y - 0.02, 0));
                        Line ln7 = new Line(new Point3d(ptCenter.X + 0.08, ptCenter.Y - 0.14, 0), new Point3d(ptCenter.X + 0.09, ptCenter.Y - 0.14, 0));
                        ents.Add(ln4);
                        ents.Add(ln5);
                        ents.Add(ln6);
                        ents.Add(ln7);
                        Arc arc1 = new Arc(new Point3d(ptCenter.X + 0.02, ptCenter.Y - 0.09, 0), 0.0922, 49.37 * Math.PI / 180,102.58*Math.PI/180 );
                        ents.Add(arc1);
                        Arc arc2 = new Arc(new Point3d(ptCenter.X - 0.02, ptCenter.Y - 0.09, 0), 0.0922, 77.4 * Math.PI / 180, 130.67 * Math.PI / 180);
                        ents.Add(arc2);
                        Arc arc3 = new Arc(new Point3d(ptCenter.X - 0.02, ptCenter.Y - 0.07, 0), 0.0922, 229.17 * Math.PI / 180, 282.48 * Math.PI / 180);
                        ents.Add(arc3);
                        Arc arc4 = new Arc(new Point3d(ptCenter.X + 0.02, ptCenter.Y - 0.07, 0), 0.0922, 257.68 * Math.PI / 180, 311.09 * Math.PI / 180);
                        ents.Add(arc4);
                        //Line ln8 = new Line(new Point3d(ptCenter.X - 0.08, ptCenter.Y - 0.02, 0), ptCenter);
                        //Line ln9 = new Line(new Point3d(ptCenter.X - 0.08, ptCenter.Y - 0.14, 0), new Point3d(ptCenter.X, ptCenter.Y - 0.16, 0));
                        //Line ln10 = new Line(new Point3d(ptCenter.X + 0.08, ptCenter.Y - 0.02, 0), ptCenter);
                        //Line ln11 = new Line(new Point3d(ptCenter.X + 0.08, ptCenter.Y - 0.14, 0), new Point3d(ptCenter.X, ptCenter.Y - 0.16, 0));
                        //ents.Add(ln8);
                        //ents.Add(ln9);
                        //ents.Add(ln10);
                        //ents.Add(ln11);

                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X,ptCenter.Y-0.08,0);

                        txt.Width = 0.2;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("electronetbs")]
        public void electronetbs()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("ETBS_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FFT";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "ETBS_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();

                        Point2d pt1 = new Point2d(ptCenter.X - 0.15, ptCenter.Y + 0.07);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.15, ptCenter.Y - 0.07);
                        Point2d pt3 = new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.07);
                        Point2d pt4 = new Point2d(ptCenter.X + 0.15, ptCenter.Y + 0.07);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        pl1.Closed = true;
                        pl1.LinetypeScale = 10;
                        pl1.ConstantWidth = 0.02;
                        ents.Add(pl1);
                        
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.1;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.2;
                        txt.Height = 0.1;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("exitsign")]
        public void exitsign()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("ESIGN_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FIRE EXIT";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "ESIGN_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();

                        Point2d pt1 = new Point2d(ptCenter.X - 0.52, ptCenter.Y + 0.26);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.52, ptCenter.Y - 0.26);
                        Point2d pt3 = new Point2d(ptCenter.X + 0.52, ptCenter.Y - 0.26);
                        Point2d pt4 = new Point2d(ptCenter.X + 0.52, ptCenter.Y + 0.26);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Point2d pt5 = new Point2d(ptCenter.X - 0.5, ptCenter.Y + 0.24);
                        Point2d pt6 = new Point2d(ptCenter.X - 0.5, ptCenter.Y - 0.24);
                        Point2d pt7 = new Point2d(ptCenter.X + 0.5, ptCenter.Y - 0.24);
                        Point2d pt8 = new Point2d(ptCenter.X + 0.5, ptCenter.Y + 0.24);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, pt5, 0, 0, 0);
                        pl2.AddVertexAt(1, pt6, 0, 0, 0);
                        pl2.AddVertexAt(2, pt7, 0, 0, 0);
                        pl2.AddVertexAt(3, pt8, 0, 0, 0);
                        pl2.Closed = true;
                        ents.Add(pl2);
                        Line ln1 = new Line(new Point3d(ptCenter.X - 0.24, ptCenter.Y - 0.04, 0), new Point3d(ptCenter.X + 0.24, ptCenter.Y - 0.04, 0));
                        Line ln2 = new Line(new Point3d(ptCenter.X - 0.24, ptCenter.Y - 0.05, 0), new Point3d(ptCenter.X + 0.24, ptCenter.Y - 0.05, 0));
                        Line ln3 = new Line(new Point3d(ptCenter.X - 0.24, ptCenter.Y - 0.13, 0), new Point3d(ptCenter.X + 0.24, ptCenter.Y - 0.13, 0));
                        Line ln4 = new Line(new Point3d(ptCenter.X - 0.24, ptCenter.Y - 0.14, 0), new Point3d(ptCenter.X + 0.24, ptCenter.Y - 0.14, 0));
                        Line ln5 = new Line(new Point3d(ptCenter.X + 0.21, ptCenter.Y + 0.02, 0), new Point3d(ptCenter.X + 0.35, ptCenter.Y - 0.09, 0));
                        Line ln6 = new Line(new Point3d(ptCenter.X + 0.22, ptCenter.Y + 0.02, 0), new Point3d(ptCenter.X + 0.36, ptCenter.Y - 0.09, 0));
                        Line ln7 = new Line(new Point3d(ptCenter.X + 0.21, ptCenter.Y - 0.19, 0), new Point3d(ptCenter.X + 0.35, ptCenter.Y - 0.09, 0));
                        Line ln8 = new Line(new Point3d(ptCenter.X + 0.22, ptCenter.Y - 0.19, 0), new Point3d(ptCenter.X + 0.36, ptCenter.Y - 0.09, 0));
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        ents.Add(ln5);
                        ents.Add(ln6);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.1;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X,ptCenter.Y+0.12,0);

                        txt.Width = 0.9;
                        txt.Height = 0.1;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("downcorner")]
        public void downcorner()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Down Corner";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("hosedrum")]
        public void hosedrum()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("HDRUM_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "SD_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Line ln1 = new Line(new Point3d(ptCenter.X - 0.055, ptCenter.Y + 0.005, 0), new Point3d(ptCenter.X + 0.055, ptCenter.Y + 0.005,0));
                        Line ln2 = new Line(new Point3d(ptCenter.X - 0.055, ptCenter.Y - 0.005, 0), new Point3d(ptCenter.X + 0.055, ptCenter.Y - 0.005, 0));
                        Line ln3 = new Line(new Point3d(ptCenter.X - 0.055, ptCenter.Y + 0.18, 0), new Point3d(ptCenter.X - 0.055, ptCenter.Y -0.18, 0));
                        Line ln4 = new Line(new Point3d(ptCenter.X + 0.055, ptCenter.Y + 0.18, 0), new Point3d(ptCenter.X + 0.055, ptCenter.Y -0.18, 0));
                        //Line ln5 = new Line(new Point3d(ptCenter.X - 0.055, ptCenter.Y + 0.17, 0), new Point3d(ptCenter.X + 0.055, ptCenter.Y + 0.17, 0));
                        //Line ln6 = new Line(new Point3d(ptCenter.X - 0.055, ptCenter.Y - 0.17, 0), new Point3d(ptCenter.X + 0.055, ptCenter.Y - 0.17, 0));
                        Line ln7 = new Line(new Point3d(ptCenter.X - 0.065, ptCenter.Y + 0.18, 0), new Point3d(ptCenter.X - 0.065, ptCenter.Y - 0.18, 0));
                        Line ln8 = new Line(new Point3d(ptCenter.X + 0.065, ptCenter.Y + 0.18, 0), new Point3d(ptCenter.X + 0.065, ptCenter.Y - 0.18, 0));
                        Line ln9 = new Line(new Point3d(ptCenter.X - 0.075, ptCenter.Y + 0.035, 0), new Point3d(ptCenter.X - 0.065, ptCenter.Y + 0.045, 0));
                        Line ln10 = new Line(new Point3d(ptCenter.X - 0.075, ptCenter.Y - 0.035, 0), new Point3d(ptCenter.X - 0.065, ptCenter.Y - 0.045, 0));
                        Line ln11 = new Line(new Point3d(ptCenter.X - 0.075, ptCenter.Y - 0.035, 0), new Point3d(ptCenter.X - 0.075, ptCenter.Y + 0.035, 0));
                        Line ln12= new Line(new Point3d(ptCenter.X + 0.065, ptCenter.Y + 0.005, 0), new Point3d(ptCenter.X + 0.094, ptCenter.Y + 0.005, 0));
                        Line ln13 = new Line(new Point3d(ptCenter.X + 0.065, ptCenter.Y - 0.005, 0), new Point3d(ptCenter.X + 0.094, ptCenter.Y - 0.005, 0));
                        CircularArc3d arc1Pnt = new CircularArc3d(new Point3d(ptCenter.X -0.055,ptCenter.Y+0.18,0), 
                            new Point3d(ptCenter.X - 0.06, ptCenter.Y + 0.185, 0), new Point3d(ptCenter.X - 0.065, ptCenter.Y + 0.18, 0));
                        CircularArc3d arc2Pnt = new CircularArc3d(new Point3d(ptCenter.X - 0.055, ptCenter.Y - 0.18, 0),
                            new Point3d(ptCenter.X - 0.06, ptCenter.Y - 0.185, 0), new Point3d(ptCenter.X - 0.065, ptCenter.Y - 0.18, 0));
                        CircularArc3d arc3Pnt = new CircularArc3d(new Point3d(ptCenter.X + 0.055, ptCenter.Y + 0.18, 0),
                            new Point3d(ptCenter.X + 0.06, ptCenter.Y + 0.185, 0), new Point3d(ptCenter.X + 0.065, ptCenter.Y + 0.18, 0));
                        CircularArc3d arc4Pnt = new CircularArc3d(new Point3d(ptCenter.X + 0.055, ptCenter.Y - 0.18, 0),
                            new Point3d(ptCenter.X + 0.06, ptCenter.Y - 0.185, 0), new Point3d(ptCenter.X + 0.065, ptCenter.Y - 0.18, 0));
                        Arc arc1 = (Arc)Curve.CreateFromGeCurve(arc1Pnt);
                        Arc arc2 = (Arc)Curve.CreateFromGeCurve(arc2Pnt);
                        Arc arc3 = (Arc)Curve.CreateFromGeCurve(arc3Pnt);
                        Arc arc4 = (Arc)Curve.CreateFromGeCurve(arc4Pnt);
                        Circle cir1 = new Circle();
                        cir1.Radius = 0.007;
                        cir1.Center = new Point3d(ptCenter.X + 0.103, ptCenter.Y, 0);
                        cir1.SetDatabaseDefaults();
                        Circle cir2 = new Circle();
                        cir2.Radius = 0.01;
                        cir2.Center = new Point3d(ptCenter.X + 0.103, ptCenter.Y, 0);
                        cir2.SetDatabaseDefaults();

                        Line ln14 = new Line(new Point3d(ptCenter.X + 0.113, 
                            ptCenter.Y + 0.0025, 0), new Point3d(ptCenter.X + 0.162, ptCenter.Y + 0.0025, 0));
                        Line ln15 = new Line(new Point3d(ptCenter.X + 0.113,
                            ptCenter.Y - 0.0025, 0), new Point3d(ptCenter.X + 0.162, ptCenter.Y - 0.0025, 0));
                        Point3d pt1 = new Point3d(ptCenter.X + 0.162, ptCenter.Y + 0.1,0);
                        Point3d pt2 = new Point3d(ptCenter.X + 0.162, ptCenter.Y - 0.1, 0);
                        Point3d pt4 = new Point3d(ptCenter.X + 0.192, ptCenter.Y + 0.1, 0);
                        Point3d pt3 = new Point3d(ptCenter.X + 0.192, ptCenter.Y - 0.1, 0);
                        Line ln24 = new Line(pt1, pt2);
                        Line ln25 = new Line(pt2, pt3);
                        Line ln26 = new Line(pt3, pt4);
                        Line ln27 = new Line(pt4, pt1);
                        Point3d pt5 = new Point3d(ptCenter.X + 0.167, ptCenter.Y + 0.095, 0);
                        Point3d pt6 = new Point3d(ptCenter.X + 0.167, ptCenter.Y - 0.095, 0);
                        Point3d pt8 = new Point3d(ptCenter.X + 0.187, ptCenter.Y + 0.095, 0);
                        Point3d pt7 = new Point3d(ptCenter.X + 0.187, ptCenter.Y - 0.095, 0);
                        Line ln20 = new Line(pt5, pt6);
                        Line ln21 = new Line(pt6, pt7);
                        Line ln22 = new Line(pt7, pt8);
                        Line ln23 = new Line(pt8, pt5);
                        ents.Add(ln20);
                        ents.Add(ln21);
                        ents.Add(ln22);
                        ents.Add(ln23);
                        ents.Add(ln24);
                        ents.Add(ln25);
                        ents.Add(ln26);
                        ents.Add(ln27);
                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, new Point2d(ptCenter.X - 0.055, ptCenter.Y + 0.18), 0, 0, 0);
                        pl3.AddVertexAt(1, new Point2d(ptCenter.X - 0.055, ptCenter.Y - 0.18), 0, 0, 0);
                        pl3.AddVertexAt(2, new Point2d(ptCenter.X + 0.055, ptCenter.Y - 0.18), 0, 0, 0);
                        pl3.AddVertexAt(3, new Point2d(ptCenter.X + 0.055, ptCenter.Y + 0.18), 0, 0, 0); pl3.Closed = true;
                        ents.Add(pl3);
                        ObjectIdCollection ids = new ObjectIdCollection();
                        Entity ent1 = pl3 as Entity;
                        ids.Add(acBlkTblRec.AppendEntity(ent1));
                        tr.AddNewlyCreatedDBObject(ent1, true);
                        Hatch hat = new Hatch { PatternScale = 16.0 };
                        hat.SetHatchPattern(HatchPatternType.PreDefined, "ANSI33");
                        ObjectId hatId = acBlkTblRec.AppendEntity(hat);
                        tr.AddNewlyCreatedDBObject(hat, true);
                        hat.Associative = true;
                        hat.AppendLoop(HatchLoopTypes.Default, ids);
                        hat.EvaluateHatch(true);

                        //var ids = new ObjectIdCollection();
                        //Entity ent1 = pl3 as Entity;
                        //ids.Add(acBlkTblRec.AppendEntity(ent1));
                        //tr.AddNewlyCreatedDBObject(ent1, true);
                        //var hatch = new Hatch { PatternScale = 6.0 };
                        //hatch.SetHatchPattern(HatchPatternType.PreDefined, "ANSI31");
                        //acBlkTblRec.AppendEntity(hatch);
                        //tr.AddNewlyCreatedDBObject(hatch, true);
                        //hatch.Associative = true;
                        //hatch.AppendLoop(HatchLoopTypes.Default, ids);
                        //hatch.EvaluateHatch(true);

                        //ents.Add(hatch);

                        Line ln16 = new Line(new Point3d(ptCenter.X + 0.11, ptCenter.Y + 0.0074, 0),
                            new Point3d(ptCenter.X + 0.162, ptCenter.Y + 00.06, 0));
                        Line ln17 = new Line(new Point3d(ptCenter.X + 0.111, ptCenter.Y + 0.006, 0),
                            new Point3d(ptCenter.X + 0.162, ptCenter.Y + 0.0565, 0));
                        Line ln18 = new Line(new Point3d(ptCenter.X + 0.11, ptCenter.Y - 0.0074, 0),
                            new Point3d(ptCenter.X + 0.162, ptCenter.Y - 00.06, 0));
                        Line ln19 = new Line(new Point3d(ptCenter.X + 0.111, ptCenter.Y - 0.006, 0),
                            new Point3d(ptCenter.X + 0.162, ptCenter.Y - 0.0565, 0));
                        ents.Add(cir1);
                        ents.Add(cir2);
                        ents.Add(arc1);
                        ents.Add(arc2);
                        ents.Add(arc3);
                        ents.Add(arc4);
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        ents.Add(ln9);
                        ents.Add(ln10);
                        ents.Add(ln11);
                        ents.Add(ln12);
                        ents.Add(ln13);
                        ents.Add(ln14);
                        ents.Add(ln15);
                        ents.Add(ln16);
                        ents.Add(ln17);
                        ents.Add(ln18);
                        ents.Add(ln19);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            if(!ent.GetType().Equals(typeof(Polyline)))
                            {
                                acBlkTblRec.AppendEntity(ent);
                                tr.AddNewlyCreatedDBObject(ent, true);
                            }
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }

        }

        [CommandMethod("yardhyd")]
        public void yardhyd()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Yard Hydrant(External)";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("mcphooter")]
        public void mcphooter()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("MCP_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "HOOTER";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "MCP_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Line Line1 = new Line(new Point3d(ptCenter.X - 0.23, ptCenter.Y + 0.56, 0), new Point3d(ptCenter.X + 0.23, ptCenter.Y + 0.56, 0));
                        Line Line2 = new Line(new Point3d(ptCenter.X + 0.23, ptCenter.Y + 0.56, 0), new Point3d(ptCenter.X + 0.23, ptCenter.Y - 0.56, 0));
                        Line Line3 = new Line(new Point3d(ptCenter.X + 0.23, ptCenter.Y - 0.56, 0), new Point3d(ptCenter.X - 0.23, ptCenter.Y - 0.56, 0));
                        Line Line4 = new Line(new Point3d(ptCenter.X - 0.23, ptCenter.Y - 0.56, 0), new Point3d(ptCenter.X - 0.23, ptCenter.Y + 0.56, 0));
                        Line Line5 = new Line(new Point3d(ptCenter.X + 0.23, ptCenter.Y + 0.28, 0), new Point3d(ptCenter.X + 0.58, ptCenter.Y + 0.53, 0));
                        Line Line6 = new Line(new Point3d(ptCenter.X + 0.23, ptCenter.Y + 0.28, 0), new Point3d(ptCenter.X + 0.58, ptCenter.Y + 0.12, 0));
                        Line Line7 = new Line(new Point3d(ptCenter.X + 0.58, ptCenter.Y + 0.53, 0), new Point3d(ptCenter.X + 0.58, ptCenter.Y + 0.12, 0));
                        Line Linecenter = new Line(new Point3d(ptCenter.X - 0.23, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.23, ptCenter.Y,0));
                        Circle acCirc = new Circle();
                        acCirc.SetDatabaseDefaults();
                        acCirc.Center = new Point3d(ptCenter.X,ptCenter.Y-0.28,0);
                        acCirc.Radius = 0.07;
                        ents.Add(acCirc);
                        ObjectIdCollection ids = new ObjectIdCollection();
                        Entity ent1 = acCirc as Entity;
                        ent1.ColorIndex = 1;
                        ent1.Transparency = new Transparency(127);
                        ids.Add(acBlkTblRec.AppendEntity(ent1));
                        tr.AddNewlyCreatedDBObject(ent1, true);
                        Hatch hat = new Hatch();             
                        hat.SetHatchPattern(HatchPatternType.PreDefined, "SOLID");
                        hat.ColorIndex = 1;
                        hat.Transparency = new Transparency(127);
                        ObjectId hatId = acBlkTblRec.AppendEntity(hat);

                        tr.AddNewlyCreatedDBObject(hat, true);
                        hat.Associative = true;
                        hat.AppendLoop(HatchLoopTypes.Default, ids);
                        hat.EvaluateHatch(true);

                        ents.Add(Line1);
                        ents.Add(Line2);
                        ents.Add(Line3);
                        ents.Add(Line4);
                        ents.Add(Line5);
                        ents.Add(Line6);
                        ents.Add(Line7);
                        ents.Add(Linecenter);
                        
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("Arial"))
                        {
                            mtStyleid = ts["Arial"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X,ptCenter.Y+0.28,0);
                        txt.Width = 0.2;
                        txt.Height = 0.2;
                        Matrix3d curUCSMatrix = doc.Editor.CurrentUserCoordinateSystem;
                        CoordinateSystem3d curUCS = curUCSMatrix.CoordinateSystem3d;
                        txt.TransformBy(Matrix3d.Rotation(Math.PI/2, curUCS.Zaxis,txt.Location));
                        ents.Add(txt);
                        MText txt1 = new MText();
                        txt1.Contents = "MCP";
                        txt1.SetDatabaseDefaults(db);
                        txt1.Layer = "_Fire Fighting Installation";
                        txt1.TextHeight = 0.1;
                        txt1.TextStyleId = mtStyleid;
                        txt1.Attachment = AttachmentPoint.MiddleCenter;
                        txt1.Location = new Point3d(ptCenter.X-0.12, ptCenter.Y - 0.28, 0);
                        txt1.Width = 0.2;
                        txt1.Height = 0.2;
                        Matrix3d curUCSMatrix1 = doc.Editor.CurrentUserCoordinateSystem;
                        CoordinateSystem3d curUCS1 = curUCSMatrix1.CoordinateSystem3d;
                        txt1.TransformBy(Matrix3d.Rotation(Math.PI / 2*3, curUCS1.Zaxis, txt1.Location));
                        ents.Add(txt1);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            if (!ent.GetType().Equals(typeof(Circle)))
                            {
                                acBlkTblRec.AppendEntity(ent);
                                tr.AddNewlyCreatedDBObject(ent, true);
                            }
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("smokedetector")]
        public void smokedetector()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("SD_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "SD";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "SD_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Circle acCirc = new Circle();
                        acCirc.SetDatabaseDefaults();
                        acCirc.Center = ptCenter;
                        acCirc.Radius = 0.25;
                        ents.Add(acCirc);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = acCirc.Radius / 2;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 1.5 * acCirc.Radius;
                        txt.Height = 1.5 * acCirc.Radius;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }            
        }        
        [CommandMethod("multidetect")]
        public void multidetect()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("MD_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "MD";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "MD_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Circle acCirc = new Circle();
                        acCirc.SetDatabaseDefaults();
                        acCirc.Center = ptCenter;
                        acCirc.Radius = 0.25;
                        ents.Add(acCirc);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = acCirc.Radius / 2;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 1.5 * acCirc.Radius;
                        txt.Height = 1.5 * acCirc.Radius;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("beamdetect")]
        public void beamdetect()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("BD_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "E";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "BD_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point2d pt1 = new Point2d(ptCenter.X - 0.39, ptCenter.Y - 0.09);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.39, ptCenter.Y + 0.41);
                        Point2d pt3 = new Point2d(ptCenter.X - 0.29, ptCenter.Y +0.41);
                        Point2d pt4 = new Point2d(ptCenter.X - 0.29, ptCenter.Y - 0.09);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        pl1.Closed = true;
                        pl1.LinetypeScale = 2;
                        pl1.ConstantWidth = 0.005;
                        ents.Add(pl1);
                        Point2d pt5 = new Point2d(ptCenter.X + 0.39, ptCenter.Y + 0.09);
                        Point2d pt6 = new Point2d(ptCenter.X + 0.39, ptCenter.Y - 0.41);
                        Point2d pt7 = new Point2d(ptCenter.X + 0.49, ptCenter.Y - 0.41);
                        Point2d pt8 = new Point2d(ptCenter.X + 0.49, ptCenter.Y + 0.09);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, pt5, 0, 0, 0);
                        pl2.AddVertexAt(1, pt6, 0, 0, 0);
                        pl2.AddVertexAt(2, pt7, 0, 0, 0);
                        pl2.AddVertexAt(3, pt8, 0, 0, 0);
                        pl2.Closed = true;
                        pl2.ConstantWidth = 0.007;
                        ents.Add(pl2);
                        Line ln1 = new Line(new Point3d(ptCenter.X - 0.29, ptCenter.Y - 0.07, 0), new Point3d(ptCenter.X + 0.05, ptCenter.Y +0.16, 0));
                        Line ln2 = new Line(new Point3d(ptCenter.X - 0.29, ptCenter.Y +0.39, 0), new Point3d(ptCenter.X + 0.05, ptCenter.Y + 0.16, 0));
                        Line ln3 = new Line(new Point3d(ptCenter.X + 0.39, ptCenter.Y + 0.07, 0), new Point3d(ptCenter.X - 0.05, ptCenter.Y - 0.16, 0));
                        Line ln4 = new Line(new Point3d(ptCenter.X + 0.39, ptCenter.Y - 0.39, 0), new Point3d(ptCenter.X - 0.05, ptCenter.Y - 0.16, 0));
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        Line ln5 = new Line(new Point3d(ptCenter.X +0.38, ptCenter.Y + 0.16, 0), new Point3d(ptCenter.X + 0.05, ptCenter.Y + 0.16, 0));
                        Line ln6 = new Line(new Point3d(ptCenter.X - 0.38, ptCenter.Y - 0.16, 0), new Point3d(ptCenter.X - 0.05, ptCenter.Y - 0.16, 0));
                        ents.Add(ln5);
                        ents.Add(ln6);
                        Line ln7 = new Line(new Point3d(ptCenter.X -0.29, ptCenter.Y - 0.23, 0), new Point3d(ptCenter.X - 0.15, ptCenter.Y - 0.16, 0));
                        Line ln8 = new Line(new Point3d(ptCenter.X - 0.29, ptCenter.Y - 0.09, 0), new Point3d(ptCenter.X - 0.15, ptCenter.Y - 0.16, 0));
                        ents.Add(ln7);
                        ents.Add(ln8);
                        Line ln9 = new Line(new Point3d(ptCenter.X + 0.05, ptCenter.Y + 0.23, 0), new Point3d(ptCenter.X + 0.19, ptCenter.Y + 0.16, 0));
                        Line ln10 = new Line(new Point3d(ptCenter.X + 0.05, ptCenter.Y +0.09, 0), new Point3d(ptCenter.X + 0.19, ptCenter.Y + 0.16, 0));
                        ents.Add(ln9);
                        ents.Add(ln10);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.1;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X - 0.2, ptCenter.Y + 0.15, 0);
                        Commands.tmpmarkstring = "R";
                        txt.Width = 0.1;
                        txt.Height = 0.1;
                        ents.Add(txt);
                        MText txt1 = new MText();
                        txt1.Contents = Commands.tmpmarkstring;
                        txt1.SetDatabaseDefaults(db);
                        txt1.Layer = "_Fire Fighting Installation";
                        txt1.TextHeight = 0.1;
                        txt1.TextStyleId = mtStyleid;
                        txt1.Attachment = AttachmentPoint.MiddleCenter;
                        txt1.Location = new Point3d(ptCenter.X + 0.34, ptCenter.Y - 0.16, 0);

                        txt1.Width = 0.1;
                        txt1.Height = 0.1;
                        ents.Add(txt1);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("HeatDetector")]
        public void HeatDetector()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("SD_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "HD";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "HD_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Circle acCirc = new Circle();
                        acCirc.SetDatabaseDefaults();
                        acCirc.Center = ptCenter;
                        acCirc.Radius = 0.25;
                        ents.Add(acCirc);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = acCirc.Radius / 2;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 1.5 * acCirc.Radius;
                        txt.Height = 1.5 * acCirc.Radius;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("emlight")]
        public void emlight()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("EL_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "EL";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "EL_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point2d ptcen = new Point2d(ptCenter.X, ptCenter.Y);
                        double radius = 0.14;
                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - radius, ptCenter.Y), 3 * radius, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X, ptCenter.Y - radius), 3 * radius, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X + radius, ptCenter.Y), 3 * radius, 0, 0);
                        pl.AddVertexAt(3, new Point2d(ptCenter.X, ptCenter.Y + radius), 3 * radius, 0, 0);
                        pl.ConstantWidth = 0.05;
                        pl.Closed = true;
                        ents.Add(pl);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = radius / 3;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 1.5 * radius;
                        txt.Height = 1.5 * radius;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("hydext")]
        public void hydext()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("HE_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "HYDRANT"+"\n"+ "EXTENSION ";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "HE_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point2d ptcen = new Point2d(ptCenter.X, ptCenter.Y);
                        double radius = 0.7;
                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - radius, ptCenter.Y), 1 * radius, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X-radius/Math.Sqrt(2), ptCenter.Y - radius / Math.Sqrt(2) ), 1 * radius, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X , ptCenter.Y-radius), 1 * radius, 0, 0);
                        pl.AddVertexAt(3, new Point2d(ptCenter.X + radius / Math.Sqrt(2), ptCenter.Y - radius / Math.Sqrt(2)), 1 * radius, 0, 0);
                        pl.AddVertexAt(4, new Point2d(ptCenter.X +radius, ptCenter.Y), 1 * radius, 0, 0);
                        pl.AddVertexAt(5, new Point2d(ptCenter.X + radius / Math.Sqrt(2), ptCenter.Y + radius / Math.Sqrt(2)), 1 * radius, 0, 0);
                        pl.AddVertexAt(6, new Point2d(ptCenter.X , ptCenter.Y +radius), 1 * radius, 0, 0);
                        pl.AddVertexAt(7, new Point2d(ptCenter.X - radius / Math.Sqrt(2), ptCenter.Y + radius / Math.Sqrt(2)), 1 * radius, 0, 0);
                        pl.ConstantWidth = 0.05;
                        pl.Closed = true;
                        ents.Add(pl);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, new Point2d(ptCenter.X - 0.375, ptCenter.Y + 0.375), 0, 0, 0);
                        pl1.AddVertexAt(1, new Point2d(ptCenter.X - 0.375, ptCenter.Y - 0.375), 0, 0, 0);
                        pl1.AddVertexAt(2, new Point2d(ptCenter.X + 0.375, ptCenter.Y - 0.375), 0, 0, 0);
                        pl1.AddVertexAt(3, new Point2d(ptCenter.X + 0.375, ptCenter.Y + 0.375), 0, 0, 0);
                        pl1.ConstantWidth = 0.01;
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, new Point2d(ptCenter.X - 0.12, ptCenter.Y + 0.405), 0, 0, 0);
                        pl2.AddVertexAt(1, new Point2d(ptCenter.X - 0.12, ptCenter.Y + 0.345), 0, 0, 0);
                        pl2.AddVertexAt(2, new Point2d(ptCenter.X + 0.12, ptCenter.Y + 0.345), 0, 0, 0);
                        pl2.AddVertexAt(3, new Point2d(ptCenter.X + 0.12, ptCenter.Y + 0.405), 0, 0, 0);
                        pl2.ConstantWidth = 0.0;
                        pl2.Closed = true;
                        ents.Add(pl2);
                        Line ln1 = new Line(new Point3d(ptCenter.X, ptCenter.Y + 0.405, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.345, 0));
                        ents.Add(ln1);

                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, new Point2d(ptCenter.X + 0.115, ptCenter.Y -0.025), 0, 0, 0);
                        pl3.AddVertexAt(1, new Point2d(ptCenter.X + 0.115, ptCenter.Y -0.335), 0, 0, 0);
                        pl3.AddVertexAt(2, new Point2d(ptCenter.X + 0.375, ptCenter.Y - 0.335), 0, 0, 0);
                        pl3.AddVertexAt(3, new Point2d(ptCenter.X + 0.375, ptCenter.Y - 0.025), 0, 0, 0);
                        pl3.ConstantWidth = 0.0;
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Line ln = new Line(new Point3d(ptCenter.X + 0.115, ptCenter.Y -0.18, 0), 
                            new Point3d(ptCenter.X+0.375, ptCenter.Y -0.18, 0));
                        ents.Add(ln);
                        Polyline pl4 = new Polyline();
                        pl4.AddVertexAt(0, new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.045), 0, 0, 0);
                        pl4.AddVertexAt(1, new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.15), 0, 0, 0);
                        pl4.AddVertexAt(2, new Point2d(ptCenter.X + 0.34, ptCenter.Y - 0.15), 0, 0, 0);
                        pl4.AddVertexAt(3, new Point2d(ptCenter.X + 0.34, ptCenter.Y - 0.045), 0, 0, 0);
                        pl4.ConstantWidth = 0.0;
                        pl4.Closed = true;
                        ents.Add(pl4);
                        Polyline pl5 = new Polyline();
                        pl5.AddVertexAt(0, new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.205), 0, 0, 0);
                        pl5.AddVertexAt(1, new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.315), 0, 0, 0);
                        pl5.AddVertexAt(2, new Point2d(ptCenter.X + 0.34, ptCenter.Y - 0.315), 0, 0, 0);
                        pl5.AddVertexAt(3, new Point2d(ptCenter.X + 0.34, ptCenter.Y - 0.205), 0, 0, 0);
                        pl5.ConstantWidth = 0.0;
                        pl5.Closed = true;
                        ents.Add(pl5);

                        Point3d ptcen1 = new Point3d(ptCenter.X +0.22, ptCenter.Y-0.09, 0);
                        Point3d ptcen2 = new Point3d(ptCenter.X + 0.22, ptCenter.Y-0.265, 0);
                        Circle cir11 = new Circle();
                        cir11.Radius = 0.01;
                        cir11.Center = ptcen1;
                        cir11.SetDatabaseDefaults();
                        ents.Add(cir11);
                        Circle cir12 = new Circle();
                        cir12.Radius = 0.012;
                        cir12.Center = ptcen1;
                        cir12.SetDatabaseDefaults();
                        ents.Add(cir12);
                        Circle cir13 = new Circle();
                        cir13.Radius = 0.014;
                        cir13.Center = ptcen1;
                        cir13.SetDatabaseDefaults();
                        ents.Add(cir13);
                        Circle cir14 = new Circle();
                        cir14.Radius = 0.016;
                        cir14.Center = ptcen1;
                        cir14.SetDatabaseDefaults();
                        ents.Add(cir14);
                        Circle cir15 = new Circle();
                        cir15.Radius = 0.018;
                        cir15.Center = ptcen1;
                        cir15.SetDatabaseDefaults();
                        ents.Add(cir15);
                        Circle cir16 = new Circle();
                        cir16.Radius = 0.02;
                        cir16.Center = ptcen1;
                        cir16.SetDatabaseDefaults();
                        ents.Add(cir16);
                        Circle cir17 = new Circle();
                        cir17.Radius = 0.022;
                        cir17.Center = ptcen1;
                        cir17.SetDatabaseDefaults();
                        ents.Add(cir17);
                        Circle cir18 = new Circle();
                        cir18.Radius = 0.024;
                        cir18.Center = ptcen1;
                        cir18.SetDatabaseDefaults();
                        ents.Add(cir18);
                        Circle cir19 = new Circle();
                        cir19.Radius = 0.026;
                        cir19.Center = ptcen1;
                        cir19.SetDatabaseDefaults();
                        ents.Add(cir19);
                        Circle cir110 = new Circle();
                        cir110.Radius = 0.028;
                        cir110.Center = ptcen1;
                        cir110.SetDatabaseDefaults();
                        ents.Add(cir110);
                        Circle cir111 = new Circle();
                        cir111.Radius = 0.03;
                        cir111.Center = ptcen1;
                        cir111.SetDatabaseDefaults();
                        ents.Add(cir111);
                        Circle cir112 = new Circle();
                        cir112.Radius = 0.032;
                        cir112.Center = ptcen1;
                        cir112.SetDatabaseDefaults();
                        ents.Add(cir112);
                        Circle cir113 = new Circle();
                        cir113.Radius = 0.034;
                        cir113.Center = ptcen1;
                        cir113.SetDatabaseDefaults();
                        ents.Add(cir113);
                        Circle cir114 = new Circle();
                        cir114.Radius = 0.036;
                        cir114.Center = ptcen1;
                        cir114.SetDatabaseDefaults();
                        ents.Add(cir114);
                        Circle cir115 = new Circle();
                        cir115.Radius = 0.038;
                        cir115.Center = ptcen1;
                        cir115.SetDatabaseDefaults();
                        ents.Add(cir115);
                        Circle cir116 = new Circle();
                        cir116.Radius = 0.04;
                        cir116.Center = ptcen1;
                        cir116.SetDatabaseDefaults();
                        ents.Add(cir116);

                        Circle cir21 = new Circle();
                        cir21.Radius = 0.01;
                        cir21.Center = ptcen2;
                        cir21.SetDatabaseDefaults();
                        ents.Add(cir21);
                        Circle cir22 = new Circle();
                        cir22.Radius = 0.012;
                        cir22.Center = ptcen2;
                        cir22.SetDatabaseDefaults();
                        ents.Add(cir22);
                        Circle cir23 = new Circle();
                        cir23.Radius = 0.014;
                        cir23.Center = ptcen2;
                        cir23.SetDatabaseDefaults();
                        ents.Add(cir23);
                        Circle cir24 = new Circle();
                        cir24.Radius = 0.016;
                        cir24.Center = ptcen2;
                        cir24.SetDatabaseDefaults();
                        ents.Add(cir24);
                        Circle cir25 = new Circle();
                        cir25.Radius = 0.018;
                        cir25.Center = ptcen2;
                        cir25.SetDatabaseDefaults();
                        ents.Add(cir25);
                        Circle cir26 = new Circle();
                        cir26.Radius = 0.02;
                        cir26.Center = ptcen2;
                        cir26.SetDatabaseDefaults();
                        ents.Add(cir26);
                        Circle cir27 = new Circle();
                        cir27.Radius = 0.022;
                        cir27.Center = ptcen2;
                        cir27.SetDatabaseDefaults();
                        ents.Add(cir27);
                        Circle cir28 = new Circle();
                        cir28.Radius = 0.024;
                        cir28.Center = ptcen2;
                        cir28.SetDatabaseDefaults();
                        ents.Add(cir28);
                        Circle cir29 = new Circle();
                        cir29.Radius = 0.026;
                        cir29.Center = ptcen2;
                        cir29.SetDatabaseDefaults();
                        ents.Add(cir29);
                        Circle cir210 = new Circle();
                        cir210.Radius = 0.028;
                        cir210.Center = ptcen2;
                        cir210.SetDatabaseDefaults();
                        ents.Add(cir210);
                        Circle cir211 = new Circle();
                        cir211.Radius = 0.03;
                        cir211.Center = ptcen2;
                        cir211.SetDatabaseDefaults();
                        ents.Add(cir211);
                        Circle cir212 = new Circle();
                        cir212.Radius = 0.032;
                        cir212.Center = ptcen2;
                        cir212.SetDatabaseDefaults();
                        ents.Add(cir212);
                        Circle cir213 = new Circle();
                        cir213.Radius = 0.034;
                        cir213.Center = ptcen2;
                        cir213.SetDatabaseDefaults();
                        ents.Add(cir213);
                        Circle cir214 = new Circle();
                        cir214.Radius = 0.036;
                        cir214.Center = ptcen2;
                        cir214.SetDatabaseDefaults();
                        ents.Add(cir214);
                        Circle cir215 = new Circle();
                        cir215.Radius = 0.038;
                        cir215.Center = ptcen2;
                        cir215.SetDatabaseDefaults();
                        ents.Add(cir215);
                        Circle cir216 = new Circle();
                        cir216.Radius = 0.04;
                        cir216.Center = ptcen2;
                        cir216.SetDatabaseDefaults();
                        ents.Add(cir216);
                        Point3d endPt = new Point3d(ptcen1.X + 0.0225, ptcen1.Y - 0.033, 0);
                        Point3d startPt = new Point3d(ptcen1.X + 0.0194, ptcen1.Y - 0.035, 0);
                        Point3d startPt1 = new Point3d(startPt.X + 0.005, startPt.Y - 0.005, 0);
                        Point3d endPt1 = new Point3d(endPt.X + 0.005, endPt.Y - 0.007, 0);
                        Line ln2 = new Line(startPt, startPt1);
                        Line ln3 = new Line(endPt, endPt1);
                        Line ln4 = new Line(startPt1, new Point3d(startPt1.X - 0.005, startPt1.Y, 0));
                        Line ln5 = new Line(endPt1, new Point3d(endPt1.X + 0.005, endPt1.Y, 0));
                        Line ln6 = new Line(new Point3d(startPt1.X - 0.005, startPt1.Y, 0), new Point3d(startPt1.X - 0.005, startPt1.Y - 0.005, 0));
                        Line ln7 = new Line(new Point3d(endPt1.X + 0.005, endPt1.Y, 0), new Point3d(endPt1.X + 0.005, endPt1.Y - 0.005, 0));
                        Line ln8 = new Line(new Point3d(endPt1.X + 0.005, endPt1.Y - 0.005, 0), new Point3d(startPt1.X - 0.005, startPt1.Y - 0.005, 0));
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        ents.Add(ln5);
                        ents.Add(ln6);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        Point2d pt13 = new Point2d(ptcen1.X - 0.015, ptcen1.Y - 0.05);
                        Point2d pt14 = new Point2d(ptcen1.X - 0.015, ptcen1.Y - 0.055);
                        Point2d pt15 = new Point2d(ptcen1.X + 0.015, ptcen1.Y - 0.055);
                        Point2d pt16 = new Point2d(ptcen1.X + 0.015, ptcen1.Y - 0.05);
                        Polyline pl6 = new Polyline();
                        pl6.AddVertexAt(0, pt13, 0, 0, 0);
                        pl6.AddVertexAt(1, pt14, 0, 0, 0);
                        pl6.AddVertexAt(2, pt15, 0, 0, 0);
                        pl6.AddVertexAt(3, pt16, 0, 0, 0);
                        pl6.Closed = true;
                        Point2d pt17 = new Point2d(ptcen2.X - 0.015, ptcen2.Y + 0.05);
                        Point2d pt18 = new Point2d(ptcen2.X - 0.015, ptcen2.Y + 0.055);
                        Point2d pt19 = new Point2d(ptcen2.X + 0.015, ptcen2.Y + 0.055);
                        Point2d pt20 = new Point2d(ptcen2.X + 0.015, ptcen2.Y + 0.05);
                        Polyline pl7 = new Polyline();
                        pl7.AddVertexAt(0, pt17, 0, 0, 0);
                        pl7.AddVertexAt(1, pt18, 0, 0, 0);
                        pl7.AddVertexAt(2, pt19, 0, 0, 0);
                        pl7.AddVertexAt(3, pt20, 0, 0, 0);
                        pl7.Closed = true;
                        ents.Add(pl6);
                        ents.Add(pl7);
                        Polyline pl8 = new Polyline();
                        pl8.AddVertexAt(0, new Point2d(ptcen1.X - 0.005, ptcen1.Y + 0.005), 0, 0, 0);
                        pl8.AddVertexAt(1, new Point2d(ptcen1.X - 0.005, ptcen1.Y - 0.005), 0, 0, 0);
                        pl8.AddVertexAt(2, new Point2d(ptcen1.X + 0.005, ptcen1.Y - 0.005), 0, 0, 0);
                        pl8.AddVertexAt(3, new Point2d(ptcen1.X + 0.005, ptcen1.Y + 0.005), 0, 0, 0);
                        pl8.Closed = true;
                        ents.Add(pl8);
                        Polyline pl9 = new Polyline();
                        pl9.AddVertexAt(0, new Point2d(ptcen2.X - 0.005, ptcen2.Y + 0.005), 0, 0, 0);
                        pl9.AddVertexAt(1, new Point2d(ptcen2.X - 0.005, ptcen2.Y - 0.005), 0, 0, 0);
                        pl9.AddVertexAt(2, new Point2d(ptcen2.X + 0.005, ptcen2.Y - 0.005), 0, 0, 0);
                        pl9.AddVertexAt(3, new Point2d(ptcen2.X + 0.005, ptcen2.Y + 0.005), 0, 0, 0);
                        pl9.Closed = true;
                        ents.Add(pl9);

                        Polyline pl10 = new Polyline();
                        pl10.AddVertexAt(0, new Point2d(ptCenter.X - 0.24, ptCenter.Y - 0.355), 0, 0, 0);
                        pl10.AddVertexAt(1, new Point2d(ptCenter.X - 0.24, ptCenter.Y - 0.365), 0, 0, 0);
                        pl10.AddVertexAt(2, new Point2d(ptCenter.X , ptCenter.Y - 0.365), 0, 0, 0);
                        pl10.AddVertexAt(3, new Point2d(ptCenter.X , ptCenter.Y - 0.355), 0, 0, 0);
                        pl10.Closed = true;
                        ents.Add(pl10);
                        Line ln9 = new Line(new Point3d(ptCenter.X - 0.24, ptCenter.Y - 0.365, 0), new Point3d(ptCenter.X - 0.24, ptCenter.Y - 0.405, 0));
                        Line ln10 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.365, 0), new Point3d(ptCenter.X, ptCenter.Y - 0.405, 0));
                        ents.Add(ln9);
                        ents.Add(ln10);
                        Polyline pl11 = new Polyline();
                        pl11.AddVertexAt(0, new Point2d(ptCenter.X-0.212,ptCenter.Y-0.365), 0, 0, 0);
                        pl11.AddVertexAt(1, new Point2d(ptCenter.X - 0.212, ptCenter.Y - 0.372), 0, 0, 0);
                        pl11.AddVertexAt(2, new Point2d(ptCenter.X - 0.202, ptCenter.Y - 0.372), 0, 0, 0);
                        pl11.AddVertexAt(3, new Point2d(ptCenter.X - 0.202, ptCenter.Y - 0.365), 0, 0, 0);
                        pl11.Closed = true;
                        ents.Add(pl11);
                        Polyline pl12 = new Polyline();
                        pl12.AddVertexAt(0, new Point2d(ptCenter.X - 0.04, ptCenter.Y - 0.365), 0, 0, 0);
                        pl12.AddVertexAt(1, new Point2d(ptCenter.X - 0.04, ptCenter.Y - 0.372), 0, 0, 0);
                        pl12.AddVertexAt(2, new Point2d(ptCenter.X - 0.03, ptCenter.Y - 0.372), 0, 0, 0);
                        pl12.AddVertexAt(3, new Point2d(ptCenter.X - 0.03, ptCenter.Y - 0.365), 0, 0, 0);
                        pl12.Closed = true;
                        ents.Add(pl12);
                        Polyline pl13 = new Polyline();
                        pl13.AddVertexAt(0, new Point2d(ptCenter.X - 0.21, ptCenter.Y - 0.372), 0, 0, 0);
                        pl13.AddVertexAt(1, new Point2d(ptCenter.X - 0.21, ptCenter.Y - 0.38), 0, 0, 0);
                        pl13.AddVertexAt(2, new Point2d(ptCenter.X - 0.204, ptCenter.Y - 0.38), 0, 0, 0);
                        pl13.AddVertexAt(3, new Point2d(ptCenter.X - 0.204, ptCenter.Y - 0.372), 0, 0, 0);
                        pl13.Closed = true;
                        ents.Add(pl13);
                        Polyline pl14 = new Polyline();
                        pl14.AddVertexAt(0, new Point2d(ptCenter.X - 0.038, ptCenter.Y - 0.372), 0, 0, 0);
                        pl14.AddVertexAt(1, new Point2d(ptCenter.X - 0.038, ptCenter.Y - 0.38), 0, 0, 0);
                        pl14.AddVertexAt(2, new Point2d(ptCenter.X - 0.032, ptCenter.Y - 0.38), 0, 0, 0);
                        pl14.AddVertexAt(3, new Point2d(ptCenter.X - 0.032, ptCenter.Y - 0.372), 0, 0, 0);
                        pl14.Closed = true;
                        ents.Add(pl14);
                        Circle cir30 = new Circle();
                        cir30.Radius = 0.085;
                        cir30.Center = new Point3d(ptCenter.X-0.12,ptCenter.Y-0.27,0);
                        cir30.SetDatabaseDefaults();
                        ents.Add(cir30);
                        Circle cir31 = new Circle();
                        cir31.Radius = 0.08;
                        cir31.Center = new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.27, 0);
                        cir31.SetDatabaseDefaults();
                        ents.Add(cir31);
                        Arc arc1 = new Arc(new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.27, 0), 0.09, 0, Math.PI );
                        ents.Add(arc1);
                        Line ln12 = new Line(new Point3d(ptCenter.X-0.21,ptCenter.Y-0.27,0), new Point3d(ptCenter.X - 0.21, ptCenter.Y - 0.365, 0));
                        Line ln13 = new Line(new Point3d(ptCenter.X - 0.204, ptCenter.Y - 0.287, 0), new Point3d(ptCenter.X - 0.204, ptCenter.Y - 0.365, 0));
                        ents.Add(ln12);
                        ents.Add(ln13);
                        Line ln14 = new Line(new Point3d(ptCenter.X - 0.03, ptCenter.Y - 0.27, 0), new Point3d(ptCenter.X - 0.03, ptCenter.Y - 0.365, 0));
                        Line ln15 = new Line(new Point3d(ptCenter.X - 0.038, ptCenter.Y - 0.287, 0), new Point3d(ptCenter.X - 0.038, ptCenter.Y - 0.365, 0));
                        ents.Add(ln14);
                        ents.Add(ln15);
                        Arc arc2 = new Arc(new Point3d(ptCenter.X - 0.16, ptCenter.Y - 0.27, 0), 0.04, 0, Math.PI);
                        ents.Add(arc2);
                        Arc arc3 = new Arc(new Point3d(ptCenter.X - 0.08, ptCenter.Y - 0.27, 0), 0.04, Math.PI, 2*Math.PI);
                        ents.Add(arc3);
                        Line ln16 = new Line(new Point3d(ptCenter.X - 0.202, ptCenter.Y - 0.14, 0), new Point3d(ptCenter.X - 0.202, ptCenter.Y - 0.23, 0));
                        ents.Add(ln16);
                        Line ln17 = new Line(new Point3d(ptCenter.X - 0.038, ptCenter.Y - 0.14, 0), new Point3d(ptCenter.X - 0.038, ptCenter.Y - 0.23, 0));
                        ents.Add(ln17);
                        Polyline pl15 = new Polyline();
                        pl15.AddVertexAt(0, new Point2d(ptCenter.X-0.21,ptCenter.Y-0.12), 0, 0, 0);
                        pl15.AddVertexAt(0, new Point2d(ptCenter.X - 0.21, ptCenter.Y - 0.14), 0, 0, 0);
                        pl15.AddVertexAt(0, new Point2d(ptCenter.X - 0.03, ptCenter.Y - 0.14), 0, 0, 0);
                        pl15.AddVertexAt(0, new Point2d(ptCenter.X - 0.03, ptCenter.Y - 0.12), 0, 0, 0);
                        pl15.Closed = true;
                        ents.Add(pl15);
                        Line ln18 = new Line(new Point3d(ptCenter.X - 0.21, ptCenter.Y - 0.13, 0), new Point3d(ptCenter.X - 0.03, ptCenter.Y - 0.13, 0));
                        ents.Add(ln18);
                        Line ln19 = new Line(new Point3d(ptCenter.X - 0.19, ptCenter.Y - 0.115, 0), new Point3d(ptCenter.X - 0.19, ptCenter.Y - 0.145, 0));
                        ents.Add(ln19);
                        Line ln20 = new Line(new Point3d(ptCenter.X - 0.09, ptCenter.Y - 0.115, 0), new Point3d(ptCenter.X - 0.09, ptCenter.Y - 0.145, 0));
                        ents.Add(ln20);
                        Line ln21 = new Line(new Point3d(ptCenter.X - 0.15, ptCenter.Y - 0.115, 0), new Point3d(ptCenter.X - 0.15, ptCenter.Y - 0.145, 0));
                        Line ln22 = new Line(new Point3d(ptCenter.X - 0.05, ptCenter.Y - 0.115, 0), new Point3d(ptCenter.X - 0.05, ptCenter.Y - 0.145, 0));
                        ents.Add(ln21);
                        ents.Add(ln22);
                        Circle cir32 = new Circle();
                        cir32.Radius = 0.03;
                        cir32.Center = new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.1, 0);
                        cir32.SetDatabaseDefaults();
                        ents.Add(cir32);
                        Circle cir33 = new Circle();
                        cir33.Radius = 0.005;
                        cir33.Center = new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.1, 0);
                        cir33.SetDatabaseDefaults();
                        ents.Add(cir33);
                        Polyline pl16 = new Polyline();
                        pl16.AddVertexAt(0, new Point2d(ptCenter.X-0.122,ptCenter.Y-0.096), 0, 0, 0);
                        pl16.AddVertexAt(1, new Point2d(ptCenter.X - 0.122, ptCenter.Y - 0.104), 0, 0, 0);
                        pl16.AddVertexAt(2, new Point2d(ptCenter.X - 0.118, ptCenter.Y - 0.104), 0, 0, 0);
                        pl16.AddVertexAt(0, new Point2d(ptCenter.X - 0.118, ptCenter.Y - 0.096), 0, 0, 0);
                        pl16.Closed = true;
                        ents.Add(pl16);
                        Line ln23 = new Line(new Point3d(ptCenter.X - 0.09, ptCenter.Y - 0.1, 0), new Point3d(ptCenter.X - 0.17, ptCenter.Y - 0.1, 0));
                        ents.Add(ln23);
                        Point3d pt1, pt2,pt3;
                        pt1 = new Point3d(ptCenter.X - 0.09, ptCenter.Y - 0.05, 0);
                        pt2 = new Point3d(ptCenter.X - 0.081, ptCenter.Y - 0.08, 0);
                        pt3 = new Point3d(ptCenter.X - 0.08, ptCenter.Y - 0.12, 0);
                        CircularArc3d arc1Pnt = new CircularArc3d(pt1, pt2, pt3);
                        Arc arc4 = (Arc)Curve.CreateFromGeCurve(arc1Pnt);
                        ents.Add(arc4);
                        Point3d pt4, pt5, pt6;
                        pt4 = new Point3d(ptCenter.X - 0.15, ptCenter.Y - 0.05, 0);
                        pt5 = new Point3d(ptCenter.X - 0.159, ptCenter.Y - 0.08, 0);
                        pt6 = new Point3d(ptCenter.X - 0.16, ptCenter.Y - 0.12, 0);
                        CircularArc3d arc5Pnt = new CircularArc3d(pt4, pt5, pt6);
                        Arc arc5 = (Arc)Curve.CreateFromGeCurve(arc5Pnt);
                        ents.Add(arc5);
                        Point3d pt7, pt8, pt9;
                        pt7 = new Point3d(ptCenter.X - 0.152, ptCenter.Y - 0.045, 0);
                        pt8 = new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.065, 0);
                        pt9 = new Point3d(ptCenter.X - 0.088, ptCenter.Y - 0.045, 0);
                        CircularArc3d arc6Pnt = new CircularArc3d(pt7, pt8, pt9);
                        Arc arc6 = (Arc)Curve.CreateFromGeCurve(arc6Pnt);
                        ents.Add(arc6);
                        Ellipse ellip2 = new Ellipse(new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.04, 0), Vector3d.ZAxis, Vector3d.XAxis / 29.8,
                            0.61, Math.PI, 2 * Math.PI);
                        ents.Add(ellip2);
                        Ellipse ellip3 = new Ellipse(new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.035, 0), Vector3d.ZAxis, Vector3d.XAxis / 29.8,
                            0.7, Math.PI*190/180, 2 * Math.PI*370/360);
                        ents.Add(ellip3);
                        Point3d pt24, pt25, pt26;
                        pt24 = new Point3d(ptCenter.X - 0.135, ptCenter.Y + 0.01, 0);
                        pt25 = new Point3d(ptCenter.X - 0.12, ptCenter.Y - 0.055, 0);
                        pt26 = new Point3d(ptCenter.X - 0.106, ptCenter.Y + 0.01, 0);
                        CircularArc3d arc9Pnt = new CircularArc3d(pt24, pt25, pt26);
                        Arc arc9 = (Arc)Curve.CreateFromGeCurve(arc9Pnt);
                        ents.Add(arc9);
                        Point3d pt27, pt28, pt29, pt30, pt31, pt32, pt33, pt34, pt35, pt36;
                        pt27 = new Point3d(ptCenter.X - 0.14, ptCenter.Y - 0.01, 0);
                        pt28 = new Point3d(ptCenter.X - 0.14, ptCenter.Y - 0.03, 0);
                        Line ln25 = new Line(pt27, pt28);
                        ents.Add(ln25);
                        pt29 = new Point3d(ptCenter.X - 0.14, ptCenter.Y - 0.04, 0);
                        pt30 = new Point3d(ptCenter.X - 0.122, ptCenter.Y - 0.045, 0);
                        pt31 = new Point3d(ptCenter.X - 0.104, ptCenter.Y - 0.04, 0);
                        pt32 = new Point3d(ptCenter.X - 0.104, ptCenter.Y - 0.03, 0);
                        pt33 = new Point3d(ptCenter.X - 0.122, ptCenter.Y - 0.035, 0);
                        Polyline pl17 = new Polyline();
                        pl17.AddVertexAt(0, new Point2d(pt28.X, pt28.Y), 0, 0, 0);
                        pl17.AddVertexAt(1, new Point2d(pt29.X, pt29.Y), 0, 0, 0);
                        pl17.AddVertexAt(2, new Point2d(pt30.X, pt30.Y), 0, 0, 0);
                        pl17.AddVertexAt(3, new Point2d(pt31.X, pt31.Y), 0, 0, 0);
                        pl17.AddVertexAt(4, new Point2d(pt32.X, pt32.Y), 0, 0, 0);
                        pl17.AddVertexAt(5, new Point2d(pt33.X, pt33.Y), 0, 0, 0);
                        pl17.Closed = true;
                        ents.Add(pl17);
                        pt34 = new Point3d(ptCenter.X - 0.131, ptCenter.Y-0.005, 0);
                        Line ln26 = new Line(pt27, pt34);
                        ents.Add(ln26);
                        pt35 = new Point3d(ptCenter.X - 0.104, ptCenter.Y - 0.01, 0);
                        pt36 = new Point3d(ptCenter.X - 0.113, ptCenter.Y - 0.005, 0);
                        Line ln27 = new Line(pt32, pt35);
                        Line ln28 = new Line(pt35, pt36);
                        ents.Add(ln27);
                        ents.Add(ln28);
                        Point3d pt37 = new Point3d(ptCenter.X - 0.122, ptCenter.Y - 0.034, 0);
                        CircularArc3d arc10Pnt = new CircularArc3d(pt34, pt37, pt36);
                        Arc arc10 = (Arc)Curve.CreateFromGeCurve(arc10Pnt);
                        ents.Add(arc10);
                        Point3d pt38=new Point3d(ptCenter.X - 0.131, ptCenter.Y + 0.008, 0);
                        Point3d pt39 = new Point3d(ptCenter.X - 0.131, ptCenter.Y - 0.02, 0);
                        Line ln29 = new Line(pt38, pt39);
                        ents.Add(ln29);
                        Point3d pt40 = new Point3d(ptCenter.X - 0.113, ptCenter.Y + 0.008, 0);
                        Point3d pt41 = new Point3d(ptCenter.X - 0.113, ptCenter.Y - 0.02, 0);
                        Line ln30 = new Line(pt40, pt41);
                        ents.Add(ln30);
                        Arc arc11 = new Arc(new Point3d(ptCenter.X - 0.136, ptCenter.Y - 0.02, 0), 0.005, -Math.PI / 2,0 );
                        ents.Add(arc11);
                        Arc arc12 = new Arc(new Point3d(ptCenter.X - 0.108, ptCenter.Y - 0.02, 0), 0.005, Math.PI, Math.PI*3/2);
                        ents.Add(arc12);
                        Point3d pt42=new Point3d(ptCenter.X - 0.128, ptCenter.Y + 0.0075, 0);
                        Point3d pt43 = new Point3d(ptCenter.X - 0.116, ptCenter.Y + 0.0075, 0);
                        Point3d pt44 = new Point3d(ptCenter.X - 0.122, ptCenter.Y + 0.0037, 0);
                        CircularArc3d arc13Pnt = new CircularArc3d(pt42, pt44, pt43);
                        Arc arc13 = (Arc)Curve.CreateFromGeCurve(arc13Pnt);
                        ents.Add(arc13);
                        Point3d pt45 = new Point3d(ptCenter.X - 0.131, ptCenter.Y + 0.008, 0);
                        Point3d pt46 = new Point3d(ptCenter.X - 0.122, ptCenter.Y + 0.0017, 0);
                        Point3d pt47 = new Point3d(ptCenter.X - 0.113, ptCenter.Y + 0.008, 0);
                        CircularArc3d arc14Pnt = new CircularArc3d(pt45, pt46, pt47);
                        Arc arc14 = (Arc)Curve.CreateFromGeCurve(arc14Pnt);
                        ents.Add(arc14);
                        Point3d pt48 = new Point3d(ptCenter.X - 0.131, ptCenter.Y + 0.0072, 0);
                        Point3d pt49 = new Point3d(ptCenter.X - 0.122, ptCenter.Y + 0.0002, 0);
                        Point3d pt50 = new Point3d(ptCenter.X - 0.113, ptCenter.Y + 0.0072, 0);
                        CircularArc3d arc15Pnt = new CircularArc3d(pt48, pt49, pt50);
                        Arc arc15 = (Arc)Curve.CreateFromGeCurve(arc15Pnt);
                        ents.Add(arc15);
                        Point3d pt51 = new Point3d(ptCenter.X - 0.131, ptCenter.Y + 0.0064, 0);
                        Point3d pt52 = new Point3d(ptCenter.X - 0.122, ptCenter.Y - 0.0014, 0);
                        Point3d pt53 = new Point3d(ptCenter.X - 0.113, ptCenter.Y + 0.0064, 0);
                        CircularArc3d arc16Pnt = new CircularArc3d(pt51, pt52, pt53);
                        Arc arc16 = (Arc)Curve.CreateFromGeCurve(arc16Pnt);
                        ents.Add(arc16);
                        Point3d pt54 = new Point3d(ptCenter.X - 0.131, ptCenter.Y + 0.0058, 0);
                        Point3d pt55 = new Point3d(ptCenter.X - 0.122, ptCenter.Y - 0.003, 0);
                        Point3d pt56 = new Point3d(ptCenter.X - 0.113, ptCenter.Y + 0.0058, 0);
                        CircularArc3d arc17Pnt = new CircularArc3d(pt54, pt55, pt56);
                        Arc arc17 = (Arc)Curve.CreateFromGeCurve(arc17Pnt);
                        ents.Add(arc17);
                        Ellipse ellip = new Ellipse(new Point3d(ptCenter.X - 0.12, ptCenter.Y + 0.04, 0), Vector3d.ZAxis, Vector3d.XAxis / 24.8,
                            0.8, Math.PI, 2*Math.PI);
                        ents.Add(ellip);
                        Vector3d nor = Vector3d.ZAxis;
                        Vector3d mAxis = Vector3d.XAxis/25;
                        Point3d cen = new Point3d(ptCenter.X - 0.12, ptCenter.Y + 0.042, 0);
                        double rRatio = 0.7;
                        double stAng = 0;
                        double enAng = Math.PI*2;
                        Ellipse ellip1 = new Ellipse(cen, nor, mAxis, rRatio, stAng, enAng);
                        ents.Add(ellip1);
                        Arc arc18 = new Arc(cen, 0.005, 0, Math.PI*2);
                        ents.Add(arc18);
                        Point3d pt57 = new Point3d(ptCenter.X - 0.124, ptCenter.Y + 0.045, 0);
                        Point3d pt58 = new Point3d(ptCenter.X - 0.134, ptCenter.Y + 0.06, 0);
                        Line ln31 = new Line(pt57, pt58);
                        ents.Add(ln31);
                        Point3d pt59 = new Point3d(ptCenter.X - 0.144, ptCenter.Y + 0.047, 0);
                        Line ln32 = new Line(pt57, pt59);
                        ents.Add(ln32);
                        Point3d pt60 = new Point3d(ptCenter.X - 0.142, ptCenter.Y + 0.053, 0);
                        CircularArc3d arc19Pnt = new CircularArc3d(pt58, pt60, pt59);
                        Arc arc19 = (Arc)Curve.CreateFromGeCurve(arc19Pnt);
                        ents.Add(arc19);
                        Point3d pt61 = new Point3d(ptCenter.X - 0.122, ptCenter.Y + 0.041, 0);
                        Point3d pt62 = new Point3d(ptCenter.X - 0.142, ptCenter.Y + 0.038, 0);
                        Point3d pt63 = new Point3d(ptcen.X - 0.12, ptCenter.Y + 0.021, 0);
                        Line ln33 = new Line(pt61, pt62);
                        ents.Add(ln33);
                        Line ln34 = new Line(pt61, pt63);
                        ents.Add(ln34);
                        Point3d pt64 = new Point3d(ptCenter.X - 0.132, ptCenter.Y + 0.023,0);
                        CircularArc3d arc20Pnt = new CircularArc3d(pt62, pt64, pt63);
                        Arc arc20 = (Arc)Curve.CreateFromGeCurve(arc20Pnt);
                        ents.Add(arc20);
                        Point3d pt65 = new Point3d(ptCenter.X - 0.115, ptCenter.Y + 0.041, 0);
                        Point3d pt66 = new Point3d(ptCenter.X - 0.117, ptCenter.Y + 0.021, 0);
                        Point3d pt67 = new Point3d(ptcen.X - 0.09, ptCenter.Y + 0.035, 0);
                        Line ln35 = new Line(pt65, pt66);
                        ents.Add(ln35);
                        Line ln36 = new Line(pt65, pt67);
                        ents.Add(ln36);
                        Point3d pt68 = new Point3d(ptCenter.X - 0.105, ptCenter.Y + 0.023, 0);
                        CircularArc3d arc21Pnt = new CircularArc3d(pt66, pt68, pt67);
                        Arc arc21 = (Arc)Curve.CreateFromGeCurve(arc21Pnt);
                        ents.Add(arc21);
                        Point3d pt69 = new Point3d(ptCenter.X - 0.112, ptCenter.Y + 0.045, 0);
                        Point3d pt70 = new Point3d(ptCenter.X - 0.087, ptCenter.Y + 0.037, 0);
                        Point3d pt71 = new Point3d(ptcen.X - 0.103, ptCenter.Y + 0.062, 0);
                        Line ln37 = new Line(pt69, pt70);
                        ents.Add(ln37);
                        Line ln38 = new Line(pt69, pt71);
                        ents.Add(ln38);
                        Point3d pt72 = new Point3d(ptCenter.X - 0.098, ptCenter.Y + 0.058, 0);
                        CircularArc3d arc22Pnt = new CircularArc3d(pt70, pt72, pt71);
                        Arc arc22 = (Arc)Curve.CreateFromGeCurve(arc22Pnt);
                        ents.Add(arc22);
                        Point3d pt73 = new Point3d(ptCenter.X - 0.118, ptCenter.Y + 0.049, 0);
                        Point3d pt74 = new Point3d(ptCenter.X - 0.11, ptCenter.Y + 0.064, 0);
                        Point3d pt75 = new Point3d(ptcen.X - 0.126, ptCenter.Y + 0.063, 0);
                        Line ln39 = new Line(pt73, pt74);
                        ents.Add(ln39);
                        Line ln40 = new Line(pt73, pt75);
                        ents.Add(ln40);
                        Point3d pt76 = new Point3d(ptCenter.X - 0.12, ptCenter.Y + 0.0645, 0);
                        CircularArc3d arc23Pnt = new CircularArc3d(pt74, pt76, pt75);
                        Arc arc23 = (Arc)Curve.CreateFromGeCurve(arc23Pnt);
                        ents.Add(arc23);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = radius / 12;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X,ptCenter.Y+0.2,0);

                        txt.Width =  radius/3;
                        txt.Height = radius/5;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("wjetmonitor")]
        public void WaterJetMonitor()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("WJM_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "WJM_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point2d pt0 = new Point2d(ptCenter.X + 0.16, ptCenter.Y + 0.2);
                        Point2d pt1 = new Point2d(ptCenter.X + 0.13, ptCenter.Y + 0.12);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.33, ptCenter.Y + 0.07);
                        Point2d pt3 = new Point2d(ptCenter.X - 0.18, ptCenter.Y - 0.05);
                        Point2d pt4 = new Point2d(ptCenter.X - 0.06, ptCenter.Y);
                        Point2d pt5 = new Point2d(ptCenter.X - 0.06, ptCenter.Y-0.2);
                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, pt0, 0, 0, 0);
                        pl.AddVertexAt(1, pt1,0, 0, 0);
                        pl.AddVertexAt(2, pt2, 0, 0.1, 0);
                        pl.AddVertexAt(3, pt3, 0, 0.1, 0);
                        pl.AddVertexAt(4, pt4, 0.01, 0, 0);
                        pl.AddVertexAt(5, pt5, 0.05, 0, 0);
                        pl.Closed = false;
                        pl.ConstantWidth = 0.05;
                        ents.Add(pl);
                        ObjectIdCollection ids = new ObjectIdCollection();
                        Ellipse ellip = new Ellipse(new Point3d(pt5.X, pt5.Y - 0.03, 0), Vector3d.ZAxis, Vector3d.XAxis / 14.8,
                            0.6, 0, 2 * Math.PI);
                        //ids.Add(ellip.ObjectId);
                        ents.Add(ellip);
                        Point3d pt6 = new Point3d(pt5.X - 0.068, pt5.Y - 0.03, 0);
                        Point3d pt7 = new Point3d(pt5.X - 0.068, pt5.Y - 0.05, 0);
                        Point3d pt8 = new Point3d(pt5.X + 0.068, pt5.Y - 0.03, 0);
                        Point3d pt9 = new Point3d(pt5.X + 0.068, pt5.Y - 0.05, 0);
                        Line ln1 = new Line(pt6, pt7);
                        Line ln2 = new Line(pt8, pt9);
                        ents.Add(ln1);
                        ents.Add(ln2);
                        Ellipse ellip1 = new Ellipse(new Point3d(pt5.X, pt5.Y - 0.05, 0), Vector3d.ZAxis, Vector3d.XAxis / 14.8,
                           0.6, Math.PI, 2 * Math.PI);
                        //ids.Add(ellip1.ObjectId);
                        ents.Add(ellip1);
                        Point2d pt10 = new Point2d(ptCenter.X - 0.38, ptCenter.Y + 0.28);
                        Point2d pt11 = new Point2d(ptCenter.X - 0.31, ptCenter.Y + 0.07);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt10, 0, 0, 0);
                        pl1.AddVertexAt(1, pt11, 0, 0, 0);
                        pl1.ConstantWidth = 0.01;
                        ents.Add(pl1);
                        Point2d pt12 = new Point2d(ptCenter.X - 0.12, ptCenter.Y - 0.1);
                        Point2d pt13 = new Point2d(ptCenter.X - 0.06, ptCenter.Y -0.008);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, pt12, 0, 0, 0);
                        pl2.AddVertexAt(1, pt13, 0, 0, 0);
                        pl2.ConstantWidth = 0.005;
                        ents.Add(pl2);
                        Point2d pt14 = new Point2d(ptCenter.X + 0.04, ptCenter.Y - 0.12);
                        Point2d pt15 = new Point2d(ptCenter.X -0.05, ptCenter.Y - 0.02);
                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, pt14, 0, 0, 0);
                        pl3.AddVertexAt(1, pt15, 0, 0, 0);
                        pl3.ConstantWidth = 0.005;
                        ents.Add(pl3);
                        //Hatch hat = new Hatch();
                        //hat.SetHatchPattern(HatchPatternType.PreDefined, "SOLID");
                        //ObjectId hatId = acBlkTblRec.AppendEntity(hat);
                        //tr.AddNewlyCreatedDBObject(hat, true);
                        //hat.Associative = true;
                        //hat.AppendLoop(HatchLoopTypes.Default, ids);
                        //hat.EvaluateHatch(true);
                        //ents.Add(hat);
                        //TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        //ObjectId mtStyleid = db.Textstyle;

                        //if (ts.Has("SansSerif"))
                        //{
                        //    mtStyleid = ts["SansSerif"];
                        //}
                        //MText txt = new MText();
                        //txt.Contents = Commands.tmpmarkstring;
                        //txt.SetDatabaseDefaults(db);
                        //txt.Layer = "_Fire Fighting Installation";
                        //txt.TextHeight = radius / 3;
                        //txt.TextStyleId = mtStyleid;
                        //txt.Attachment = AttachmentPoint.MiddleCenter;
                        //txt.Location = ptCenter;

                        //txt.Width = 1.5 * radius;
                        //txt.Height = 1.5 * radius;
                        //ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("nonvalve")]
        public void nonvalve()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("NV_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "NV_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();

                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - 0.16, ptCenter.Y - 0.16), 0, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X - 0.16, ptCenter.Y + 0.16), 0, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X + 0.16, ptCenter.Y - 0.16), 0, 0, 0);
                        pl.AddVertexAt(3, new Point2d(ptCenter.X + 0.16, ptCenter.Y + 0.16), 0, 0, 0);
                        pl.ConstantWidth = 0.04;
                        ents.Add(pl);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.05;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.15;
                        txt.Height = 0.15;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("svalve")]
        public void svalve()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("SV_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "S V";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "SV_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();

                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - 0.19, ptCenter.Y + 0.15), 0, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X - 0.19, ptCenter.Y - 0.15), 0, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X + 0.19, ptCenter.Y + 0.15), 0, 0, 0);
                        pl.AddVertexAt(3, new Point2d(ptCenter.X + 0.19, ptCenter.Y - 0.15), 0, 0, 0);
                        pl.Closed = true;
                        pl.ConstantWidth = 0.02;
                        ents.Add(pl);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, new Point2d(ptCenter.X, ptCenter.Y), 0, 0, 0);
                        pl1.AddVertexAt(1, new Point2d(ptCenter.X, ptCenter.Y + 0.26), 0, 0, 0);
                        pl1.AddVertexAt(2, new Point2d(ptCenter.X + 0.18, ptCenter.Y + 0.26), 0, 0, 0);
                        pl1.ConstantWidth = 0.02;
                        ents.Add(pl1);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.2;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.3;
                        txt.Height = 0.3;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("wcnozzle")]
        public void wcnozzle()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("WCN_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "WCN_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();

                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - 0.24, ptCenter.Y + 0.19), 0, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X - 0.24, ptCenter.Y - 0.19), 0, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X + 0.24, ptCenter.Y), 0, 0, 0);
                        pl.Closed = true;
                        pl.ConstantWidth = 0.04;
                        ents.Add(pl);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, new Point2d(ptCenter.X+0.24, ptCenter.Y), 0, 0, 0);
                        pl1.AddVertexAt(1, new Point2d(ptCenter.X+0.6, ptCenter.Y), 0, 0, 0);
                        pl1.ConstantWidth = 0.01;
                        ents.Add(pl1);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, new Point2d(ptCenter.X + 0.2, ptCenter.Y+0.02), 0, 0, 0);
                        pl2.AddVertexAt(1, new Point2d(ptCenter.X + 0.35, ptCenter.Y+0.23), 0, 0, 0);
                        pl2.ConstantWidth = 0.01;
                        ents.Add(pl2);
                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, new Point2d(ptCenter.X + 0.2, ptCenter.Y - 0.02), 0, 0, 0);
                        pl3.AddVertexAt(1, new Point2d(ptCenter.X + 0.35, ptCenter.Y - 0.23), 0, 0, 0);
                        pl3.ConstantWidth = 0.02;
                        ents.Add(pl3);
                        Polyline pl5 = new Polyline();
                        pl5.AddVertexAt(0, new Point2d(ptCenter.X , ptCenter.Y + 0.1), 0, 0, 0);
                        pl5.AddVertexAt(1, new Point2d(ptCenter.X + 0.2, ptCenter.Y + 0.32), 0, 0, 0);
                        pl5.ConstantWidth = 0.01;
                        ents.Add(pl5);
                        Polyline pl4 = new Polyline();
                        pl4.AddVertexAt(0, new Point2d(ptCenter.X , ptCenter.Y -0.1), 0, 0, 0);
                        pl4.AddVertexAt(1, new Point2d(ptCenter.X + 0.2, ptCenter.Y -0.32), 0, 0, 0);
                        pl4.ConstantWidth = 0.01;
                        ents.Add(pl4);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.2;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.3;
                        txt.Height = 0.3;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("way2")]
        public void way2()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("W2_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "2-WAY";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "W2_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();

                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - 0.2, ptCenter.Y), 0, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X - 0.2, ptCenter.Y - 0.24), 0, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X + 0.2, ptCenter.Y - 0.24), 0, 0, 0);
                        pl.AddVertexAt(3, new Point2d(ptCenter.X + 0.2, ptCenter.Y), 0, 0, 0);
                        pl.ConstantWidth = 0.02;
                        ents.Add(pl);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, new Point2d(ptCenter.X - 0.2, ptCenter.Y + 0.25), 0, 0, 0);
                        pl1.AddVertexAt(1, new Point2d(ptCenter.X - 0.33, ptCenter.Y), 0, 0, 0);
                        pl1.AddVertexAt(2, new Point2d(ptCenter.X - 0.07, ptCenter.Y), 0, 0, 0);
                        pl1.ConstantWidth = 0.02;
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, new Point2d(ptCenter.X + 0.2, ptCenter.Y + 0.25), 0, 0, 0);
                        pl2.AddVertexAt(1, new Point2d(ptCenter.X + 0.33, ptCenter.Y), 0, 0, 0);
                        pl2.AddVertexAt(2, new Point2d(ptCenter.X + 0.07, ptCenter.Y), 0, 0, 0);
                        pl2.ConstantWidth = 0.02;
                        pl2.Closed = true;
                        ents.Add(pl2);

                        Point2d ptcen1 = new Point2d(ptCenter.X - 0.2, ptCenter.Y + 0.09);
                        double radius = 0.03;
                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, new Point2d(ptcen1.X - radius, ptcen1.Y), 3 * radius, 0, 0);
                        pl3.AddVertexAt(1, new Point2d(ptcen1.X, ptcen1.Y - radius), 3 * radius, 0, 0);
                        pl3.AddVertexAt(2, new Point2d(ptcen1.X + radius, ptcen1.Y), 3 * radius, 0, 0);
                        pl3.AddVertexAt(3, new Point2d(ptcen1.X, ptcen1.Y + radius), 3 * radius, 0, 0);
                        pl3.ConstantWidth = 0.02;
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Point2d ptcen2 = new Point2d(ptCenter.X + 0.2, ptCenter.Y + 0.09);
                        Polyline pl4 = new Polyline();
                        pl4.AddVertexAt(0, new Point2d(ptcen2.X - radius, ptcen2.Y), 3 * radius, 0, 0);
                        pl4.AddVertexAt(1, new Point2d(ptcen2.X, ptcen2.Y - radius), 3 * radius, 0, 0);
                        pl4.AddVertexAt(2, new Point2d(ptcen2.X + radius, ptcen2.Y), 3 * radius, 0, 0);
                        pl4.AddVertexAt(3, new Point2d(ptcen2.X, ptcen2.Y + radius), 3 * radius, 0, 0);
                        pl4.ConstantWidth = 0.02;
                        pl4.Closed = true;
                        ents.Add(pl4);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.1;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X, ptCenter.Y + 0.4, 0);

                        txt.Width = 0.3;
                        txt.Height = 0.3;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("way4")]
        public void way4()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("W4_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "4-WAY";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "W4_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Polyline pl11 = new Polyline();
                        Polyline pl12 = new Polyline();
                        pl11.AddVertexAt(0, new Point2d(ptCenter.X - 0.15, ptCenter.Y), 0, 0, 0);
                        pl11.AddVertexAt(1, new Point2d(ptCenter.X - 0.15, ptCenter.Y - 0.24), 0, 0, 0);
                        pl11.ConstantWidth = 0.02;
                        ents.Add(pl11);
                        pl12.AddVertexAt(0, new Point2d(ptCenter.X + 0.15, ptCenter.Y), 0, 0, 0);
                        pl12.AddVertexAt(1, new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.24), 0, 0, 0);
                        pl12.ConstantWidth = 0.02;
                        ents.Add(pl12);
                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - 0.45, ptCenter.Y), 0, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X - 0.45, ptCenter.Y - 0.24), 0, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X + 0.45, ptCenter.Y - 0.24), 0, 0, 0);
                        pl.AddVertexAt(3, new Point2d(ptCenter.X + 0.45, ptCenter.Y), 0, 0, 0);
                        pl.ConstantWidth = 0.02;
                        ents.Add(pl);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, new Point2d(ptCenter.X - 0.45, ptCenter.Y + 0.25), 0, 0, 0);
                        pl1.AddVertexAt(1, new Point2d(ptCenter.X - 0.57, ptCenter.Y), 0, 0, 0);
                        pl1.AddVertexAt(2, new Point2d(ptCenter.X - 0.33, ptCenter.Y), 0, 0, 0);
                        pl1.ConstantWidth = 0.02;
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, new Point2d(ptCenter.X + 0.45, ptCenter.Y + 0.25), 0, 0, 0);
                        pl2.AddVertexAt(1, new Point2d(ptCenter.X + 0.57, ptCenter.Y), 0, 0, 0);
                        pl2.AddVertexAt(2, new Point2d(ptCenter.X + 0.33, ptCenter.Y), 0, 0, 0);
                        pl2.ConstantWidth = 0.02;
                        pl2.Closed = true;
                        ents.Add(pl2);
                        Polyline pl6 = new Polyline();
                        pl6.AddVertexAt(0, new Point2d(ptCenter.X + 0.15, ptCenter.Y + 0.25), 0, 0, 0);
                        pl6.AddVertexAt(1, new Point2d(ptCenter.X + 0.27, ptCenter.Y), 0, 0, 0);
                        pl6.AddVertexAt(2, new Point2d(ptCenter.X + 0.03, ptCenter.Y), 0, 0, 0);
                        pl6.ConstantWidth = 0.02;
                        pl6.Closed = true;
                        ents.Add(pl6);
                        Polyline pl5 = new Polyline();
                        pl5.AddVertexAt(0, new Point2d(ptCenter.X - 0.15, ptCenter.Y + 0.25), 0, 0, 0);
                        pl5.AddVertexAt(1, new Point2d(ptCenter.X - 0.27, ptCenter.Y), 0, 0, 0);
                        pl5.AddVertexAt(2, new Point2d(ptCenter.X - 0.03, ptCenter.Y), 0, 0, 0);
                        pl5.ConstantWidth = 0.02;
                        pl5.Closed = true;
                        ents.Add(pl5);

                        Point2d ptcen1 = new Point2d(ptCenter.X - 0.45, ptCenter.Y + 0.09);
                        double radius = 0.03;
                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, new Point2d(ptcen1.X - radius, ptcen1.Y), 3 * radius, 0, 0);
                        pl3.AddVertexAt(1, new Point2d(ptcen1.X, ptcen1.Y - radius), 3 * radius, 0, 0);
                        pl3.AddVertexAt(2, new Point2d(ptcen1.X + radius, ptcen1.Y), 3 * radius, 0, 0);
                        pl3.AddVertexAt(3, new Point2d(ptcen1.X, ptcen1.Y + radius), 3 * radius, 0, 0);
                        pl3.ConstantWidth = 0.02;
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Point2d ptcen2 = new Point2d(ptCenter.X + 0.45, ptCenter.Y + 0.09);
                        Polyline pl4 = new Polyline();
                        pl4.AddVertexAt(0, new Point2d(ptcen2.X - radius, ptcen2.Y), 3 * radius, 0, 0);
                        pl4.AddVertexAt(1, new Point2d(ptcen2.X, ptcen2.Y - radius), 3 * radius, 0, 0);
                        pl4.AddVertexAt(2, new Point2d(ptcen2.X + radius, ptcen2.Y), 3 * radius, 0, 0);
                        pl4.AddVertexAt(3, new Point2d(ptcen2.X, ptcen2.Y + radius), 3 * radius, 0, 0);
                        pl4.ConstantWidth = 0.02;
                        pl4.Closed = true;
                        ents.Add(pl4);

                        Point2d ptcen3 = new Point2d(ptCenter.X - 0.15, ptCenter.Y + 0.09);
                        Polyline pl7 = new Polyline();
                        pl7.AddVertexAt(0, new Point2d(ptcen3.X - radius, ptcen3.Y), 3 * radius, 0, 0);
                        pl7.AddVertexAt(1, new Point2d(ptcen3.X, ptcen3.Y - radius), 3 * radius, 0, 0);
                        pl7.AddVertexAt(2, new Point2d(ptcen3.X + radius, ptcen3.Y), 3 * radius, 0, 0);
                        pl7.AddVertexAt(3, new Point2d(ptcen3.X, ptcen3.Y + radius), 3 * radius, 0, 0);
                        pl7.ConstantWidth = 0.02;
                        pl7.Closed = true;
                        ents.Add(pl7);
                        Point2d ptcen4 = new Point2d(ptCenter.X + 0.15, ptCenter.Y + 0.09);
                        Polyline pl8 = new Polyline();
                        pl8.AddVertexAt(0, new Point2d(ptcen4.X - radius, ptcen4.Y), 3 * radius, 0, 0);
                        pl8.AddVertexAt(1, new Point2d(ptcen4.X, ptcen4.Y - radius), 3 * radius, 0, 0);
                        pl8.AddVertexAt(2, new Point2d(ptcen4.X + radius, ptcen4.Y), 3 * radius, 0, 0);
                        pl8.AddVertexAt(3, new Point2d(ptcen4.X, ptcen4.Y + radius), 3 * radius, 0, 0);
                        pl8.ConstantWidth = 0.02;
                        pl8.Closed = true;
                        ents.Add(pl8);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.1;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X, ptCenter.Y + 0.4, 0);

                        txt.Width = 0.3;
                        txt.Height = 0.3;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("mbvalve")]
        public void mbvalve()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("MBV_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "MBV";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "MBV_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();

                        Polyline pl = new Polyline();
                        pl.AddVertexAt(0, new Point2d(ptCenter.X - 0.3, ptCenter.Y + 0.16), 0, 0, 0);
                        pl.AddVertexAt(1, new Point2d(ptCenter.X - 0.3, ptCenter.Y - 0.16), 0, 0, 0);
                        pl.AddVertexAt(2, new Point2d(ptCenter.X + 0.3, ptCenter.Y - 0.16), 0, 0, 0);
                        pl.AddVertexAt(3, new Point2d(ptCenter.X + 0.3, ptCenter.Y + 0.16), 0, 0, 0);
                        pl.Closed = true;
                        pl.ConstantWidth = 0.03;
                        ents.Add(pl);
                        
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.13;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.2;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("ceilingspeaker")]
        public void ceilingspeaker()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("CEILING_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "SPEAKER";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "CEILING_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Circle acCirc = new Circle();
                        acCirc.SetDatabaseDefaults();
                        acCirc.Center = ptCenter;
                        acCirc.Radius = 0.28;
                        ents.Add(acCirc);
                        Line ln1 = new Line(new Point3d(ptCenter.X + 0.243, ptCenter.Y + 0.13, 0), new Point3d(ptCenter.X - 0.07, ptCenter.Y + 0.27,0));
                        Line ln2 = new Line(new Point3d(ptCenter.X - 0.243, ptCenter.Y - 0.13, 0), new Point3d(ptCenter.X + 0.07, ptCenter.Y - 0.27, 0));
                        Line ln3 = new Line(new Point3d(ptCenter.X - 0.16, ptCenter.Y + 0.23, 0), new Point3d(ptCenter.X - 0.27, ptCenter.Y - 0.05, 0));
                        Line ln4 = new Line(new Point3d(ptCenter.X - 0.27, ptCenter.Y - 0.05, 0), new Point3d(ptCenter.X + 0.17, ptCenter.Y - 0.22, 0));
                        Line ln5 = new Line(new Point3d(ptCenter.X + 0.17, ptCenter.Y - 0.22, 0), new Point3d(ptCenter.X + 0.278, ptCenter.Y + 0.03, 0));
                        Line ln6 = new Line(new Point3d(ptCenter.X + 0.278, ptCenter.Y + 0.03, 0), new Point3d(ptCenter.X - 0.16, ptCenter.Y + 0.23, 0));
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        ents.Add(ln5);
                        ents.Add(ln6);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.07;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = acCirc.Radius;
                        txt.Height = acCirc.Radius;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }

        }
        [CommandMethod("wallspeaker")]
        public void wallspeaker()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("WSPEAKER_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "WALL"+"\n"+"SPEAKER";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "WSPEAKER_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Line ln1 = new Line(new Point3d(ptCenter.X-0.29,ptCenter.Y+0.225,0),new Point3d(ptCenter.X-0.29,ptCenter.Y-0.225,0));
                        Line ln2 = new Line(new Point3d(ptCenter.X - 0.29, ptCenter.Y - 0.225, 0), new Point3d(ptCenter.X - 0.21, ptCenter.Y - 0.305,0));
                        Line ln3 = new Line(new Point3d(ptCenter.X - 0.21, ptCenter.Y - 0.305, 0), new Point3d(ptCenter.X, ptCenter.Y - 0.305, 0));
                        Line ln4 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.305, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.305, 0));
                        Line ln5 = new Line(new Point3d(ptCenter.X, ptCenter.Y + 0.305, 0), new Point3d(ptCenter.X-0.21, ptCenter.Y + 0.305, 0));
                        Line ln6 = new Line(new Point3d(ptCenter.X - 0.21, ptCenter.Y + 0.305, 0), new Point3d(ptCenter.X-0.29, ptCenter.Y + 0.225, 0));
                        Line ln7 = new Line(new Point3d(ptCenter.X, ptCenter.Y -0.125, 0), new Point3d(ptCenter.X +0.18, ptCenter.Y - 0.25, 0));
                        Line ln8 = new Line(new Point3d(ptCenter.X + 0.18, ptCenter.Y - 0.25, 0), new Point3d(ptCenter.X + 0.18, ptCenter.Y + 0.25, 0));
                        Line ln9 = new Line(new Point3d(ptCenter.X + 0.18, ptCenter.Y + 0.25, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.125, 0));
                        Point2d pt1 = new Point2d(ptCenter.X + 0.03, ptCenter.Y - 0.11);
                        Point2d pt2 = new Point2d(ptCenter.X + 0.13, ptCenter.Y - 0.175);
                        Point2d pt3 = new Point2d(ptCenter.X + 0.13, ptCenter.Y + 0.175);
                        Point2d pt4 = new Point2d(ptCenter.X + 0.03, ptCenter.Y + 0.11);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        pl1.Closed = true;
                        ents.Add(pl1);
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        ents.Add(ln5);
                        ents.Add(ln6);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        ents.Add(ln9);

                        ObjectIdCollection ids = new ObjectIdCollection();
                        Entity ent1 = pl1 as Entity;
                        ids.Add(acBlkTblRec.AppendEntity(ent1));
                        tr.AddNewlyCreatedDBObject(ent1, true);
                        Hatch hat = new Hatch { PatternScale = 16.0 };
                        hat.SetHatchPattern(HatchPatternType.PreDefined, "ANSI33");
                        ObjectId hatId = acBlkTblRec.AppendEntity(hat);
                        tr.AddNewlyCreatedDBObject(hat, true);
                        hat.Associative = true;
                        hat.AppendLoop(HatchLoopTypes.Default, ids);
                        hat.EvaluateHatch(true);

                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.07;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X-0.15,ptCenter.Y,0);

                        txt.Width = 0.2;
                        txt.Height = 0.2;
                        Matrix3d curUCSMatrix = doc.Editor.CurrentUserCoordinateSystem;
                        CoordinateSystem3d curUCS = curUCSMatrix.CoordinateSystem3d;
                        txt.TransformBy(Matrix3d.Rotation(Math.PI / 2, curUCS.Zaxis, txt.Location));
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            if(!ent.GetType().Equals(typeof(Polyline)))
                            {
                                acBlkTblRec.AppendEntity(ent);
                                tr.AddNewlyCreatedDBObject(ent, true);
                            }
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }

        }
        [CommandMethod("firehosebox")]
        public void firehosebox()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("FIREHOSE_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FIRE HOSE BOX";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "FIREHOSE_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Line ln1=new Line(new Point3d(ptCenter.X,ptCenter.Y+0.12,0),new Point3d(ptCenter.X,ptCenter.Y-0.12,0));
                        Point2d pt1 = new Point2d(ptCenter.X - 0.145, ptCenter.Y + 0.12);
                        Point2d pt2 = new Point2d(ptCenter.X - 0.145, ptCenter.Y - 0.12);
                        Point2d pt3 = new Point2d(ptCenter.X + 0.145, ptCenter.Y - 0.12);
                        Point2d pt4 = new Point2d(ptCenter.X + 0.145, ptCenter.Y + 0.12);
                        Polyline pl1 = new Polyline();
                        pl1.AddVertexAt(0, pt1, 0, 0, 0);
                        pl1.AddVertexAt(1, pt2, 0, 0, 0);
                        pl1.AddVertexAt(2, pt3, 0, 0, 0);
                        pl1.AddVertexAt(3, pt4, 0, 0, 0);
                        pl1.Closed = true;
                        Point2d pt5 = new Point2d(ptCenter.X - 0.1225, ptCenter.Y + 0.09);
                        Point2d pt6 = new Point2d(ptCenter.X - 0.1225, ptCenter.Y - 0.09);
                        Point2d pt7 = new Point2d(ptCenter.X - 0.0225, ptCenter.Y - 0.09);
                        Point2d pt8 = new Point2d(ptCenter.X - 0.0225, ptCenter.Y + 0.09);
                        Polyline pl2 = new Polyline();
                        pl2.AddVertexAt(0, pt5, 0, 0, 0);
                        pl2.AddVertexAt(1, pt6, 0, 0, 0);
                        pl2.AddVertexAt(2, pt7, 0, 0, 0);
                        pl2.AddVertexAt(3, pt8, 0, 0, 0);
                        pl2.Closed = true;
                        Point2d pt9 = new Point2d(ptCenter.X + 0.0225, ptCenter.Y + 0.09);
                        Point2d pt10 = new Point2d(ptCenter.X + 0.0225, ptCenter.Y - 0.09);
                        Point2d pt11 = new Point2d(ptCenter.X + 0.1225, ptCenter.Y - 0.09);
                        Point2d pt12 = new Point2d(ptCenter.X + 0.1225, ptCenter.Y + 0.09);
                        Polyline pl3 = new Polyline();
                        pl3.AddVertexAt(0, pt9, 0, 0, 0);
                        pl3.AddVertexAt(1, pt10, 0, 0, 0);
                        pl3.AddVertexAt(2, pt11, 0, 0, 0);
                        pl3.AddVertexAt(3, pt12, 0, 0, 0);
                        pl3.Closed = true;
                        ents.Add(ln1);
                        ents.Add(pl1);
                        ents.Add(pl2);
                        ents.Add(pl3);

                        Point2d pt13 = new Point2d(ptCenter.X - 0.027, ptCenter.Y - 0.015);
                        Point2d pt14 = new Point2d(ptCenter.X - 0.027, ptCenter.Y + 0.015);
                        Point2d pt15 = new Point2d(ptCenter.X - 0.030, ptCenter.Y + 0.015);
                        Point2d pt16 = new Point2d(ptCenter.X - 0.030, ptCenter.Y - 0.015);
                        Polyline pl4 = new Polyline();
                        pl4.AddVertexAt(0, pt13, 0, 0, 0);
                        pl4.AddVertexAt(1, pt14, 0, 0, 0);
                        pl4.AddVertexAt(2, pt15, 0, 0, 0);
                        pl4.AddVertexAt(3, pt16, 0, 0, 0);
                        pl4.Closed = true;
                        Point2d pt17 = new Point2d(ptCenter.X + 0.027, ptCenter.Y - 0.015);
                        Point2d pt18 = new Point2d(ptCenter.X + 0.027, ptCenter.Y + 0.015);
                        Point2d pt19 = new Point2d(ptCenter.X + 0.030, ptCenter.Y + 0.015);
                        Point2d pt20 = new Point2d(ptCenter.X + 0.030, ptCenter.Y - 0.015);
                        Polyline pl5 = new Polyline();
                        pl5.AddVertexAt(0, pt17, 0, 0, 0);
                        pl5.AddVertexAt(1, pt18, 0, 0, 0);
                        pl5.AddVertexAt(2, pt19, 0, 0, 0);
                        pl5.AddVertexAt(3, pt20, 0, 0, 0);
                        pl5.Closed = true;
                        ents.Add(pl4);
                        ents.Add(pl5);

                        Point2d pt21 = new Point2d(ptCenter.X-0.0765,ptCenter.Y+0.005);
                        Point2d pt22 = new Point2d(ptCenter.X - 0.0765, ptCenter.Y - 0.005);
                        Point2d pt23 = new Point2d(ptCenter.X - 0.0685, ptCenter.Y - 0.005);
                        Point2d pt24 = new Point2d(ptCenter.X - 0.0685, ptCenter.Y + 0.005);
                        Polyline pl6 = new Polyline();
                        pl6.AddVertexAt(0, pt21, 0, 0, 0);
                        pl6.AddVertexAt(1, pt22, 0, 0, 0);
                        pl6.AddVertexAt(2, pt23, 0, 0, 0);
                        pl6.AddVertexAt(3, pt24, 0, 0, 0);
                        pl6.Closed = true;
                        Point2d pt25 = new Point2d(ptCenter.X + 0.0765, ptCenter.Y + 0.005);
                        Point2d pt26 = new Point2d(ptCenter.X + 0.0765, ptCenter.Y - 0.005);
                        Point2d pt27 = new Point2d(ptCenter.X + 0.0685, ptCenter.Y - 0.005);
                        Point2d pt28 = new Point2d(ptCenter.X + 0.0685, ptCenter.Y + 0.005);
                        Polyline pl7 = new Polyline();
                        pl7.AddVertexAt(0, pt25, 0, 0, 0);
                        pl7.AddVertexAt(1, pt26, 0, 0, 0);
                        pl7.AddVertexAt(2, pt27, 0, 0, 0);
                        pl7.AddVertexAt(3, pt28, 0, 0, 0);
                        pl7.Closed = true;
                        ents.Add(pl6);
                        ents.Add(pl7);
                        Point3d ptcen1 = new Point3d(ptCenter.X - 0.0725, ptCenter.Y, 0);
                        Point3d ptcen2 = new Point3d(ptCenter.X + 0.0725, ptCenter.Y, 0);
                        Circle cir11 = new Circle();
                        cir11.Radius = 0.01;
                        cir11.Center = ptcen1;
                        cir11.SetDatabaseDefaults();
                        ents.Add(cir11);
                        Circle cir12 = new Circle();
                        cir12.Radius = 0.012;
                        cir12.Center = ptcen1;
                        cir12.SetDatabaseDefaults();
                        ents.Add(cir12);
                        Circle cir13 = new Circle();
                        cir13.Radius = 0.014;
                        cir13.Center = ptcen1;
                        cir13.SetDatabaseDefaults();
                        ents.Add(cir13);
                        Circle cir14 = new Circle();
                        cir14.Radius = 0.016;
                        cir14.Center = ptcen1;
                        cir14.SetDatabaseDefaults();
                        ents.Add(cir14);
                        Circle cir15 = new Circle();
                        cir15.Radius = 0.018;
                        cir15.Center = ptcen1;
                        cir15.SetDatabaseDefaults();
                        ents.Add(cir15);
                        Circle cir16 = new Circle();
                        cir16.Radius = 0.02;
                        cir16.Center = ptcen1;
                        cir16.SetDatabaseDefaults();
                        ents.Add(cir16);
                        Circle cir17 = new Circle();
                        cir17.Radius = 0.022;
                        cir17.Center = ptcen1;
                        cir17.SetDatabaseDefaults();
                        ents.Add(cir17);
                        Circle cir18 = new Circle();
                        cir18.Radius = 0.024;
                        cir18.Center = ptcen1;
                        cir18.SetDatabaseDefaults();
                        ents.Add(cir18);
                        Circle cir19 = new Circle();
                        cir19.Radius = 0.026;
                        cir19.Center = ptcen1;
                        cir19.SetDatabaseDefaults();
                        ents.Add(cir19);
                        Circle cir110 = new Circle();
                        cir110.Radius = 0.028;
                        cir110.Center = ptcen1;
                        cir110.SetDatabaseDefaults();
                        ents.Add(cir110);
                        Circle cir111 = new Circle();
                        cir111.Radius = 0.03;
                        cir111.Center = ptcen1;
                        cir111.SetDatabaseDefaults();
                        ents.Add(cir111);
                        Circle cir112 = new Circle();
                        cir112.Radius = 0.032;
                        cir112.Center = ptcen1;
                        cir112.SetDatabaseDefaults();
                        ents.Add(cir112);
                        Circle cir113 = new Circle();
                        cir113.Radius = 0.034;
                        cir113.Center = ptcen1;
                        cir113.SetDatabaseDefaults();
                        ents.Add(cir113);
                        Circle cir114 = new Circle();
                        cir114.Radius = 0.036;
                        cir114.Center = ptcen1;
                        cir114.SetDatabaseDefaults();
                        ents.Add(cir114);
                        Circle cir115 = new Circle();
                        cir115.Radius = 0.038;
                        cir115.Center = ptcen1;
                        cir115.SetDatabaseDefaults();
                        ents.Add(cir115);
                        Circle cir116 = new Circle();
                        cir116.Radius = 0.04;
                        cir116.Center = ptcen1;
                        cir116.SetDatabaseDefaults();
                        ents.Add(cir116);

                        Circle cir21 = new Circle();
                        cir21.Radius = 0.01;
                        cir21.Center = ptcen2;
                        cir21.SetDatabaseDefaults();
                        ents.Add(cir21);
                        Circle cir22 = new Circle();
                        cir22.Radius = 0.012;
                        cir22.Center = ptcen2;
                        cir22.SetDatabaseDefaults();
                        ents.Add(cir22);
                        Circle cir23 = new Circle();
                        cir23.Radius = 0.014;
                        cir23.Center = ptcen2;
                        cir23.SetDatabaseDefaults();
                        ents.Add(cir23);
                        Circle cir24 = new Circle();
                        cir24.Radius = 0.016;
                        cir24.Center = ptcen2;
                        cir24.SetDatabaseDefaults();
                        ents.Add(cir24);
                        Circle cir25 = new Circle();
                        cir25.Radius = 0.018;
                        cir25.Center = ptcen2;
                        cir25.SetDatabaseDefaults();
                        ents.Add(cir25);
                        Circle cir26 = new Circle();
                        cir26.Radius = 0.02;
                        cir26.Center = ptcen2;
                        cir26.SetDatabaseDefaults();
                        ents.Add(cir26);
                        Circle cir27 = new Circle();
                        cir27.Radius = 0.022;
                        cir27.Center = ptcen2;
                        cir27.SetDatabaseDefaults();
                        ents.Add(cir27);
                        Circle cir28 = new Circle();
                        cir28.Radius = 0.024;
                        cir28.Center = ptcen2;
                        cir28.SetDatabaseDefaults();
                        ents.Add(cir28);
                        Circle cir29 = new Circle();
                        cir29.Radius = 0.026;
                        cir29.Center = ptcen2;
                        cir29.SetDatabaseDefaults();
                        ents.Add(cir29);
                        Circle cir210 = new Circle();
                        cir210.Radius = 0.028;
                        cir210.Center = ptcen2;
                        cir210.SetDatabaseDefaults();
                        ents.Add(cir210);
                        Circle cir211 = new Circle();
                        cir211.Radius = 0.03;
                        cir211.Center = ptcen2;
                        cir211.SetDatabaseDefaults();
                        ents.Add(cir211);
                        Circle cir212 = new Circle();
                        cir212.Radius = 0.032;
                        cir212.Center = ptcen2;
                        cir212.SetDatabaseDefaults();
                        ents.Add(cir212);
                        Circle cir213 = new Circle();
                        cir213.Radius = 0.034;
                        cir213.Center = ptcen2;
                        cir213.SetDatabaseDefaults();
                        ents.Add(cir213);
                        Circle cir214 = new Circle();
                        cir214.Radius = 0.036;
                        cir214.Center = ptcen2;
                        cir214.SetDatabaseDefaults();
                        ents.Add(cir214);
                        Circle cir215 = new Circle();
                        cir215.Radius = 0.038;
                        cir215.Center = ptcen2;
                        cir215.SetDatabaseDefaults();
                        ents.Add(cir215);
                        Circle cir216 = new Circle();
                        cir216.Radius = 0.04;
                        cir216.Center = ptcen2;
                        cir216.SetDatabaseDefaults();
                        ents.Add(cir216);
                        Point3d endPt = new Point3d(ptcen1.X + 0.0225, ptcen1.Y - 0.033, 0);
                        Point3d startPt = new Point3d(ptcen1.X + 0.0194, ptcen1.Y - 0.035, 0);
                        Point3d startPt1 = new Point3d(startPt.X + 0.005, startPt.Y - 0.005, 0);
                        Point3d endPt1 = new Point3d(endPt.X + 0.005, endPt.Y - 0.007, 0);                        
                        Line ln2 = new Line(startPt,startPt1);
                        Line ln3 = new Line(endPt, endPt1);
                        Line ln4 = new Line(startPt1, new Point3d(startPt1.X - 0.005, startPt1.Y, 0));
                        Line ln5 = new Line(endPt1, new Point3d(endPt1.X + 0.005, endPt1.Y, 0));
                        Line ln6 = new Line(new Point3d(startPt1.X - 0.005, startPt1.Y, 0), new Point3d(startPt1.X - 0.005, startPt1.Y - 0.005, 0));
                        Line ln7 = new Line(new Point3d(endPt1.X + 0.005, endPt1.Y, 0), new Point3d(endPt1.X + 0.005, endPt1.Y - 0.005, 0));
                        Line ln8 = new Line(new Point3d(endPt1.X + 0.005, endPt1.Y - 0.005, 0), new Point3d(startPt1.X - 0.005, startPt1.Y - 0.005, 0));
                        ents.Add(ln2);
                        ents.Add(ln3);
                        ents.Add(ln4);
                        ents.Add(ln5);
                        ents.Add(ln6);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.02;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = new Point3d(ptCenter.X, ptCenter.Y+0.06, 0);

                        txt.Width = 0.25;
                        txt.Height = 0.1;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }

        }

        [CommandMethod("co2exit")]
        public void co2exit()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("CO2_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FIRE/EX"+"\n"+ "ABC(CO2)";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "CO2_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point3d pt1 = new Point3d(ptCenter.X - 0.36, ptCenter.Y + 0.13,0);
                        Point3d pt2 = new Point3d(ptCenter.X - 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt3 = new Point3d(ptCenter.X + 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt4 = new Point3d(ptCenter.X + 0.43, ptCenter.Y - 0.06, 0);
                        Point3d pt5 = new Point3d(ptCenter.X + 0.43, ptCenter.Y + 0.06, 0);
                        Point3d pt6 = new Point3d(ptCenter.X + 0.36, ptCenter.Y + 0.13, 0);
                        Line ln1 = new Line(pt1, pt6);
                        Line ln2 = new Line(pt2, pt3);
                        Line ln3 = new Line(pt4, pt5);
                        CircularArc3d arc1Pnt = new CircularArc3d(pt1, new Point3d(ptCenter.X -0.45, ptCenter.Y, 0), pt2);
                        Arc arc1 = (Arc)Curve.CreateFromGeCurve(arc1Pnt);
                        CircularArc3d arc2Pnt = new CircularArc3d(pt3, new Point3d(ptCenter.X + 0.405, ptCenter.Y-0.11, 0), pt4);
                        Arc arc2 = (Arc)Curve.CreateFromGeCurve(arc2Pnt);
                        CircularArc3d arc3Pnt = new CircularArc3d(pt5, new Point3d(ptCenter.X + 0.405, ptCenter.Y + 0.11, 0), pt6);
                        Arc arc3 = (Arc)Curve.CreateFromGeCurve(arc3Pnt);
                        ents.Add(arc1);
                        ents.Add(arc2);
                        ents.Add(arc3);
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        Point3d pt21 = new Point3d(ptCenter.X - 0.355, ptCenter.Y + 0.105,0);
                        Point3d pt22 = new Point3d(ptCenter.X - 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt23 = new Point3d(ptCenter.X + 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt24 = new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.045, 0);
                        Point3d pt25 = new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.045, 0);
                        Point3d pt26 = new Point3d(ptCenter.X + 0.355, ptCenter.Y + 0.105, 0);
                        Line ln11 = new Line(pt21, pt26);
                        Line ln12 = new Line(pt22, pt23);
                        Line ln13 = new Line(pt24, pt25);
                        CircularArc3d arc11Pnt = new CircularArc3d(pt21, new Point3d(ptCenter.X - 0.425, ptCenter.Y, 0), pt22);
                        Arc arc11 = (Arc)Curve.CreateFromGeCurve(arc11Pnt);
                        CircularArc3d arc12Pnt = new CircularArc3d(pt23, new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.06, 0), pt24);
                        Arc arc12 = (Arc)Curve.CreateFromGeCurve(arc12Pnt);
                        CircularArc3d arc13Pnt = new CircularArc3d(pt25, new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.06, 0), pt26);
                        Arc arc13 = (Arc)Curve.CreateFromGeCurve(arc13Pnt);
                        ents.Add(arc11);
                        ents.Add(arc12);
                        ents.Add(arc13);
                        ents.Add(ln11);
                        ents.Add(ln12);
                        ents.Add(ln13);

                        Polyline pl1 = new Polyline();
                        Point2d pt7=new Point2d(ptCenter.X, ptCenter.Y-0.13);
                        Point2d pt8 = new Point2d(ptCenter.X+0.14, ptCenter.Y - 0.26);
                        Point2d pt9 = new Point2d(ptCenter.X+0.15, ptCenter.Y - 0.24);
                        Point2d pt10 = new Point2d(ptCenter.X+0.03, ptCenter.Y - 0.13);
                        pl1.AddVertexAt(0, pt7, 0, 0, 0);
                        pl1.AddVertexAt(0, pt8, 0, 0, 0);
                        pl1.AddVertexAt(0, pt9, 0, 0, 0);
                        pl1.AddVertexAt(0, pt10, 0, 0, 0);
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Line ln4 = new Line(new Point3d(ptCenter.X + 0.11, ptCenter.Y-0.23, 0), new Point3d(ptCenter.X + 0.12, ptCenter.Y-0.21, 0));
                        ents.Add(ln4);
                        Polyline pl2 = new Polyline();
                        Point2d pt11 = new Point2d(ptCenter.X+0.08, ptCenter.Y - 0.23);
                        Point2d pt12 = new Point2d(ptCenter.X + 0.13, ptCenter.Y - 0.28);
                        Point2d pt13 = new Point2d(ptCenter.X + 0.17, ptCenter.Y - 0.21);
                        Point2d pt14 = new Point2d(ptCenter.X + 0.12, ptCenter.Y - 0.17);
                        pl2.AddVertexAt(0, pt11, 0, 0, 0);
                        pl2.AddVertexAt(1, pt12, 0, 0, 0);
                        pl2.AddVertexAt(2, pt13, 0, 0, 0);
                        pl2.AddVertexAt(3, pt14, 0, 0, 0);
                        pl2.Closed = true;
                        ents.Add(pl2);

                        Polyline pl3 = new Polyline();
                        Point2d pt15 = new Point2d(ptCenter.X + 0.39, ptCenter.Y - 0.12);
                        Point2d pt16 = new Point2d(ptCenter.X + 0.42, ptCenter.Y - 0.15);
                        Point2d pt17 = new Point2d(ptCenter.X + 0.435, ptCenter.Y - 0.13);
                        Point2d pt18 = new Point2d(ptCenter.X + 0.41, ptCenter.Y - 0.105);
                        pl3.AddVertexAt(0, pt15, 0, 0, 0);
                        pl3.AddVertexAt(1, pt16, 0, 0, 0);
                        pl3.AddVertexAt(2, pt17, 0, 0, 0);
                        pl3.AddVertexAt(3, pt18, 0, 0, 0);
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Polyline pl4 = new Polyline();
                        Point2d pt19 = new Point2d(pt4.X + 0.13, pt4.Y);
                        Point2d pt20 = new Point2d(pt5.X + 0.13, pt5.Y);
                        pl4.AddVertexAt(0, new Point2d(pt4.X,pt4.Y), 0, 0, 0);
                        pl4.AddVertexAt(1, pt19, 0, 0, 0);
                        pl4.AddVertexAt(2, pt20, 0, 0, 0);
                        pl4.AddVertexAt(3, new Point2d(pt5.X,pt5.Y), 0, 0, 0);
                        pl4.Closed = true;
                        ents.Add(pl4);
                        Polyline pl5 = new Polyline();
                        Point2d pt27 = new Point2d(pt19.X, ptCenter.Y-0.01);
                        Point2d pt28 = new Point2d(pt19.X +0.06, ptCenter.Y - 0.01);
                        Point2d pt29 = new Point2d(pt19.X + 0.06, ptCenter.Y + 0.01);
                        Point2d pt30 = new Point2d(pt19.X , ptCenter.Y + 0.01);
                        pl5.AddVertexAt(0, pt27, 0, 0, 0);
                        pl5.AddVertexAt(1, pt28, 0, 0, 0);
                        pl5.AddVertexAt(2, pt29, 0, 0, 0);
                        pl5.AddVertexAt(3, pt30, 0, 0, 0);
                        pl5.Closed = true;
                        ents.Add(pl5);
                        Polyline pl6 = new Polyline();
                        Point2d pt31 = new Point2d(pt27.X+0.03, ptCenter.Y - 0.04);
                        Point2d pt32 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.04);
                        Point2d pt33 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.02);
                        Point2d pt34 = new Point2d(pt27.X + 0.03, ptCenter.Y - 0.02);
                        pl6.AddVertexAt(0, pt31, 0, 0, 0);
                        pl6.AddVertexAt(1, pt32, 0, 0, 0);
                        pl6.AddVertexAt(2, pt33, 0, 0, 0);
                        pl6.AddVertexAt(3, pt34, 0, 0, 0);
                        pl6.Closed = true;
                        ents.Add(pl6);
                        Point3d pt35 = new Point3d(pt19.X, ptCenter.Y + 0.22, 0);
                        Point3d pt36 = new Point3d(pt19.X+0.0425, ptCenter.Y, 0);
                        Point3d pt37 = new Point3d(pt19.X+0.0725, ptCenter.Y, 0);
                        Point3d pt38 = new Point3d(pt19.X + 0.02, ptCenter.Y+0.22, 0);
                        Line ln5 = new Line(pt35, pt36);
                        Line ln7 = new Line(pt37, pt38);
                        Line ln8 = new Line(pt38, pt35);
                        ents.Add(ln5);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        Point3d pt39 = new Point3d(pt34.X+0.01, pt34.Y, 0);
                        Point3d pt40 = new Point3d(pt34.X + 0.04, pt34.Y, 0);
                        Point3d pt41 = new Point3d(pt34.X + 0.09, pt34.Y+0.23, 0);
                        Point3d pt42 = new Point3d(pt34.X + 0.06, pt34.Y + 0.23, 0);
                        Line ln9 = new Line(pt39, pt40);
                        Line ln10 = new Line(pt40, pt41);
                        Line ln15 = new Line(pt41, pt42);
                        Line ln16 = new Line(pt42, pt39);
                        ents.Add(ln9);
                        ents.Add(ln10);
                        ents.Add(ln15);
                        ents.Add(ln16);
                        //Point3dCollection ptColl = new Point3dCollection();pl4.AddVertexAt(0, pt4, 0, 0, 0);
                        //ptColl.Add(new Point3d(pt12.X,pt12.Y,0));
                        //ptColl.Add(new Point3d(pt12.X+0.3,pt12.Y-0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 0.6, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.1, pt12.Y - 0.9, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.4, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.7, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.1, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.4, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.5, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.7, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 0.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y , 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.3, pt12.Y+0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y+0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2, pt12.Y+0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y+0.9, 0));
                        //ptColl.Add(new Point3d(pt16.X, pt16.Y, 0));

                        //Vector3d vecTan = new Point3d(0.5, 0.5, 0).GetAsVector();
                        //SpLine acSpLine = new SpLine(ptColl, vecTan, vecTan, 4, 0.0);
                        //ents.Add(acSpLine);
                        Point3d cen = ptCenter;

                        Vector3d nor = Vector3d.ZAxis;
                        Vector3d mAxis = new Vector3d(0.559, -0.36, 0);
                        double rRatio = 0.2;
                        double stAng = -.448;
                        double enAng = 0.229;
                        Ellipse ellipsehose1 = new Ellipse(cen, nor, mAxis, rRatio, stAng, enAng);
                        ents.Add(ellipsehose1);
                        Point3d cen1 = new Point3d(ptCenter.X+0.09,ptCenter.Y-0.05,0);
                        Vector3d nor1 = Vector3d.ZAxis;
                        Vector3d mAxis1 = new Vector3d(0.519, -0.35, 0);
                        double rRatio1 = 0.24;
                        double stAng1 = -.738;
                        double enAng1 = 0.382;
                        Ellipse ellipsehose2 = new Ellipse(cen1, nor1, mAxis1, rRatio1, stAng1, enAng1);
                        ents.Add(ellipsehose2);

                        Point3d center = new Point3d(pt28.X,ptCenter.Y,0);
                        Vector3d normal = Vector3d.ZAxis;
                        Vector3d majorAxis = new Vector3d(0, 0.02, 0);
                        double radiusRatio = 0.4;
                        double startAng = 0;
                        double endAng = Math.PI*2;
                        Ellipse ellipse = new Ellipse(center, normal, majorAxis, radiusRatio, startAng, endAng);
                        ents.Add(ellipse);
                        Point3d center1 = new Point3d(pt28.X, ptCenter.Y, 0);
                        Vector3d normal1 = Vector3d.ZAxis;
                        Vector3d majorAxis1 = new Vector3d(0, 0.1, 0);
                        double radiusRatio1 = 0.4;
                        double startAng1 = 0;
                        double endAng1 = Math.PI * 2;
                        Ellipse ellipse1 = new Ellipse(center1, normal1, majorAxis1, radiusRatio1, startAng1, endAng1);
                        ents.Add(ellipse1);

                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.5;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("waterco2")]
        public void waterco2()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("CO2_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FIRE/EX" + "\n" + "WATER+CO2";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "CO2_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point3d pt1 = new Point3d(ptCenter.X - 0.36, ptCenter.Y + 0.13, 0);
                        Point3d pt2 = new Point3d(ptCenter.X - 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt3 = new Point3d(ptCenter.X + 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt4 = new Point3d(ptCenter.X + 0.43, ptCenter.Y - 0.06, 0);
                        Point3d pt5 = new Point3d(ptCenter.X + 0.43, ptCenter.Y + 0.06, 0);
                        Point3d pt6 = new Point3d(ptCenter.X + 0.36, ptCenter.Y + 0.13, 0);
                        Line ln1 = new Line(pt1, pt6);
                        Line ln2 = new Line(pt2, pt3);
                        Line ln3 = new Line(pt4, pt5);
                        CircularArc3d arc1Pnt = new CircularArc3d(pt1, new Point3d(ptCenter.X - 0.45, ptCenter.Y, 0), pt2);
                        Arc arc1 = (Arc)Curve.CreateFromGeCurve(arc1Pnt);
                        CircularArc3d arc2Pnt = new CircularArc3d(pt3, new Point3d(ptCenter.X + 0.405, ptCenter.Y - 0.11, 0), pt4);
                        Arc arc2 = (Arc)Curve.CreateFromGeCurve(arc2Pnt);
                        CircularArc3d arc3Pnt = new CircularArc3d(pt5, new Point3d(ptCenter.X + 0.405, ptCenter.Y + 0.11, 0), pt6);
                        Arc arc3 = (Arc)Curve.CreateFromGeCurve(arc3Pnt);
                        ents.Add(arc1);
                        ents.Add(arc2);
                        ents.Add(arc3);
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        Point3d pt21 = new Point3d(ptCenter.X - 0.355, ptCenter.Y + 0.105, 0);
                        Point3d pt22 = new Point3d(ptCenter.X - 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt23 = new Point3d(ptCenter.X + 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt24 = new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.045, 0);
                        Point3d pt25 = new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.045, 0);
                        Point3d pt26 = new Point3d(ptCenter.X + 0.355, ptCenter.Y + 0.105, 0);
                        Line ln11 = new Line(pt21, pt26);
                        Line ln12 = new Line(pt22, pt23);
                        Line ln13 = new Line(pt24, pt25);
                        CircularArc3d arc11Pnt = new CircularArc3d(pt21, new Point3d(ptCenter.X - 0.425, ptCenter.Y, 0), pt22);
                        Arc arc11 = (Arc)Curve.CreateFromGeCurve(arc11Pnt);
                        CircularArc3d arc12Pnt = new CircularArc3d(pt23, new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.06, 0), pt24);
                        Arc arc12 = (Arc)Curve.CreateFromGeCurve(arc12Pnt);
                        CircularArc3d arc13Pnt = new CircularArc3d(pt25, new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.06, 0), pt26);
                        Arc arc13 = (Arc)Curve.CreateFromGeCurve(arc13Pnt);
                        ents.Add(arc11);
                        ents.Add(arc12);
                        ents.Add(arc13);
                        ents.Add(ln11);
                        ents.Add(ln12);
                        ents.Add(ln13);

                        Polyline pl1 = new Polyline();
                        Point2d pt7 = new Point2d(ptCenter.X, ptCenter.Y - 0.13);
                        Point2d pt8 = new Point2d(ptCenter.X + 0.14, ptCenter.Y - 0.26);
                        Point2d pt9 = new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.24);
                        Point2d pt10 = new Point2d(ptCenter.X + 0.03, ptCenter.Y - 0.13);
                        pl1.AddVertexAt(0, pt7, 0, 0, 0);
                        pl1.AddVertexAt(0, pt8, 0, 0, 0);
                        pl1.AddVertexAt(0, pt9, 0, 0, 0);
                        pl1.AddVertexAt(0, pt10, 0, 0, 0);
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Line ln4 = new Line(new Point3d(ptCenter.X + 0.11, ptCenter.Y - 0.23, 0), new Point3d(ptCenter.X + 0.12, ptCenter.Y - 0.21, 0));
                        ents.Add(ln4);
                        Polyline pl2 = new Polyline();
                        Point2d pt11 = new Point2d(ptCenter.X + 0.08, ptCenter.Y - 0.23);
                        Point2d pt12 = new Point2d(ptCenter.X + 0.13, ptCenter.Y - 0.28);
                        Point2d pt13 = new Point2d(ptCenter.X + 0.17, ptCenter.Y - 0.21);
                        Point2d pt14 = new Point2d(ptCenter.X + 0.12, ptCenter.Y - 0.17);
                        pl2.AddVertexAt(0, pt11, 0, 0, 0);
                        pl2.AddVertexAt(1, pt12, 0, 0, 0);
                        pl2.AddVertexAt(2, pt13, 0, 0, 0);
                        pl2.AddVertexAt(3, pt14, 0, 0, 0);
                        pl2.Closed = true;
                        ents.Add(pl2);

                        Polyline pl3 = new Polyline();
                        Point2d pt15 = new Point2d(ptCenter.X + 0.39, ptCenter.Y - 0.12);
                        Point2d pt16 = new Point2d(ptCenter.X + 0.42, ptCenter.Y - 0.15);
                        Point2d pt17 = new Point2d(ptCenter.X + 0.435, ptCenter.Y - 0.13);
                        Point2d pt18 = new Point2d(ptCenter.X + 0.41, ptCenter.Y - 0.105);
                        pl3.AddVertexAt(0, pt15, 0, 0, 0);
                        pl3.AddVertexAt(1, pt16, 0, 0, 0);
                        pl3.AddVertexAt(2, pt17, 0, 0, 0);
                        pl3.AddVertexAt(3, pt18, 0, 0, 0);
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Polyline pl4 = new Polyline();
                        Point2d pt19 = new Point2d(pt4.X + 0.13, pt4.Y);
                        Point2d pt20 = new Point2d(pt5.X + 0.13, pt5.Y);
                        pl4.AddVertexAt(0, new Point2d(pt4.X, pt4.Y), 0, 0, 0);
                        pl4.AddVertexAt(1, pt19, 0, 0, 0);
                        pl4.AddVertexAt(2, pt20, 0, 0, 0);
                        pl4.AddVertexAt(3, new Point2d(pt5.X, pt5.Y), 0, 0, 0);
                        pl4.Closed = true;
                        ents.Add(pl4);
                        Polyline pl5 = new Polyline();
                        Point2d pt27 = new Point2d(pt19.X, ptCenter.Y - 0.01);
                        Point2d pt28 = new Point2d(pt19.X + 0.06, ptCenter.Y - 0.01);
                        Point2d pt29 = new Point2d(pt19.X + 0.06, ptCenter.Y + 0.01);
                        Point2d pt30 = new Point2d(pt19.X, ptCenter.Y + 0.01);
                        pl5.AddVertexAt(0, pt27, 0, 0, 0);
                        pl5.AddVertexAt(1, pt28, 0, 0, 0);
                        pl5.AddVertexAt(2, pt29, 0, 0, 0);
                        pl5.AddVertexAt(3, pt30, 0, 0, 0);
                        pl5.Closed = true;
                        ents.Add(pl5);
                        Polyline pl6 = new Polyline();
                        Point2d pt31 = new Point2d(pt27.X + 0.03, ptCenter.Y - 0.04);
                        Point2d pt32 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.04);
                        Point2d pt33 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.02);
                        Point2d pt34 = new Point2d(pt27.X + 0.03, ptCenter.Y - 0.02);
                        pl6.AddVertexAt(0, pt31, 0, 0, 0);
                        pl6.AddVertexAt(1, pt32, 0, 0, 0);
                        pl6.AddVertexAt(2, pt33, 0, 0, 0);
                        pl6.AddVertexAt(3, pt34, 0, 0, 0);
                        pl6.Closed = true;
                        ents.Add(pl6);
                        Point3d pt35 = new Point3d(pt19.X, ptCenter.Y + 0.22, 0);
                        Point3d pt36 = new Point3d(pt19.X + 0.0425, ptCenter.Y, 0);
                        Point3d pt37 = new Point3d(pt19.X + 0.0725, ptCenter.Y, 0);
                        Point3d pt38 = new Point3d(pt19.X + 0.02, ptCenter.Y + 0.22, 0);
                        Line ln5 = new Line(pt35, pt36);
                        Line ln7 = new Line(pt37, pt38);
                        Line ln8 = new Line(pt38, pt35);
                        ents.Add(ln5);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        Point3d pt39 = new Point3d(pt34.X + 0.01, pt34.Y, 0);
                        Point3d pt40 = new Point3d(pt34.X + 0.04, pt34.Y, 0);
                        Point3d pt41 = new Point3d(pt34.X + 0.09, pt34.Y + 0.23, 0);
                        Point3d pt42 = new Point3d(pt34.X + 0.06, pt34.Y + 0.23, 0);
                        Line ln9 = new Line(pt39, pt40);
                        Line ln10 = new Line(pt40, pt41);
                        Line ln15 = new Line(pt41, pt42);
                        Line ln16 = new Line(pt42, pt39);
                        ents.Add(ln9);
                        ents.Add(ln10);
                        ents.Add(ln15);
                        ents.Add(ln16);
                        //Point3dCollection ptColl = new Point3dCollection();pl4.AddVertexAt(0, pt4, 0, 0, 0);
                        //ptColl.Add(new Point3d(pt12.X,pt12.Y,0));
                        //ptColl.Add(new Point3d(pt12.X+0.3,pt12.Y-0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 0.6, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.1, pt12.Y - 0.9, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.4, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.7, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.1, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.4, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.5, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.7, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 0.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y , 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.3, pt12.Y+0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y+0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2, pt12.Y+0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y+0.9, 0));
                        //ptColl.Add(new Point3d(pt16.X, pt16.Y, 0));

                        //Vector3d vecTan = new Point3d(0.5, 0.5, 0).GetAsVector();
                        //SpLine acSpLine = new SpLine(ptColl, vecTan, vecTan, 4, 0.0);
                        //ents.Add(acSpLine);
                        Point3d cen = ptCenter;

                        Vector3d nor = Vector3d.ZAxis;
                        Vector3d mAxis = new Vector3d(0.559, -0.36, 0);
                        double rRatio = 0.2;
                        double stAng = -.448;
                        double enAng = 0.229;
                        Ellipse ellipsehose1 = new Ellipse(cen, nor, mAxis, rRatio, stAng, enAng);
                        ents.Add(ellipsehose1);
                        Point3d cen1 = new Point3d(ptCenter.X + 0.09, ptCenter.Y - 0.05, 0);
                        Vector3d nor1 = Vector3d.ZAxis;
                        Vector3d mAxis1 = new Vector3d(0.519, -0.35, 0);
                        double rRatio1 = 0.24;
                        double stAng1 = -.738;
                        double enAng1 = 0.382;
                        Ellipse ellipsehose2 = new Ellipse(cen1, nor1, mAxis1, rRatio1, stAng1, enAng1);
                        ents.Add(ellipsehose2);

                        Point3d center = new Point3d(pt28.X, ptCenter.Y, 0);
                        Vector3d normal = Vector3d.ZAxis;
                        Vector3d majorAxis = new Vector3d(0, 0.02, 0);
                        double radiusRatio = 0.4;
                        double startAng = 0;
                        double endAng = Math.PI * 2;
                        Ellipse ellipse = new Ellipse(center, normal, majorAxis, radiusRatio, startAng, endAng);
                        ents.Add(ellipse);
                        Point3d center1 = new Point3d(pt28.X, ptCenter.Y, 0);
                        Vector3d normal1 = Vector3d.ZAxis;
                        Vector3d majorAxis1 = new Vector3d(0, 0.1, 0);
                        double radiusRatio1 = 0.4;
                        double startAng1 = 0;
                        double endAng1 = Math.PI * 2;
                        Ellipse ellipse1 = new Ellipse(center1, normal1, majorAxis1, radiusRatio1, startAng1, endAng1);
                        ents.Add(ellipse1);

                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.5;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("fire45fflext")]
        public void fire45fflext()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("CO24.5Kgs_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FIRE/EX" + "\n" + "CO2";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "CO24.5Kgs_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point3d pt1 = new Point3d(ptCenter.X - 0.36, ptCenter.Y + 0.13, 0);
                        Point3d pt2 = new Point3d(ptCenter.X - 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt3 = new Point3d(ptCenter.X + 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt4 = new Point3d(ptCenter.X + 0.43, ptCenter.Y - 0.06, 0);
                        Point3d pt5 = new Point3d(ptCenter.X + 0.43, ptCenter.Y + 0.06, 0);
                        Point3d pt6 = new Point3d(ptCenter.X + 0.36, ptCenter.Y + 0.13, 0);
                        Line ln1 = new Line(pt1, pt6);
                        Line ln2 = new Line(pt2, pt3);
                        Line ln3 = new Line(pt4, pt5);
                        CircularArc3d arc1Pnt = new CircularArc3d(pt1, new Point3d(ptCenter.X - 0.45, ptCenter.Y, 0), pt2);
                        Arc arc1 = (Arc)Curve.CreateFromGeCurve(arc1Pnt);
                        CircularArc3d arc2Pnt = new CircularArc3d(pt3, new Point3d(ptCenter.X + 0.405, ptCenter.Y - 0.11, 0), pt4);
                        Arc arc2 = (Arc)Curve.CreateFromGeCurve(arc2Pnt);
                        CircularArc3d arc3Pnt = new CircularArc3d(pt5, new Point3d(ptCenter.X + 0.405, ptCenter.Y + 0.11, 0), pt6);
                        Arc arc3 = (Arc)Curve.CreateFromGeCurve(arc3Pnt);
                        ents.Add(arc1);
                        ents.Add(arc2);
                        ents.Add(arc3);
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        Point3d pt21 = new Point3d(ptCenter.X - 0.355, ptCenter.Y + 0.105, 0);
                        Point3d pt22 = new Point3d(ptCenter.X - 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt23 = new Point3d(ptCenter.X + 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt24 = new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.045, 0);
                        Point3d pt25 = new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.045, 0);
                        Point3d pt26 = new Point3d(ptCenter.X + 0.355, ptCenter.Y + 0.105, 0);
                        Line ln11 = new Line(pt21, pt26);
                        Line ln12 = new Line(pt22, pt23);
                        Line ln13 = new Line(pt24, pt25);
                        CircularArc3d arc11Pnt = new CircularArc3d(pt21, new Point3d(ptCenter.X - 0.425, ptCenter.Y, 0), pt22);
                        Arc arc11 = (Arc)Curve.CreateFromGeCurve(arc11Pnt);
                        CircularArc3d arc12Pnt = new CircularArc3d(pt23, new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.06, 0), pt24);
                        Arc arc12 = (Arc)Curve.CreateFromGeCurve(arc12Pnt);
                        CircularArc3d arc13Pnt = new CircularArc3d(pt25, new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.06, 0), pt26);
                        Arc arc13 = (Arc)Curve.CreateFromGeCurve(arc13Pnt);
                        ents.Add(arc11);
                        ents.Add(arc12);
                        ents.Add(arc13);
                        ents.Add(ln11);
                        ents.Add(ln12);
                        ents.Add(ln13);

                        Polyline pl1 = new Polyline();
                        Point2d pt7 = new Point2d(ptCenter.X, ptCenter.Y - 0.13);
                        Point2d pt8 = new Point2d(ptCenter.X + 0.14, ptCenter.Y - 0.26);
                        Point2d pt9 = new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.24);
                        Point2d pt10 = new Point2d(ptCenter.X + 0.03, ptCenter.Y - 0.13);
                        pl1.AddVertexAt(0, pt7, 0, 0, 0);
                        pl1.AddVertexAt(0, pt8, 0, 0, 0);
                        pl1.AddVertexAt(0, pt9, 0, 0, 0);
                        pl1.AddVertexAt(0, pt10, 0, 0, 0);
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Line ln4 = new Line(new Point3d(ptCenter.X + 0.11, ptCenter.Y - 0.23, 0), new Point3d(ptCenter.X + 0.12, ptCenter.Y - 0.21, 0));
                        ents.Add(ln4);
                        Polyline pl2 = new Polyline();
                        Point2d pt11 = new Point2d(ptCenter.X + 0.08, ptCenter.Y - 0.23);
                        Point2d pt12 = new Point2d(ptCenter.X + 0.13, ptCenter.Y - 0.28);
                        Point2d pt13 = new Point2d(ptCenter.X + 0.17, ptCenter.Y - 0.21);
                        Point2d pt14 = new Point2d(ptCenter.X + 0.12, ptCenter.Y - 0.17);
                        pl2.AddVertexAt(0, pt11, 0, 0, 0);
                        pl2.AddVertexAt(1, pt12, 0, 0, 0);
                        pl2.AddVertexAt(2, pt13, 0, 0, 0);
                        pl2.AddVertexAt(3, pt14, 0, 0, 0);
                        pl2.Closed = true;
                        ents.Add(pl2);

                        Polyline pl3 = new Polyline();
                        Point2d pt15 = new Point2d(ptCenter.X + 0.39, ptCenter.Y - 0.12);
                        Point2d pt16 = new Point2d(ptCenter.X + 0.42, ptCenter.Y - 0.15);
                        Point2d pt17 = new Point2d(ptCenter.X + 0.435, ptCenter.Y - 0.13);
                        Point2d pt18 = new Point2d(ptCenter.X + 0.41, ptCenter.Y - 0.105);
                        pl3.AddVertexAt(0, pt15, 0, 0, 0);
                        pl3.AddVertexAt(1, pt16, 0, 0, 0);
                        pl3.AddVertexAt(2, pt17, 0, 0, 0);
                        pl3.AddVertexAt(3, pt18, 0, 0, 0);
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Polyline pl4 = new Polyline();
                        Point2d pt19 = new Point2d(pt4.X + 0.13, pt4.Y);
                        Point2d pt20 = new Point2d(pt5.X + 0.13, pt5.Y);
                        pl4.AddVertexAt(0, new Point2d(pt4.X, pt4.Y), 0, 0, 0);
                        pl4.AddVertexAt(1, pt19, 0, 0, 0);
                        pl4.AddVertexAt(2, pt20, 0, 0, 0);
                        pl4.AddVertexAt(3, new Point2d(pt5.X, pt5.Y), 0, 0, 0);
                        pl4.Closed = true;
                        ents.Add(pl4);
                        Polyline pl5 = new Polyline();
                        Point2d pt27 = new Point2d(pt19.X, ptCenter.Y - 0.01);
                        Point2d pt28 = new Point2d(pt19.X + 0.06, ptCenter.Y - 0.01);
                        Point2d pt29 = new Point2d(pt19.X + 0.06, ptCenter.Y + 0.01);
                        Point2d pt30 = new Point2d(pt19.X, ptCenter.Y + 0.01);
                        pl5.AddVertexAt(0, pt27, 0, 0, 0);
                        pl5.AddVertexAt(1, pt28, 0, 0, 0);
                        pl5.AddVertexAt(2, pt29, 0, 0, 0);
                        pl5.AddVertexAt(3, pt30, 0, 0, 0);
                        pl5.Closed = true;
                        ents.Add(pl5);
                        Polyline pl6 = new Polyline();
                        Point2d pt31 = new Point2d(pt27.X + 0.03, ptCenter.Y - 0.04);
                        Point2d pt32 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.04);
                        Point2d pt33 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.02);
                        Point2d pt34 = new Point2d(pt27.X + 0.03, ptCenter.Y - 0.02);
                        pl6.AddVertexAt(0, pt31, 0, 0, 0);
                        pl6.AddVertexAt(1, pt32, 0, 0, 0);
                        pl6.AddVertexAt(2, pt33, 0, 0, 0);
                        pl6.AddVertexAt(3, pt34, 0, 0, 0);
                        pl6.Closed = true;
                        ents.Add(pl6);
                        Point3d pt35 = new Point3d(pt19.X, ptCenter.Y + 0.22, 0);
                        Point3d pt36 = new Point3d(pt19.X + 0.0425, ptCenter.Y, 0);
                        Point3d pt37 = new Point3d(pt19.X + 0.0725, ptCenter.Y, 0);
                        Point3d pt38 = new Point3d(pt19.X + 0.02, ptCenter.Y + 0.22, 0);
                        Line ln5 = new Line(pt35, pt36);
                        Line ln7 = new Line(pt37, pt38);
                        Line ln8 = new Line(pt38, pt35);
                        ents.Add(ln5);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        Point3d pt39 = new Point3d(pt34.X + 0.01, pt34.Y, 0);
                        Point3d pt40 = new Point3d(pt34.X + 0.04, pt34.Y, 0);
                        Point3d pt41 = new Point3d(pt34.X + 0.09, pt34.Y + 0.23, 0);
                        Point3d pt42 = new Point3d(pt34.X + 0.06, pt34.Y + 0.23, 0);
                        Line ln9 = new Line(pt39, pt40);
                        Line ln10 = new Line(pt40, pt41);
                        Line ln15 = new Line(pt41, pt42);
                        Line ln16 = new Line(pt42, pt39);
                        ents.Add(ln9);
                        ents.Add(ln10);
                        ents.Add(ln15);
                        ents.Add(ln16);
                        //Point3dCollection ptColl = new Point3dCollection();pl4.AddVertexAt(0, pt4, 0, 0, 0);
                        //ptColl.Add(new Point3d(pt12.X,pt12.Y,0));
                        //ptColl.Add(new Point3d(pt12.X+0.3,pt12.Y-0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 0.6, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.1, pt12.Y - 0.9, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.4, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.7, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.1, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.4, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.5, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.7, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 0.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y , 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.3, pt12.Y+0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y+0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2, pt12.Y+0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y+0.9, 0));
                        //ptColl.Add(new Point3d(pt16.X, pt16.Y, 0));

                        //Vector3d vecTan = new Point3d(0.5, 0.5, 0).GetAsVector();
                        //SpLine acSpLine = new SpLine(ptColl, vecTan, vecTan, 4, 0.0);
                        //ents.Add(acSpLine);
                        Point3d cen = ptCenter;

                        Vector3d nor = Vector3d.ZAxis;
                        Vector3d mAxis = new Vector3d(0.559, -0.36, 0);
                        double rRatio = 0.2;
                        double stAng = -.448;
                        double enAng = 0.229;
                        Ellipse ellipsehose1 = new Ellipse(cen, nor, mAxis, rRatio, stAng, enAng);
                        ents.Add(ellipsehose1);
                        Point3d cen1 = new Point3d(ptCenter.X + 0.09, ptCenter.Y - 0.05, 0);
                        Vector3d nor1 = Vector3d.ZAxis;
                        Vector3d mAxis1 = new Vector3d(0.519, -0.35, 0);
                        double rRatio1 = 0.24;
                        double stAng1 = -.738;
                        double enAng1 = 0.382;
                        Ellipse ellipsehose2 = new Ellipse(cen1, nor1, mAxis1, rRatio1, stAng1, enAng1);
                        ents.Add(ellipsehose2);

                        Point3d center = new Point3d(pt28.X, ptCenter.Y, 0);
                        Vector3d normal = Vector3d.ZAxis;
                        Vector3d majorAxis = new Vector3d(0, 0.02, 0);
                        double radiusRatio = 0.4;
                        double startAng = 0;
                        double endAng = Math.PI * 2;
                        Ellipse ellipse = new Ellipse(center, normal, majorAxis, radiusRatio, startAng, endAng);
                        ents.Add(ellipse);
                        Point3d center1 = new Point3d(pt28.X, ptCenter.Y, 0);
                        Vector3d normal1 = Vector3d.ZAxis;
                        Vector3d majorAxis1 = new Vector3d(0, 0.1, 0);
                        double radiusRatio1 = 0.4;
                        double startAng1 = 0;
                        double endAng1 = Math.PI * 2;
                        Ellipse ellipse1 = new Ellipse(center1, normal1, majorAxis1, radiusRatio1, startAng1, endAng1);
                        ents.Add(ellipse1);

                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.5;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }

        [CommandMethod("fire4ffl")]
        public void fire4ffl()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            int ptcount = 0;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForRead);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("CO24.0Kgs_Fire Fighting Installation"))
                        {
                            ptcount++;
                        }
                    }
                }
                tr.Commit();
            }
            ptcount++;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "FIRE/EX" + "\n" + "ABC";
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    try
                    {
                        BlockTable acBlkTbl;
                        acBlkTbl = tr.GetObject(db.BlockTableId,
                                                     OpenMode.ForRead) as BlockTable;
                        BlockTableRecord acBlkTblRec = new BlockTableRecord();
                        acBlkTblRec.Name = "CO24.0Kgs_Fire Fighting Installation" + System.DateTime.Now.Minute.ToString()
                            + System.DateTime.Now.Second.ToString() + ptcount.ToString();
                        acBlkTblRec.Origin = ptCenter;
                        acBlkTbl.UpgradeOpen();
                        ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                        tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                        DBObjectCollection ents = new DBObjectCollection();
                        Point3d pt1 = new Point3d(ptCenter.X - 0.36, ptCenter.Y + 0.13, 0);
                        Point3d pt2 = new Point3d(ptCenter.X - 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt3 = new Point3d(ptCenter.X + 0.36, ptCenter.Y - 0.13, 0);
                        Point3d pt4 = new Point3d(ptCenter.X + 0.43, ptCenter.Y - 0.06, 0);
                        Point3d pt5 = new Point3d(ptCenter.X + 0.43, ptCenter.Y + 0.06, 0);
                        Point3d pt6 = new Point3d(ptCenter.X + 0.36, ptCenter.Y + 0.13, 0);
                        Line ln1 = new Line(pt1, pt6);
                        Line ln2 = new Line(pt2, pt3);
                        Line ln3 = new Line(pt4, pt5);
                        CircularArc3d arc1Pnt = new CircularArc3d(pt1, new Point3d(ptCenter.X - 0.45, ptCenter.Y, 0), pt2);
                        Arc arc1 = (Arc)Curve.CreateFromGeCurve(arc1Pnt);
                        CircularArc3d arc2Pnt = new CircularArc3d(pt3, new Point3d(ptCenter.X + 0.405, ptCenter.Y - 0.11, 0), pt4);
                        Arc arc2 = (Arc)Curve.CreateFromGeCurve(arc2Pnt);
                        CircularArc3d arc3Pnt = new CircularArc3d(pt5, new Point3d(ptCenter.X + 0.405, ptCenter.Y + 0.11, 0), pt6);
                        Arc arc3 = (Arc)Curve.CreateFromGeCurve(arc3Pnt);
                        ents.Add(arc1);
                        ents.Add(arc2);
                        ents.Add(arc3);
                        ents.Add(ln1);
                        ents.Add(ln2);
                        ents.Add(ln3);
                        Point3d pt21 = new Point3d(ptCenter.X - 0.355, ptCenter.Y + 0.105, 0);
                        Point3d pt22 = new Point3d(ptCenter.X - 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt23 = new Point3d(ptCenter.X + 0.355, ptCenter.Y - 0.105, 0);
                        Point3d pt24 = new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.045, 0);
                        Point3d pt25 = new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.045, 0);
                        Point3d pt26 = new Point3d(ptCenter.X + 0.355, ptCenter.Y + 0.105, 0);
                        Line ln11 = new Line(pt21, pt26);
                        Line ln12 = new Line(pt22, pt23);
                        Line ln13 = new Line(pt24, pt25);
                        CircularArc3d arc11Pnt = new CircularArc3d(pt21, new Point3d(ptCenter.X - 0.425, ptCenter.Y, 0), pt22);
                        Arc arc11 = (Arc)Curve.CreateFromGeCurve(arc11Pnt);
                        CircularArc3d arc12Pnt = new CircularArc3d(pt23, new Point3d(ptCenter.X + 0.415, ptCenter.Y - 0.06, 0), pt24);
                        Arc arc12 = (Arc)Curve.CreateFromGeCurve(arc12Pnt);
                        CircularArc3d arc13Pnt = new CircularArc3d(pt25, new Point3d(ptCenter.X + 0.415, ptCenter.Y + 0.06, 0), pt26);
                        Arc arc13 = (Arc)Curve.CreateFromGeCurve(arc13Pnt);
                        ents.Add(arc11);
                        ents.Add(arc12);
                        ents.Add(arc13);
                        ents.Add(ln11);
                        ents.Add(ln12);
                        ents.Add(ln13);

                        Polyline pl1 = new Polyline();
                        Point2d pt7 = new Point2d(ptCenter.X, ptCenter.Y - 0.13);
                        Point2d pt8 = new Point2d(ptCenter.X + 0.14, ptCenter.Y - 0.26);
                        Point2d pt9 = new Point2d(ptCenter.X + 0.15, ptCenter.Y - 0.24);
                        Point2d pt10 = new Point2d(ptCenter.X + 0.03, ptCenter.Y - 0.13);
                        pl1.AddVertexAt(0, pt7, 0, 0, 0);
                        pl1.AddVertexAt(0, pt8, 0, 0, 0);
                        pl1.AddVertexAt(0, pt9, 0, 0, 0);
                        pl1.AddVertexAt(0, pt10, 0, 0, 0);
                        pl1.Closed = true;
                        ents.Add(pl1);
                        Line ln4 = new Line(new Point3d(ptCenter.X + 0.11, ptCenter.Y - 0.23, 0), new Point3d(ptCenter.X + 0.12, ptCenter.Y - 0.21, 0));
                        ents.Add(ln4);
                        Polyline pl2 = new Polyline();
                        Point2d pt11 = new Point2d(ptCenter.X + 0.08, ptCenter.Y - 0.23);
                        Point2d pt12 = new Point2d(ptCenter.X + 0.13, ptCenter.Y - 0.28);
                        Point2d pt13 = new Point2d(ptCenter.X + 0.17, ptCenter.Y - 0.21);
                        Point2d pt14 = new Point2d(ptCenter.X + 0.12, ptCenter.Y - 0.17);
                        pl2.AddVertexAt(0, pt11, 0, 0, 0);
                        pl2.AddVertexAt(1, pt12, 0, 0, 0);
                        pl2.AddVertexAt(2, pt13, 0, 0, 0);
                        pl2.AddVertexAt(3, pt14, 0, 0, 0);
                        pl2.Closed = true;
                        ents.Add(pl2);

                        Polyline pl3 = new Polyline();
                        Point2d pt15 = new Point2d(ptCenter.X + 0.39, ptCenter.Y - 0.12);
                        Point2d pt16 = new Point2d(ptCenter.X + 0.42, ptCenter.Y - 0.15);
                        Point2d pt17 = new Point2d(ptCenter.X + 0.435, ptCenter.Y - 0.13);
                        Point2d pt18 = new Point2d(ptCenter.X + 0.41, ptCenter.Y - 0.105);
                        pl3.AddVertexAt(0, pt15, 0, 0, 0);
                        pl3.AddVertexAt(1, pt16, 0, 0, 0);
                        pl3.AddVertexAt(2, pt17, 0, 0, 0);
                        pl3.AddVertexAt(3, pt18, 0, 0, 0);
                        pl3.Closed = true;
                        ents.Add(pl3);
                        Polyline pl4 = new Polyline();
                        Point2d pt19 = new Point2d(pt4.X + 0.13, pt4.Y);
                        Point2d pt20 = new Point2d(pt5.X + 0.13, pt5.Y);
                        pl4.AddVertexAt(0, new Point2d(pt4.X, pt4.Y), 0, 0, 0);
                        pl4.AddVertexAt(1, pt19, 0, 0, 0);
                        pl4.AddVertexAt(2, pt20, 0, 0, 0);
                        pl4.AddVertexAt(3, new Point2d(pt5.X, pt5.Y), 0, 0, 0);
                        pl4.Closed = true;
                        ents.Add(pl4);
                        Polyline pl5 = new Polyline();
                        Point2d pt27 = new Point2d(pt19.X, ptCenter.Y - 0.01);
                        Point2d pt28 = new Point2d(pt19.X + 0.06, ptCenter.Y - 0.01);
                        Point2d pt29 = new Point2d(pt19.X + 0.06, ptCenter.Y + 0.01);
                        Point2d pt30 = new Point2d(pt19.X, ptCenter.Y + 0.01);
                        pl5.AddVertexAt(0, pt27, 0, 0, 0);
                        pl5.AddVertexAt(1, pt28, 0, 0, 0);
                        pl5.AddVertexAt(2, pt29, 0, 0, 0);
                        pl5.AddVertexAt(3, pt30, 0, 0, 0);
                        pl5.Closed = true;
                        ents.Add(pl5);
                        Polyline pl6 = new Polyline();
                        Point2d pt31 = new Point2d(pt27.X + 0.03, ptCenter.Y - 0.04);
                        Point2d pt32 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.04);
                        Point2d pt33 = new Point2d(pt27.X + 0.08, ptCenter.Y - 0.02);
                        Point2d pt34 = new Point2d(pt27.X + 0.03, ptCenter.Y - 0.02);
                        pl6.AddVertexAt(0, pt31, 0, 0, 0);
                        pl6.AddVertexAt(1, pt32, 0, 0, 0);
                        pl6.AddVertexAt(2, pt33, 0, 0, 0);
                        pl6.AddVertexAt(3, pt34, 0, 0, 0);
                        pl6.Closed = true;
                        ents.Add(pl6);
                        Point3d pt35 = new Point3d(pt19.X, ptCenter.Y + 0.22, 0);
                        Point3d pt36 = new Point3d(pt19.X + 0.0425, ptCenter.Y, 0);
                        Point3d pt37 = new Point3d(pt19.X + 0.0725, ptCenter.Y, 0);
                        Point3d pt38 = new Point3d(pt19.X + 0.02, ptCenter.Y + 0.22, 0);
                        Line ln5 = new Line(pt35, pt36);
                        Line ln7 = new Line(pt37, pt38);
                        Line ln8 = new Line(pt38, pt35);
                        ents.Add(ln5);
                        ents.Add(ln7);
                        ents.Add(ln8);
                        Point3d pt39 = new Point3d(pt34.X + 0.01, pt34.Y, 0);
                        Point3d pt40 = new Point3d(pt34.X + 0.04, pt34.Y, 0);
                        Point3d pt41 = new Point3d(pt34.X + 0.09, pt34.Y + 0.23, 0);
                        Point3d pt42 = new Point3d(pt34.X + 0.06, pt34.Y + 0.23, 0);
                        Line ln9 = new Line(pt39, pt40);
                        Line ln10 = new Line(pt40, pt41);
                        Line ln15 = new Line(pt41, pt42);
                        Line ln16 = new Line(pt42, pt39);
                        ents.Add(ln9);
                        ents.Add(ln10);
                        ents.Add(ln15);
                        ents.Add(ln16);
                        //Point3dCollection ptColl = new Point3dCollection();pl4.AddVertexAt(0, pt4, 0, 0, 0);
                        //ptColl.Add(new Point3d(pt12.X,pt12.Y,0));
                        //ptColl.Add(new Point3d(pt12.X+0.3,pt12.Y-0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 0.6, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.1, pt12.Y - 0.9, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.4, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.7, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.1, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y - 1.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.4, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.5, pt12.Y - 1.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 1.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 1.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.8, pt12.Y - 0.7, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.7, pt12.Y - 0.4, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y - 0.1, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.6, pt12.Y , 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.3, pt12.Y+0.3, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2.2, pt12.Y+0.5, 0));
                        //ptColl.Add(new Point3d(pt12.X + 2, pt12.Y+0.8, 0));
                        //ptColl.Add(new Point3d(pt12.X + 1.9, pt12.Y+0.9, 0));
                        //ptColl.Add(new Point3d(pt16.X, pt16.Y, 0));

                        //Vector3d vecTan = new Point3d(0.5, 0.5, 0).GetAsVector();
                        //SpLine acSpLine = new SpLine(ptColl, vecTan, vecTan, 4, 0.0);
                        //ents.Add(acSpLine);
                        Point3d cen = ptCenter;

                        Vector3d nor = Vector3d.ZAxis;
                        Vector3d mAxis = new Vector3d(0.559, -0.36, 0);
                        double rRatio = 0.2;
                        double stAng = -.448;
                        double enAng = 0.229;
                        Ellipse ellipsehose1 = new Ellipse(cen, nor, mAxis, rRatio, stAng, enAng);
                        ents.Add(ellipsehose1);
                        Point3d cen1 = new Point3d(ptCenter.X + 0.09, ptCenter.Y - 0.05, 0);
                        Vector3d nor1 = Vector3d.ZAxis;
                        Vector3d mAxis1 = new Vector3d(0.519, -0.35, 0);
                        double rRatio1 = 0.24;
                        double stAng1 = -.738;
                        double enAng1 = 0.382;
                        Ellipse ellipsehose2 = new Ellipse(cen1, nor1, mAxis1, rRatio1, stAng1, enAng1);
                        ents.Add(ellipsehose2);

                        Point3d center = new Point3d(pt28.X, ptCenter.Y, 0);
                        Vector3d normal = Vector3d.ZAxis;
                        Vector3d majorAxis = new Vector3d(0, 0.02, 0);
                        double radiusRatio = 0.4;
                        double startAng = 0;
                        double endAng = Math.PI * 2;
                        Ellipse ellipse = new Ellipse(center, normal, majorAxis, radiusRatio, startAng, endAng);
                        ents.Add(ellipse);
                        Point3d center1 = new Point3d(pt28.X, ptCenter.Y, 0);
                        Vector3d normal1 = Vector3d.ZAxis;
                        Vector3d majorAxis1 = new Vector3d(0, 0.1, 0);
                        double radiusRatio1 = 0.4;
                        double startAng1 = 0;
                        double endAng1 = Math.PI * 2;
                        Ellipse ellipse1 = new Ellipse(center1, normal1, majorAxis1, radiusRatio1, startAng1, endAng1);
                        ents.Add(ellipse1);

                        TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                        ObjectId mtStyleid = db.Textstyle;

                        if (ts.Has("SansSerif"))
                        {
                            mtStyleid = ts["SansSerif"];
                        }
                        MText txt = new MText();
                        txt.Contents = Commands.tmpmarkstring;
                        txt.SetDatabaseDefaults(db);
                        txt.Layer = "_Fire Fighting Installation";
                        txt.TextHeight = 0.08;
                        txt.TextStyleId = mtStyleid;
                        txt.Attachment = AttachmentPoint.MiddleCenter;
                        txt.Location = ptCenter;

                        txt.Width = 0.5;
                        txt.Height = 0.2;
                        ents.Add(txt);
                        Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                        Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                        ents.Add(centerLine1);
                        ents.Add(centerLine2);
                        foreach (Entity ent in ents)
                        {
                            acBlkTblRec.AppendEntity(ent);
                            tr.AddNewlyCreatedDBObject(ent, true);
                        }
                        BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                        var br = new BlockReference(ptCenter, btrId);
                        ms.AppendEntity(br);
                        tr.AddNewlyCreatedDBObject(br, true);
                        tr.Commit();
                    }
                    catch
                    {
                        throw;
                    }
                }
            }
        }
        [CommandMethod("etbs")]
        public void etbs()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_Fire Fighting Installation");
            if ((string)Application.GetSystemVariable("clayer") == "_Fire Fighting Installation")
            {
                Commands.tmpmarkstring = "Fire Men Talk Back(ETBS)";
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                    if (poly != null)
                    {
                        try
                        {
                            TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                            ObjectId mtStyleid = db.Textstyle;
                            if (ts.Has("Romans"))
                            {
                                mtStyleid = ts["Romans"];
                            }
                            Point3d pickPoint = result.PickedPoint;
                            Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                            double param = 0;
                            param = poly.GetParameterAtPoint(oPoint);
                            double sparam = 0, eparam = 0;
                            sparam = (int)param;
                            eparam = sparam + 1;
                            Point3d sp = poly.GetPointAtParameter(sparam);
                            Point3d ep = poly.GetPointAtParameter(eparam);
                            double ang = Angle(sp, ep);
                            Extents3d ext = poly.GeometricExtents;
                            Point3d min = ext.MinPoint;
                            Point3d max = ext.MaxPoint;
                            Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                            BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                            MText txt = new MText();
                            txt.Contents = Commands.tmpmarkstring;
                            txt.SetDatabaseDefaults(db);
                            Point3d ptleft = Getleft(poly);
                            Point3d ptright = Getright(poly);
                            Point3d pttop = Gettop(poly);
                            Point3d ptbottom = Getbottom(poly);
                            double width = ptright.X - ptleft.X;
                            double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Fire Fighting Installation";
                                txt.Height = height / 2; //<==change to your default height
                                                     //txt.Rotation = ang;
                            txt.Width = width / 2;
                            txt.TextHeight = 0.3;
                            txt.TextStyleId = mtStyleid;
                            txt.Attachment = AttachmentPoint.MiddleCenter;
                            txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                            btr.AppendEntity(txt);
                            tr.AddNewlyCreatedDBObject(txt, true);
                        }
                        catch
                        {
                            throw;
                        }
                    }
                    tr.Commit();
                }
            }
            }
        }

        [CommandMethod("ftpendent")]
        public void ftpendent()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireTower");
            if ((string)Application.GetSystemVariable("clayer") == "_FireTower")
            {
                Commands.tmpmarkstring = "Pendent Type";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireTower";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ftUprightType")]
        public void ftUprightType()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireTower");
            if ((string)Application.GetSystemVariable("clayer") == "_FireTower")
            {
                Commands.tmpmarkstring = "Upright Type";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireTower";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ftSideWallType")]
        public void ftSideWallType()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireTower");
            if ((string)Application.GetSystemVariable("clayer") == "_FireTower")
            {
                Commands.tmpmarkstring = "Side Wall Type";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireTower";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }

        [CommandMethod("ftConcealed")]
        public void ftConcealed()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            SetLayerCurrent("_FireTower");
            if ((string)Application.GetSystemVariable("clayer") == "_FireTower")
            {
                Commands.tmpmarkstring = "Concealed";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_FireTower";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("Compartmentation")]
        public void Compartmentation()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Compartmentation");
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Polyline: ");
            options.SetRejectMessage("\nSelected object is no a Polyline.");
            options.AddAllowedClass(typeof(Polyline), true);
            PromptEntityResult result = ed.GetEntity(options);
            if ((string)Application.GetSystemVariable("clayer") == "_Compartmentation")
            {
                Commands.tmpmarkstring = "Compartmentation Floor";
                if (result.Status == PromptStatus.OK)
                {
                    // at this point we know an entity have been selected and it is a Polyline
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Polyline poly = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (poly != null)
                        {
                            try
                            {
                                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                                ObjectId mtStyleid = db.Textstyle;
                                if (ts.Has("Romans"))
                                {
                                    mtStyleid = ts["Romans"];
                                }
                                Point3d pickPoint = result.PickedPoint;
                                Point3d oPoint = poly.GetClosestPointTo(pickPoint, ed.GetCurrentView().ViewDirection, false);
                                double param = 0;
                                param = poly.GetParameterAtPoint(oPoint);
                                double sparam = 0, eparam = 0;
                                sparam = (int)param;
                                eparam = sparam + 1;
                                Point3d sp = poly.GetPointAtParameter(sparam);
                                Point3d ep = poly.GetPointAtParameter(eparam);
                                double ang = Angle(sp, ep);
                                Extents3d ext = poly.GeometricExtents;
                                Point3d min = ext.MinPoint;
                                Point3d max = ext.MaxPoint;
                                Point3d geoCtr = Polar(min, Angle(min, max), Distance(min, max) / 2.0);
                                BlockTableRecord btr = (BlockTableRecord)tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite);
                                MText txt = new MText();
                                txt.Contents = Commands.tmpmarkstring;
                                txt.SetDatabaseDefaults(db);
                                Point3d ptleft = Getleft(poly);
                                Point3d ptright = Getright(poly);
                                Point3d pttop = Gettop(poly);
                                Point3d ptbottom = Getbottom(poly);
                                double width = ptright.X - ptleft.X;
                                double height = pttop.Y - ptbottom.Y;
                                txt.Layer = "_Compartmentation";
                                txt.Height = height / 2; //<==change to your default height
                                                         //txt.Rotation = ang;
                                txt.Width = width / 2;
                                txt.TextHeight = 0.3;
                                txt.TextStyleId = mtStyleid;
                                txt.Attachment = AttachmentPoint.MiddleCenter;
                                txt.Location = new Point3d(ptleft.X + width / 2, pttop.Y - height / 2, 0);
                                btr.AppendEntity(txt);
                                tr.AddNewlyCreatedDBObject(txt, true);
                            }
                            catch
                            {
                                throw;
                            }
                        }
                        tr.Commit();
                    }
                }
            }
        }
        /////////////Mark Module End//////////////////////////

        ////////////Tool Submenu Function////////////////////
        [CommandMethod("shla")]
        public static void ShowAllLayers()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            Plugin.allLayers = Commands.LayersToList(db);
            List<string> offlayers = new List<string>();
            offlayers.Clear();
            TurnOnLayers(Plugin.allLayers, offlayers);
        }

        [CommandMethod("shld")]
        public static void ShowOnlyPreValLayers()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            Plugin.allLayers = Commands.LayersToList(db);
            List<string> onlayers = new List<string>();
            List<string> offlayers = new List<string>();
            foreach (string str in Plugin.allLayers)
            {
                if (str.Contains("BP_"))
                    onlayers.Add(str);
                else
                    offlayers.Add(str);
            }
            TurnOnLayers(onlayers, offlayers);
        }

        [CommandMethod("shlo")]
        public static void ShowOtherLayers()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            Plugin.allLayers = Commands.LayersToList(db);
            List<string> onlayers = new List<string>();
            List<string> offlayers = new List<string>();
            foreach (string str in Plugin.allLayers)
            {
                if (str.Contains("_"))
                    offlayers.Add(str);
                else
                    onlayers.Add(str);
            }
            TurnOnLayers(onlayers, offlayers);
        }

        [CommandMethod("shlap")]
        public static void AllPrevalLayers()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            Plugin.allLayers = Commands.LayersToList(db);
            List<string> onlayers = new List<string>();
            List<string> offlayers = new List<string>();
            foreach (string str in Plugin.allLayers)
            {
                if (str[0] == '_')
                    onlayers.Add(str);
                else
                    offlayers.Add(str);
            }
            TurnOnLayers(onlayers, offlayers);
        }

        [CommandMethod("shllp")]
        public static void ShowPreValLayoutLevelLayers()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            string strpath = System.IO.Directory.GetCurrentDirectory() + "\\" + "llevel.tdb";
            List<string> Layerlevellayers = new List<string>();
            List<string> offlayers = new List<string>();
            List<string> onlayers = new List<string>();
            if (System.IO.File.Exists(strpath))
            {
                foreach (string strln in System.IO.File.ReadLines(strpath))
                {
                    Layerlevellayers.Add(strln);
                }
            }
            foreach (string str in Plugin.allLayers)
            {
                if (IsincludedinList(str, Layerlevellayers))
                    onlayers.Add(str);
                else
                    offlayers.Add(str);
            }
            TurnOnLayers(onlayers, offlayers);
        }

        [CommandMethod("shlbp")]
        public static void ShowPreValBuildingLevelLayers()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            string strpath = System.IO.Directory.GetCurrentDirectory() + "\\" + "blevel.tdb";
            List<string> Buildinglevellayers = new List<string>();
            List<string> offlayers = new List<string>();
            List<string> onlayers = new List<string>();
            if (System.IO.File.Exists(strpath))
            {
                foreach (string strln in System.IO.File.ReadLines(strpath))
                {
                    Buildinglevellayers.Add(strln);
                }
            }
            foreach (string str in Plugin.allLayers)
            {
                if (IsincludedinList(str, Buildinglevellayers))
                    onlayers.Add(str);
                else
                    offlayers.Add(str);
            }
            TurnOnLayers(onlayers, offlayers);
        }

        //////////Tool Submenu Function End///////////////////////////
        [CommandMethod("lncvt")]
        public static void LineConvert()
        {
            var frm = new LineConversion();
            if(frm.ShowDialog()==DialogResult.OK)
            {

            }
            
        }
        [CommandMethod("premk")]
        public void PolylineEdit()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            var resultSet = PromptForPolylineSSet("Select Lines to convert to Polyline");
            if (resultSet == null)
                return;
            ObjectId[] oids = resultSet.GetObjectIds();
            List<Line> lnlist = new List<Line>();
            foreach (SelectedObject obj in resultSet)
            {
                if (obj != null)
                {
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Line ln = tr.GetObject(obj.ObjectId, OpenMode.ForRead, false) as Line;
                        if (ln != null)
                        {
                            lnlist.Add(ln);
                        }
                        tr.Commit();
                    }
                }
            }
            using (Transaction acTrans = db.TransactionManager.StartTransaction())
            {
                BlockTable acBlkTbl;
                acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                   OpenMode.ForRead) as BlockTable;
                BlockTableRecord acBlkTblRec;
                acBlkTblRec = acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                      OpenMode.ForWrite) as BlockTableRecord;
                Polyline acPoly = new Polyline();
                int cnt = 0;
                foreach (Line lnseg in lnlist)
                {
                    acPoly.AddVertexAt(cnt, new Point2d(lnseg.StartPoint.X, lnseg.StartPoint.Y), 0, 0, 0);
                    cnt++;
                    acPoly.AddVertexAt(cnt, new Point2d(lnseg.EndPoint.X, lnseg.EndPoint.Y), 0, 0, 0);
                    cnt++;
                }
                acBlkTblRec.AppendEntity(acPoly);
                acTrans.AddNewlyCreatedDBObject(acPoly, true);
                acTrans.Commit();
            }
            foreach (SelectedObject obj in resultSet)
            {
                if (obj != null)
                {
                    using (Transaction tr = db.TransactionManager.StartTransaction())
                    {
                        Line ln = tr.GetObject(obj.ObjectId, OpenMode.ForWrite, false) as Line;
                        if (ln != null)
                        {
                            ln.Erase(true);
                        }
                        tr.Commit();
                    }
                }
            }
        }
        [CommandMethod("spt")]
        public void selectProjType()
        {
            var frm = new ProjTypeForm();
            frm.Show();
            WriteToNOD();
        }
        [CommandMethod("CB")]
        public void CreateBlock()
        {
            Document doc = Application.DocumentManager.MdiActiveDocument;
            Database db = doc.Database;
            Editor ed = doc.Editor;
            Transaction tr = db.TransactionManager.StartTransaction();

            using (tr)
            {
                BlockTable bt =(BlockTable)tr.GetObject(db.BlockTableId,OpenMode.ForRead);

                PromptStringOptions pso =new PromptStringOptions( "\nEnter new block name: " );
                pso.AllowSpaces = true;
                string blkName = "";
                do
                {
                    PromptResult pr = ed.GetString(pso);
                    if (pr.Status != PromptStatus.OK)
                        return;
                    try
                    {
                        SymbolUtilityServices.ValidateSymbolName(pr.StringResult,false);
                        // Only set the block name if it isn't in use

                        if (bt.Has(pr.StringResult))
                            ed.WriteMessage("\nA block with this name already exists.");
                        else
                            blkName = pr.StringResult;
                    }
                    catch
                    {
                        ed.WriteMessage("\nInvalid block name.");
                    }
                } while (blkName == "");
                // Create our new block table record...
                BlockTableRecord btr = new BlockTableRecord();
                // ... and set its properties
                btr.Name = blkName;
                // Add the new block to the block table
                bt.UpgradeOpen();
                ObjectId btrId = bt.Add(btr);
                tr.AddNewlyCreatedDBObject(btr, true);
                // Add some Lines to the block to form a square
                // (the entities belong directly to the block)
                DBObjectCollection ents = SquareOfLines();
                foreach (Entity ent in ents)
                {
                    btr.AppendEntity(ent);
                    tr.AddNewlyCreatedDBObject(ent, true);
                }
                // Add a block reference to the model space
                BlockTableRecord ms =
                  (BlockTableRecord)tr.GetObject(
                    bt[BlockTableRecord.ModelSpace],
                    OpenMode.ForWrite
                  );

                BlockReference br =
                  new BlockReference(Point3d.Origin, btrId);
                ms.AppendEntity(br);
                tr.AddNewlyCreatedDBObject(br, true);
                // Commit the transaction
                tr.Commit();
                // Report what we've done
                ed.WriteMessage(
                  "\nCreated block named \"{0}\" containing {1} entities.",
                  blkName, ents.Count
                );
            }
        }


        private DBObjectCollection SquareOfLines()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            DBObjectCollection ents = new DBObjectCollection();
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the north Point: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            SetLayerCurrent("_PrintAdditionalDetail");
            // A function to generate a set of entities for our block
            if (pPtRes.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    
                    Circle acCirc = new Circle();
                    acCirc.SetDatabaseDefaults();
                    acCirc.Center = ptCenter;
                    acCirc.Radius = 2;
                    ents.Add(acCirc);

                    Circle acCirc1 = new Circle();
                    acCirc1.SetDatabaseDefaults();
                    acCirc1.Center = ptCenter;
                    acCirc1.Radius = 3;
                    ents.Add(acCirc1);

                    Circle acCirc2 = new Circle();
                    acCirc2.SetDatabaseDefaults();
                    acCirc2.Center = ptCenter;
                    acCirc2.Radius = 6;
                    ents.Add(acCirc2);

                    Polyline horPolyL = new Polyline();
                    horPolyL.SetDatabaseDefaults();
                    horPolyL.AddVertexAt(0, new Point2d(ptCenter.X - acCirc.Radius, ptCenter.Y), 0, 0, 0);
                    horPolyL.AddVertexAt(1, new Point2d(ptCenter.X - acCirc2.Radius, ptCenter.Y), 0, 0, 0);
                    horPolyL.Closed = true;
                    ents.Add(horPolyL);

                    Polyline horPolyR = new Polyline();
                    horPolyR.SetDatabaseDefaults();
                    horPolyR.AddVertexAt(0, new Point2d(ptCenter.X + acCirc.Radius, ptCenter.Y), 0, 0, 0);
                    horPolyR.AddVertexAt(1, new Point2d(ptCenter.X + acCirc2.Radius, ptCenter.Y), 0, 0, 0);
                    horPolyR.Closed = true;
                    ents.Add(horPolyR);

                    Polyline verrPolyL = new Polyline();
                    verrPolyL.SetDatabaseDefaults();
                    verrPolyL.AddVertexAt(0, new Point2d(ptCenter.X, ptCenter.Y - acCirc.Radius), 0, 0, 0);
                    verrPolyL.AddVertexAt(1, new Point2d(ptCenter.X, ptCenter.Y - acCirc2.Radius), 0, 0, 0);
                    verrPolyL.Closed = true;
                    ents.Add(verrPolyL);

                    Polyline verrPolyR = new Polyline();
                    verrPolyR.SetDatabaseDefaults();
                    verrPolyR.AddVertexAt(0, new Point2d(ptCenter.X, ptCenter.Y + acCirc.Radius), 0, 0, 0);
                    verrPolyR.AddVertexAt(1, new Point2d(ptCenter.X, ptCenter.Y + acCirc2.Radius), 0, 0, 0);
                    verrPolyR.Closed = true;
                    ents.Add(verrPolyR);

                    Polyline hypo = new Polyline();
                    hypo.SetDatabaseDefaults();
                    hypo.AddVertexAt(0, new Point2d(ptCenter.X - acCirc2.Radius, ptCenter.Y), 0, 0, 0);
                    hypo.AddVertexAt(1, new Point2d(ptCenter.X, ptCenter.Y + acCirc2.Radius), 0, 0, 0);
                    hypo.AddVertexAt(2, new Point2d(ptCenter.X + acCirc2.Radius, ptCenter.Y), 0, 0, 0);
                    ents.Add(hypo);

                    TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                    ObjectId mtStyleid = db.Textstyle;
                    MText Ntxt = new MText();
                    Ntxt.Contents = "N";
                    Ntxt.Location = new Point3d(ptCenter.X - acCirc.Radius / 2, ptCenter.Y - acCirc.Radius * Math.Asin(0.5)-0.3, 0);
                    Ntxt.Width = acCirc.Radius*1.5;
                    Ntxt.Height = Ntxt.Width;
                    Ntxt.TextStyleId = mtStyleid;
                    Ntxt.TextHeight = Ntxt.Height;
                    Ntxt.Attachment = AttachmentPoint.BottomLeft;
                    ents.Add(Ntxt);
                }
            }
            return ents;     
        }

        private DBObjectCollection makefloorcircle(Point3d ptCenter)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Floor");
            DBObjectCollection ents = new DBObjectCollection();
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {  
                // Create a circle that is at 2,3 with a radius of 4.25
                Circle acCirc = new Circle();
                acCirc.SetDatabaseDefaults();
                acCirc.Center = ptCenter;
                acCirc.Radius = 0.075;
                ents.Add(acCirc);

                Circle acCirc1 = new Circle();
                acCirc1.SetDatabaseDefaults();
                acCirc1.Center = ptCenter;
                acCirc1.Radius = 0.15;
                ents.Add(acCirc1);

                Line horLine = new Line(new Point3d(ptCenter.X - acCirc1.Radius, ptCenter.Y, 0), new Point3d(ptCenter.X + acCirc1.Radius, ptCenter.Y, 0));
                horLine.SetDatabaseDefaults(); 
                ents.Add(horLine);

                Line verLine = new Line(new Point3d(ptCenter.X, ptCenter.Y - acCirc1.Radius, 0), new Point3d(ptCenter.X, ptCenter.Y + acCirc1.Radius, 0));
                verLine.SetDatabaseDefaults();
                ents.Add(verLine);
            }
            return ents;
        }
        private DBObjectCollection makeResiBUAcircle(Point3d ptCenter)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_ResiBUAOutLine");
            DBObjectCollection ents = new DBObjectCollection();
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                Circle acCirc1 = new Circle();
                acCirc1.SetDatabaseDefaults();
                acCirc1.Center = new Point3d(ptCenter.X + 1, ptCenter.Y, 0);
                acCirc1.Radius = 0.15;
                ents.Add(acCirc1);

                Line horLine1 = new Line(new Point3d(ptCenter.X + 1 - acCirc1.Radius, ptCenter.Y, 0), new Point3d(ptCenter.X + 1 + acCirc1.Radius, ptCenter.Y, 0));
                horLine1.SetDatabaseDefaults();
                ents.Add(horLine1);

                Line verLine1 = new Line(new Point3d(ptCenter.X + 1, ptCenter.Y - acCirc1.Radius, 0), new Point3d(ptCenter.X + 1, ptCenter.Y + acCirc1.Radius, 0));
                verLine1.SetDatabaseDefaults();
                ents.Add(verLine1);
            }
            return ents;
        }
        public static bool IshasText(Polyline pl, List<MText> listmtxt, List<DBText> dBTexts)
        {
            bool bresult = false;
            foreach(MText txt in listmtxt)
            {
                if(NBCrelate.RectangleIsInPolyline(pl, txt.Location,new Point3d(txt.Location.X+txt.Width/2,txt.Location.Y+txt.Height/2,0)))
                {
                    return true;
                }
            }
            if(!bresult)
            {
                foreach(DBText txt in dBTexts)
                {
                    double width1, height1;
                    width1 = txt.GeometricExtents.MaxPoint.X - txt.GeometricExtents.MinPoint.X;
                    height1 = txt.GeometricExtents.MaxPoint.Y - txt.GeometricExtents.MinPoint.Y;
                    bresult = NBCrelate.RectIsInPolyLine(pl, txt.Position, new Point3d(txt.Position.X + width1 / 2,
                        txt.Position.Y + height1, 0));
                    if (bresult)
                        break;
                }
            }
            return bresult;
        }
        public static void CheckingValidEntity()
        {
            string filename;
            filename = Environment.ExpandEnvironmentVariables("%ProgramFiles%\\Autodesk\\ApplicationPlugins\\Preval.bundle\\Contents\\") + "encrypt.exe";
            //string mgdpath= Environment.ExpandEnvironmentVariables("%ProgramFiles%\\Autodesk\\ApplicationPlugins\\Autodesk DWG MgdDBG.bundle");
            filename = filename.Replace(" (x86)", "");

            //filename = System.IO.Directory.GetCurrentDirectory() + "//encrypt.exe";
            if (System.IO.File.Exists(filename))
            {
                using (System.Diagnostics.Process process = new System.Diagnostics.Process())
                {
                    process.StartInfo.FileName = filename;
                    process.StartInfo.Arguments = "olaa"; //argument
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    process.StartInfo.CreateNoWindow = false; //not diplay a windows
                    process.Start();
                    //                string output = process.StandardOutput.ReadToEnd(); //The output result
                    //                process.WaitForExit();
                }
            }
        }
        public static string MakingWind_DoorList()
        {
            string str = "";
            IEnumerable<windowrule> windrulelst = ProsoftAcPlugin.Commands.awindowrule.Distinct();
            IEnumerable<doorrule> doorrulelst = ProsoftAcPlugin.Commands.adoorrule.Distinct();
            List<windowrule> windtmp = new List<windowrule>();
            List<doorrule> doortmp = new List<doorrule>();
            var windlists = windrulelst.GroupBy(windowrule => windowrule.kind).OrderBy(group => group.Key).Select(group => group.ToList()).ToList();
            var doorlists = doorrulelst.GroupBy(windowrule => windowrule.kind).OrderBy(group => group.Key).Select(group => group.ToList()).ToList();
            foreach (List<windowrule> grpinst in windlists)
            {
                for (int i = 0; i < 1; i++)
                {
                    windowrule wrule = grpinst[i];
                    str = str + "\n" + wrule.kind + ": " + "Width: " + wrule.width.ToString() + ", " + "Height: " + wrule.height.ToString()
                        + ", " + "Depth: " + wrule.depth.ToString();
                }
            }
            foreach (List<doorrule> grpinst in doorlists)
            {
                for (int i = 0; i < 1; i++)
                {
                    doorrule wrule = grpinst[i];
                    str = str + "\n" + wrule.kind + ": " + "Width: " + wrule.width.ToString() + ", " + "Height: " + wrule.height.ToString()
                        + ", " + "Depth: " + wrule.depth.ToString();
                }
            }
            if (str == "")
            {
                str = "There is no inserted Window or Door.";
            }
            return str;
        }
        public static void MakeWind_DoorText(string str, Point3d bestrightPt)
        {
            //Point3d bestrightPt = Commands.Getright(Plugin.azeropLine[0]);

            //foreach (Polyline pl in Plugin.azeropLine)
            //{
            //    if (bestrightPt.X < Commands.Getright(pl).X)
            //        bestrightPt = Commands.Getright(pl);
            //}
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                var blockTable = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                var modelSpace = (BlockTableRecord)tr.GetObject(blockTable[BlockTableRecord.ModelSpace], OpenMode.ForRead);
                foreach (ObjectId id in modelSpace)
                {
                    if (id.ObjectClass.DxfName == "INSERT")
                    {
                        var blockReference = (BlockReference)tr.GetObject(id, OpenMode.ForWrite);
                        ed.WriteMessage("\n" + blockReference.Name);
                        if (blockReference.Name.Contains("Preval_Window_Door"))
                        {
                            blockReference.Erase();
                            break;
                        }
                    }
                }
                tr.Commit();
            }

            Commands.SetLayerCurrent("_PrintAdditionalDetail");

            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                BlockTable acBlkTbl;
                acBlkTbl = tr.GetObject(db.BlockTableId,
                                             OpenMode.ForRead) as BlockTable;
                BlockTableRecord acBlkTblRec = new BlockTableRecord();
                acBlkTblRec.Origin = bestrightPt;
                acBlkTblRec.Name = "Preval_Window_Door " + System.DateTime.Now.Hour.ToString() + System.DateTime.Now.Millisecond.ToString();
                acBlkTbl.UpgradeOpen();
                ObjectId btrId = acBlkTbl.Add(acBlkTblRec);
                tr.AddNewlyCreatedDBObject(acBlkTblRec, true);
                DBObjectCollection ents = PrintText(str, bestrightPt);

                foreach (Entity ent in ents)
                {
                    acBlkTblRec.AppendEntity(ent);
                    tr.AddNewlyCreatedDBObject(ent, true);
                }
                BlockTableRecord ms = (BlockTableRecord)tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                var br = new BlockReference(bestrightPt, btrId);

                ms.AppendEntity(br);
                tr.AddNewlyCreatedDBObject(br, true);
                tr.Commit();
            }
        }
        private static DBObjectCollection PrintText(string str, Point3d pt)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            DBObjectCollection ents = new DBObjectCollection();
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                ObjectId mtStyleid = db.Textstyle;
                if (ts.Has("Romans"))
                {
                    mtStyleid = ts["Romans"];
                }
                MText txt = new MText();
                txt.Layer = "_PrintAdditionalDetail";
                txt.SetDatabaseDefaults(db);
                txt.Height = 0.5;
                txt.TextStyleId = mtStyleid;
                txt.Location = pt;
                txt.Contents = str;
                ents.Add(txt);
            }
            return ents;
        }

        private DBObjectCollection PendentMaker(Point3d ptCenter, int count)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sprinkler");
            DBObjectCollection ents = new DBObjectCollection();
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                Circle acCirc = new Circle();
                acCirc.SetDatabaseDefaults();
                acCirc.Center = ptCenter;
                acCirc.Radius = 0.08;
                ents.Add(acCirc);
                
                double rad = Math.Asin(0.005 / 0.08);
                for (int index = 0; index < 8; index++)
                {
                    double alpha = Math.PI / 4 * index;
                    Point3d pt1 = new Point3d(ptCenter.X + Math.Cos(alpha - rad) * acCirc.Radius, ptCenter.Y + Math.Sin(alpha - rad)*acCirc.Radius, 0);
                    Point3d pt2 = new Point3d(ptCenter.X + Math.Cos(alpha + rad) * acCirc.Radius, ptCenter.Y + Math.Sin(alpha + rad) * acCirc.Radius, 0);
                    Point3d pt3 = new Point3d(ptCenter.X + Math.Cos(alpha - rad) * acCirc.Radius*3, ptCenter.Y + Math.Sin(alpha - rad) * acCirc.Radius*3, 0);
                    Point3d pt4 = new Point3d(ptCenter.X + Math.Cos(alpha + rad) * acCirc.Radius*3, ptCenter.Y + Math.Sin(alpha + rad) * acCirc.Radius*3, 0);
                    Line Line1= new Line(pt1, pt3);
                    Line Line2 = new Line(pt3, pt4);
                    Line Line3 = new Line(pt4, pt2);
                    Line1.SetDatabaseDefaults();
                    Line2.SetDatabaseDefaults();
                    Line3.SetDatabaseDefaults();
                    ents.Add(Line1);
                    ents.Add(Line2);
                    ents.Add(Line3);
                }
                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                ObjectId mtStyleid = db.Textstyle;

                if (ts.Has("SansSerif"))
                {
                    mtStyleid = ts["SansSerif"];
                }
                MText txt = new MText();
                txt.Contents = Commands.tmpmarkstring+count.ToString();
                txt.SetDatabaseDefaults(db);
                txt.Layer = "_Sprinkler";
                txt.TextHeight = acCirc.Radius/2;
                txt.TextStyleId = mtStyleid;
                txt.Attachment = AttachmentPoint.MiddleCenter;
                txt.Location = ptCenter;
                
                txt.Width = 1.5 * acCirc.Radius;
                txt.Height= 1.5 * acCirc.Radius;
                ents.Add(txt);
                Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                Line centerLine2 = new Line(new Point3d(ptCenter.X , ptCenter.Y-0.01, 0), new Point3d(ptCenter.X , ptCenter.Y+0.01, 0));
                ents.Add(centerLine1);
                ents.Add(centerLine2);
            }
            return ents;
        }
        private DBObjectCollection UprightMaker(Point3d ptCenter, int count)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sprinkler");
            DBObjectCollection ents = new DBObjectCollection();
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                Circle acCirc = new Circle();
                acCirc.SetDatabaseDefaults();
                acCirc.Center = ptCenter;
                acCirc.Radius = 0.21;
                ents.Add(acCirc);

                double rad = Math.Asin(0.015 / acCirc.Radius);
                for (int index = 0; index < 8; index++)
                {
                    double alpha = Math.PI / 4 * index;
                    Point3d pt1 = new Point3d(ptCenter.X + Math.Cos(alpha - rad) * acCirc.Radius, ptCenter.Y + Math.Sin(alpha - rad) * acCirc.Radius, 0);
                    Point3d pt2 = new Point3d(ptCenter.X + Math.Cos(alpha + rad) * acCirc.Radius, ptCenter.Y + Math.Sin(alpha + rad) * acCirc.Radius, 0);
                    Point3d pt3 = new Point3d(ptCenter.X + Math.Cos(alpha - rad) * (acCirc.Radius+0.03), ptCenter.Y + Math.Sin(alpha - rad) * (acCirc.Radius + 0.03), 0);
                    Point3d pt4 = new Point3d(ptCenter.X + Math.Cos(alpha + rad) * (acCirc.Radius + 0.03), ptCenter.Y + Math.Sin(alpha + rad) * (acCirc.Radius + 0.03), 0);
                    Line Line1 = new Line(pt1, pt3);
                    Line Line2 = new Line(pt3, pt4);
                    Line Line3 = new Line(pt4, pt2);
                    Line1.SetDatabaseDefaults();
                    Line2.SetDatabaseDefaults();
                    Line3.SetDatabaseDefaults();
                    ents.Add(Line1);
                    ents.Add(Line2);
                    ents.Add(Line3);
                }
                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                ObjectId mtStyleid = db.Textstyle;

                if (ts.Has("SansSerif"))
                {
                    mtStyleid = ts["SansSerif"];
                }
                MText txt = new MText();
                txt.Contents = Commands.tmpmarkstring+count.ToString();
                txt.SetDatabaseDefaults(db);
                txt.Layer = "_Sprinkler";
                txt.TextHeight = acCirc.Radius / 2;
                txt.TextStyleId = mtStyleid;
                txt.Attachment = AttachmentPoint.MiddleCenter;
                txt.Location = ptCenter;

                txt.Width = 1.5 * acCirc.Radius;
                txt.Height = 1.5 * acCirc.Radius;
                ents.Add(txt);
                Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                ents.Add(centerLine1);
                ents.Add(centerLine2);
            }
            return ents;
        }
        private DBObjectCollection SideWallMaker(Point3d ptCenter,int count)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            SetLayerCurrent("_Sprinkler");
            DBObjectCollection ents = new DBObjectCollection();
            using (Transaction tr = db.TransactionManager.StartTransaction())
            {
                Line Line1 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y-0.015, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y - 0.015, 0));
                Line Line2 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.015, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y + 0.015, 0));
                Line Line3 = new Line(new Point3d(ptCenter.X + 0.125, ptCenter.Y - 0.015, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y - 0.205, 0));
                Line Line4 = new Line(new Point3d(ptCenter.X + 0.125, ptCenter.Y + 0.015, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y + 0.205, 0));
                Line Line5 = new Line(new Point3d(ptCenter.X + 0.125, ptCenter.Y - 0.205, 0), new Point3d(ptCenter.X + 0.185, ptCenter.Y - 0.205, 0));
                Line Line6 = new Line(new Point3d(ptCenter.X + 0.125, ptCenter.Y + 0.205, 0), new Point3d(ptCenter.X + 0.185, ptCenter.Y + 0.205, 0));
                Line Line7 = new Line(new Point3d(ptCenter.X + 0.155, ptCenter.Y - 0.205, 0), new Point3d(ptCenter.X + 0.155, ptCenter.Y + 0.205, 0));
                Line Line8 = new Line(new Point3d(ptCenter.X + 0.185, ptCenter.Y - 0.205, 0), new Point3d(ptCenter.X + 0.185, ptCenter.Y + 0.205, 0));
                Line Line9 = new Line(new Point3d(ptCenter.X -0.125, ptCenter.Y - 0.015, 0), new Point3d(ptCenter.X + 0.09, ptCenter.Y -0.09, 0));
                Line Line10 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.015, 0), new Point3d(ptCenter.X + 0.09, ptCenter.Y + 0.09, 0));
                Line Line11 = new Line(new Point3d(ptCenter.X + 0.09, ptCenter.Y - 0.09, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y - 0.09, 0));
                Line Line12 = new Line(new Point3d(ptCenter.X + 0.09, ptCenter.Y + 0.09, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y + 0.09, 0));
                CircularArc3d arc3Pnt = new CircularArc3d(new Point3d(ptCenter.X + 0.125, ptCenter.Y - 0.09, 0),
                    new Point3d(ptCenter.X + 0.07, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y + 0.09, 0));
                Arc arc = (Arc)Curve.CreateFromGeCurve(arc3Pnt);
                Line Line13 = new Line(new Point3d(ptCenter.X - 0.055, ptCenter.Y - 0.175, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y -0.175, 0));
                Line Line14 = new Line(new Point3d(ptCenter.X - 0.055, ptCenter.Y + 0.175, 0), new Point3d(ptCenter.X + 0.125, ptCenter.Y + 0.175, 0));
                Line Line15 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y - 0.125, 0), new Point3d(ptCenter.X -0.055, ptCenter.Y - 0.175, 0));
                Line Line16 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.125, 0), new Point3d(ptCenter.X - 0.055, ptCenter.Y + 0.175, 0));
                Line Line17 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y -0.015, 0), new Point3d(ptCenter.X - 0.125, ptCenter.Y -0.085, 0));
                Line Line18 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.015, 0), new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.085, 0));
                Line Line19 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y - 0.125, 0), new Point3d(ptCenter.X - 0.125, ptCenter.Y - 0.115, 0));
                Line Line20 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.125, 0), new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.115, 0));
                Line Line21 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y - 0.115, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y - 0.115, 0));
                Line Line22 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y -0.085, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y -0.085, 0));
                Line Line23 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y - 0.015, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y - 0.015, 0));
                Line Line24 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.015, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y + 0.015, 0));
                Line Line25 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.085, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y + 0.085, 0));
                Line Line26 = new Line(new Point3d(ptCenter.X - 0.125, ptCenter.Y + 0.115, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y + 0.115, 0));
                Line Line27 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y - 0.1, 0), new Point3d(ptCenter.X - 0.185, ptCenter.Y -0.1, 0));
                Line Line28 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y, 0), new Point3d(ptCenter.X - 0.185, ptCenter.Y, 0));
                Line Line29 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y + 0.1, 0), new Point3d(ptCenter.X - 0.185, ptCenter.Y + 0.1, 0));
                Line Line30 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y - 0.06, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y - 0.115, 0));
                Line Line31 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y-0.14, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y-0.085, 0));
                Line Line32 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y + 0.04, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y - 0.015, 0));
                Line Line33 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y - 0.04, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y + 0.015, 0));
                Line Line34 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y+0.14, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y+0.085, 0));
                Line Line35 = new Line(new Point3d(ptCenter.X - 0.235, ptCenter.Y + 0.06, 0), new Point3d(ptCenter.X - 0.165, ptCenter.Y + 0.115, 0));
                ents.Add(Line1);
                ents.Add(Line2);
                ents.Add(Line3);
                ents.Add(Line4);
                ents.Add(Line5);
                ents.Add(Line6);
                ents.Add(Line7);
                ents.Add(Line8);
                ents.Add(Line9);
                ents.Add(Line10);
                ents.Add(Line11);
                ents.Add(Line12);
                ents.Add(arc);
                ents.Add(Line13);
                ents.Add(Line14);
                ents.Add(Line15);
                ents.Add(Line16);
                ents.Add(Line17);
                ents.Add(Line18);
                ents.Add(Line19);
                ents.Add(Line20);
                ents.Add(Line21);
                ents.Add(Line22);
                ents.Add(Line23);
                ents.Add(Line24);
                ents.Add(Line25);
                ents.Add(Line26);
                ents.Add(Line27);
                ents.Add(Line28);
                ents.Add(Line29);
                ents.Add(Line30);
                ents.Add(Line31);
                ents.Add(Line32);
                ents.Add(Line33);
                ents.Add(Line34);
                ents.Add(Line35);

                TextStyleTable ts = (TextStyleTable)tr.GetObject(db.TextStyleTableId, OpenMode.ForRead);
                ObjectId mtStyleid = db.Textstyle;

                if (ts.Has("SansSerif"))
                {
                    mtStyleid = ts["SansSerif"];
                }
                MText txt = new MText();
                txt.Contents = Commands.tmpmarkstring+count.ToString();
                txt.SetDatabaseDefaults(db);
                txt.Layer = "_Sprinkler";
                txt.TextHeight = 0.04;
                txt.TextStyleId = mtStyleid;
                txt.Attachment = AttachmentPoint.MiddleCenter;
                txt.Location = ptCenter;

                txt.Width = 0.04;
                txt.Height = 0.04;
                ents.Add(txt);
                Line centerLine1 = new Line(new Point3d(ptCenter.X - 0.01, ptCenter.Y, 0), new Point3d(ptCenter.X + 0.01, ptCenter.Y, 0));
                Line centerLine2 = new Line(new Point3d(ptCenter.X, ptCenter.Y - 0.01, 0), new Point3d(ptCenter.X, ptCenter.Y + 0.01, 0));
                ents.Add(centerLine1);
                ents.Add(centerLine2);
            }
            return ents;
        }
        public static Polyline FilletAt( Polyline pLine, int index, double radius)
        {
            int prev = index == 0 && pLine.Closed ? pLine.NumberOfVertices - 1 : index - 1;
            if (pLine.GetSegmentType(prev) != SegmentType.Line ||
                pLine.GetSegmentType(index) != SegmentType.Line)
            {
                return pLine;
            }
            LineSegment2d seg1 = pLine.GetLineSegment2dAt(prev);
            LineSegment2d seg2 = pLine.GetLineSegment2dAt(index);
            Vector2d vec1 = seg1.StartPoint - seg1.EndPoint;
            Vector2d vec2 = seg2.EndPoint - seg2.StartPoint;
            double angle = (Math.PI - vec1.GetAngleTo(vec2)) / 2.0;
            double dist = radius * Math.Tan(angle);
            if (dist == 0.0 || dist > seg1.Length || dist > seg2.Length)
            {
                return pLine;
            }
            Point2d pt1 = seg1.EndPoint + vec1.GetNormal() * dist;
            Point2d pt2 = seg2.StartPoint + vec2.GetNormal() * dist;
            double bulge = Math.Tan(angle / 2.0);
            if (Clockwise(seg1.StartPoint, seg1.EndPoint, seg2.EndPoint))
            {
                bulge = -bulge;
            }
            pLine.AddVertexAt(index, pt1, bulge, 0.0, 0.0);
            pLine.SetPointAt(index + 1, pt2);
            return pLine;
        }
        private static bool Clockwise(Point2d p1, Point2d p2, Point2d p3)
        {
            return ((p2.X - p1.X) * (p3.Y - p1.Y) - (p2.Y - p1.Y) * (p3.X - p1.X)) < 1e-8;
        }
        static double ComputeParameter(Point3d pointOnCurve, Point3d center, Vector3d majorAxis, double radiusRatio, Vector3d normal)
        {
            double angle = majorAxis.GetAngleTo(center.GetVectorTo(pointOnCurve), normal);
            double param = Math.Atan2(Math.Sin(angle), Math.Cos(angle) * radiusRatio);
            if (param < 0.0)
                param += 2.0 * Math.PI;
            return param;
        }
        static double ComputeParameter(Point3d pointOnCurve, Point3d center, Point3d majorAxisEndPoint, Point3d minorAxisEndPoint)
        {
            Vector3d majorAxis = center.GetVectorTo(majorAxisEndPoint);
            Vector3d minorAxis = center.GetVectorTo(minorAxisEndPoint);
            Vector3d normal = majorAxis.CrossProduct(minorAxis);
            double radiusRatio = minorAxis.Length / majorAxis.Length;
            return ComputeParameter(pointOnCurve, center, majorAxis, radiusRatio, normal);
        }
        [CommandMethod("CreateSemiCircle")]
        public static void CreateSemiCircle_Method()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            PromptPointResult pPtRes;
            PromptPointOptions pPtOpts = new PromptPointOptions("");
            pPtOpts.Message = "\nEnter the center point of the Block: ";
            pPtRes = ed.GetPoint(pPtOpts);
            Point3d ptCenter = pPtRes.Value;
            using (Autodesk.AutoCAD.DatabaseServices.Arc arc = new Autodesk.AutoCAD.DatabaseServices.Arc())
            {
                Point3d startPt = new Point3d(ptCenter.X+2, ptCenter.Y+2, 0);
                Point3d endPt = new Point3d(ptCenter.X+5, ptCenter.Y+5, 0);

                Matrix3d ucs = Application.DocumentManager.MdiActiveDocument.Editor.CurrentUserCoordinateSystem;
                arc.TransformBy(ucs);

                arc.Center = startPt + (endPt - startPt) / 2;
                arc.Radius = endPt.DistanceTo(startPt) / 2;

                Matrix3d ocs2wcs = Matrix3d.PlaneToWorld(arc.Normal);
                Plane plane = new Plane(ocs2wcs.CoordinateSystem3d.Origin, ocs2wcs.CoordinateSystem3d.Xaxis, ocs2wcs.CoordinateSystem3d.Yaxis);

                arc.StartAngle = (startPt - arc.Center).AngleOnPlane(plane);
                arc.EndAngle = (endPt - arc.Center).AngleOnPlane(plane);

                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    BlockTable bt = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                    BlockTableRecord btr = (BlockTableRecord)tr.GetObject(bt[BlockTableRecord.ModelSpace], OpenMode.ForWrite);
                    btr.AppendEntity(arc);
                    tr.AddNewlyCreatedDBObject(arc, true);
                    tr.Commit();
                }
            }
        }
        [CommandMethod("isptpolyrect")]
        public static void IsPtPolyRect()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            Point3d pttxt = new Point3d();
            PromptEntityOptions options = new PromptEntityOptions("\nSelect Text: ");
            options.SetRejectMessage("\nSelected object is no a Text.");
            options.AddAllowedClass(typeof(MText), true);
            options.AddAllowedClass(typeof(DBText), true);
            PromptEntityResult result = ed.GetEntity(options);
            if (result.Status == PromptStatus.OK)
            {
                // at this point we know an entity have been selected and it is a Polyline
                using (Transaction tr = db.TransactionManager.StartTransaction())
                {
                    Entity ent = tr.GetObject(result.ObjectId, OpenMode.ForRead, false) as Entity;
                    if (ent != null)
                    {
                        string enttype = ent.GetType().Name;
                        ed.WriteMessage(enttype);
                        if (enttype == "MText")
                        {
                            MText txt = (MText)ent;
                            pttxt = txt.Location;
                            Application.ShowAlertDialog(txt.Contents);
                        }
                        else
                        {
                            DBText txt = (DBText)ent;
                            pttxt = txt.Position;
                            Application.ShowAlertDialog(txt.TextString);
                        }

                        ed.WriteMessage("Textselected, Select Polyline");
                    }
                    tr.Commit();
                }
                PromptEntityOptions optionspoly = new PromptEntityOptions("\nSelect POlyline: ");
                options.SetRejectMessage("\nSelected object is no a Polyline.");
                options.AddAllowedClass(typeof(Polyline), true);
                PromptEntityResult resultpoly = ed.GetEntity(options);
                if (resultpoly.Status == PromptStatus.OK)
                {
                    using (Transaction trpoly = db.TransactionManager.StartTransaction())
                    {
                        Polyline pl = trpoly.GetObject(resultpoly.ObjectId, OpenMode.ForRead, false) as Polyline;
                        if (pl != null)
                        {
                            bool bptIn = NBCrelate.IsPointInsideRect(pttxt, pl);
                            if (bptIn)
                                Application.ShowAlertDialog("In: "+pttxt.ToString()+"--"+Commands.Getleft(pl).ToString()+Commands.Getright(pl).ToString());
                            else
                                Application.ShowAlertDialog("Out: " + pttxt.ToString() + "--" + Commands.Getleft(pl).ToString() + Commands.Getright(pl).ToString());
                        }
                        trpoly.Commit();
                    }
                }
            }
        }
        public static ObjectId CreateBlockWithHatch(Database db, string blockName)
        {
            using (var tr = db.TransactionManager.StartTransaction())
            {
                var bt = (BlockTable)tr.GetObject(db.BlockTableId, OpenMode.ForRead);
                BlockTableRecord block;
                if (bt.Has(blockName)) return bt[blockName];

                tr.GetObject(db.BlockTableId, OpenMode.ForWrite);
                block = new BlockTableRecord();
                block.Name = blockName;
                var blockId = bt.Add(block);
                tr.AddNewlyCreatedDBObject(block, true);

                var pLine = new Polyline(4) { Closed = true, Layer = "0" };
                pLine.Layer = "0";
                pLine.AddVertexAt(0, new Point2d(-12.0, -12.0), 0.0, 0.0, 0.0);
                pLine.AddVertexAt(0, new Point2d(12.0, -12.0), 0.0, 0.0, 0.0);
                pLine.AddVertexAt(0, new Point2d(12.0, 12.0), 0.0, 0.0, 0.0);
                pLine.AddVertexAt(0, new Point2d(-12.0, 12.0), 0.0, 0.0, 0.0);
                block.AppendEntity(pLine);
                tr.AddNewlyCreatedDBObject(pLine, true);

                var circle = new Circle() { Center = Point3d.Origin, Radius = 8.0, Layer = "0" };
                block.AppendEntity(circle);
                tr.AddNewlyCreatedDBObject(circle, true);
                var ids = new ObjectIdCollection(new[] { circle.ObjectId });

                var hatch = new Hatch() { Layer = "0", PatternScale = 0.5, ColorIndex = 1 };
                hatch.SetHatchPattern(HatchPatternType.PreDefined, "ANSI31");
                block.AppendEntity(hatch);
                tr.AddNewlyCreatedDBObject(hatch, true);
                hatch.Associative = true;
                hatch.AppendLoop(HatchLoopTypes.Default, ids);
                hatch.EvaluateHatch(true);

                tr.Commit();
                return blockId;
            }
        }
        public void roomlyraidraw(List<string> tmplayer)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> roompllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                foreach (string str in tmplayer)
                {
                    if (rmtxt.Text.Contains(str)  && !rmtxt.Contents.ToLower().Contains("wide"))
                    {
                        foreach (Polyline pl in Plugin.azeropline)
                        {
                            if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }
                        }
                    }
                }
                        
                if (tmprmpl.Count != 0)
                {
                    roompllist.Add(getminiAreaPoly(tmprmpl)); 
                }
            }
            
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                foreach (string str in tmplayer)
                {
                    if (rmtxt.TextString.Contains(str) && !rmtxt.TextString.ToLower().Contains("wide"))
                    {
                        foreach (Polyline pl in Plugin.azeropline)
                        {

                            if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }
                        }
                    }
                }                        
                if (tmprmpl.Count != 0)
                    roompllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in roompllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Room";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Room");
        }
        public void RoomlyrTextAIDraw(List<string> tmplayer)
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            foreach (MText txt in Plugin.aZeromTxt)
            {
                foreach (string str in tmplayer)
                {
                    if (txt.Contents.Contains(str) && !txt.Contents.ToLower().Contains("wide"))
                    {
                        foreach (Polyline pl in Plugin.aroompline)
                        {
                            if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                            {

                                using (DocumentLock docLock = doc.LockDocument())
                                {
                                    using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                    {
                                        BlockTable acBlkTbl;
                                        acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                               OpenMode.ForRead, false, true) as BlockTable;
                                        BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                  OpenMode.ForWrite) as BlockTableRecord;
                                        Entity acMText = txt.Clone() as Entity;
                                        acMText.SetDatabaseDefaults();
                                        acMText.Layer = "_Room";
                                        acBlkTblRec.AppendEntity(acMText);
                                        acTrans.AddNewlyCreatedDBObject(acMText, true);
                                        acTrans.Commit();
                                    }
                                    ed.UpdateScreen();
                                }
                                break;
                                if (txt.Contents.Contains("X"))
                                {
                                    using (DocumentLock docLock = doc.LockDocument())
                                    {
                                        using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                        {
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                                   OpenMode.ForRead, false, true) as BlockTable;
                                            BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                      OpenMode.ForWrite) as BlockTableRecord;
                                            Entity acMText = txt.Clone() as Entity;
                                            acMText.SetDatabaseDefaults();
                                            acMText.Layer = "_Room";
                                            acBlkTblRec.AppendEntity(acMText);
                                            acTrans.AddNewlyCreatedDBObject(acMText, true);
                                            acTrans.Commit();
                                        }
                                        ed.UpdateScreen();
                                    }
                                    break;
                                }
                                if (txt.Contents.Contains(".") && !txt.Contents.ToLower().Contains("mt.") && !txt.Contents.ToLower().Contains("wide"))
                                {
                                    using (DocumentLock docLock = doc.LockDocument())
                                    {
                                        using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                        {
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                                   OpenMode.ForRead, false, true) as BlockTable;
                                            BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                      OpenMode.ForWrite) as BlockTableRecord;
                                            Entity acMText = txt.Clone() as Entity;
                                            acMText.SetDatabaseDefaults();
                                            acMText.Layer = "_Room";
                                            acBlkTblRec.AppendEntity(acMText);
                                            acTrans.AddNewlyCreatedDBObject(acMText, true);
                                            acTrans.Commit();
                                        }
                                        ed.UpdateScreen();
                                    }
                                    break;
                                }
                                if (IsNumeric(txt.Contents))
                                {
                                    using (DocumentLock docLock = doc.LockDocument())
                                    {
                                        using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                        {
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                                   OpenMode.ForRead, false, true) as BlockTable;
                                            BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                      OpenMode.ForWrite) as BlockTableRecord;
                                            Entity acMText = txt.Clone() as Entity;
                                            acMText.SetDatabaseDefaults();
                                            acMText.Layer = "_Room";
                                            acBlkTblRec.AppendEntity(acMText);
                                            acTrans.AddNewlyCreatedDBObject(acMText, true);
                                            acTrans.Commit();
                                        }
                                        ed.UpdateScreen();
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                        
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                foreach (string str in tmplayer)
                {
                    if (txt.TextString.Contains(str) && !txt.TextString.Contains("Wide"))
                    {
                        foreach (Polyline pl in Plugin.aroompline)
                        {
                            if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                            {

                                using (DocumentLock docLock = doc.LockDocument())
                                {
                                    using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                    {
                                        BlockTable acBlkTbl;
                                        acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                               OpenMode.ForRead, false, true) as BlockTable;
                                        BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                  OpenMode.ForWrite) as BlockTableRecord;
                                        Entity acMText = txt.Clone() as Entity;
                                        acMText.SetDatabaseDefaults();
                                        acMText.Layer = "_Room";
                                        acBlkTblRec.AppendEntity(acMText);
                                        acTrans.AddNewlyCreatedDBObject(acMText, true);
                                        acTrans.Commit();
                                    }
                                    ed.UpdateScreen();
                                }
                                break;
                                if (txt.TextString.Contains("X"))
                                {
                                    using (DocumentLock docLock = doc.LockDocument())
                                    {
                                        using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                        {
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                                   OpenMode.ForRead, false, true) as BlockTable;
                                            BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                      OpenMode.ForWrite) as BlockTableRecord;
                                            Entity acMText = txt.Clone() as Entity;
                                            acMText.SetDatabaseDefaults();
                                            acMText.Layer = "_Room";
                                            acBlkTblRec.AppendEntity(acMText);
                                            acTrans.AddNewlyCreatedDBObject(acMText, true);
                                            acTrans.Commit();
                                        }
                                        ed.UpdateScreen();
                                    }
                                    break;
                                }
                                if (txt.TextString.Contains(".") && !txt.TextString.Contains("Wide"))
                                {
                                    using (DocumentLock docLock = doc.LockDocument())
                                    {
                                        using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                        {
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                                   OpenMode.ForRead, false, true) as BlockTable;
                                            BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                      OpenMode.ForWrite) as BlockTableRecord;
                                            Entity acMText = txt.Clone() as Entity;
                                            acMText.SetDatabaseDefaults();
                                            acMText.Layer = "_Room";
                                            acBlkTblRec.AppendEntity(acMText);
                                            acTrans.AddNewlyCreatedDBObject(acMText, true);
                                            acTrans.Commit();
                                        }
                                        ed.UpdateScreen();
                                    }
                                    break;
                                }
                                if (IsNumeric(txt.TextString))
                                {
                                    using (DocumentLock docLock = doc.LockDocument())
                                    {
                                        using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                        {
                                            BlockTable acBlkTbl;
                                            acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                                   OpenMode.ForRead, false, true) as BlockTable;
                                            BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                                      OpenMode.ForWrite) as BlockTableRecord;
                                            Entity acMText = txt.Clone() as Entity;
                                            acMText.SetDatabaseDefaults();
                                            acMText.Layer = "_Room";
                                            acBlkTblRec.AppendEntity(acMText);
                                            acTrans.AddNewlyCreatedDBObject(acMText, true);
                                            acTrans.Commit();
                                        }
                                        ed.UpdateScreen();
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                        
            }
            Plugin.aroompline.Clear();
            Plugin.aroomNmTxt.Clear();
            Plugin.aRoomDBTxt.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Room");
        }
        public void WindowlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Substring(0, 1) == "w" || rmtxt.Contents.ToLower().Substring(0, 1) == "v")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Substring(0, 1) == "w" || rmtxt.TextString.ToLower().Substring(0, 1) == "v")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }                    
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Window";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Window");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Substring(0, 1) == "w" || txt.Contents.ToLower().Substring(0, 1) == "v")
                {
                    foreach (Polyline pl in Plugin.awindowpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {

                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Window";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }                    
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Substring(0, 1) == "w" || txt.TextString.ToLower().Substring(0, 1) == "v")
                {
                    foreach (Polyline pl in Plugin.awindowpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {

                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Window";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }                    
            }
            Plugin.awindowpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Window");
        }
        public void DoorlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                string str = rmtxt.Contents.ToLower();
                if (str == "d" || Regex.IsMatch(str, @"^\w{1}\d{1,3}$"))
                {                    
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                string str = rmtxt.TextString.ToLower();
                if (str == "d" || Regex.IsMatch(str, @"^\w{1}\d{1,3}$"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Door";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Door");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Substring(0, 1) == "d")
                {
                    foreach (Polyline pl in Plugin.adoorpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {

                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Door";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Substring(0, 1) == "d")
                {
                    foreach (Polyline pl in Plugin.adoorpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {

                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Door";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }                    
            }
            Plugin.adoorpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Door");
        }
        public void LiftlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower() == "lift")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower() == "lift")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Lift";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Lift");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower() == "lift")
                {
                    foreach (Polyline pl in Plugin.aLiftpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Lift";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }                    
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower() == "lift")
                {
                    foreach (Polyline pl in Plugin.aLiftpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Lift";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }                    
            }
            Plugin.aLiftpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Lift");
        }
        public void StaircaselyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower() == "staircase")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                    if (tmprmpl.Count != 0)
                        windpllist.Add(getminiAreaPoly(tmprmpl));
                }
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();

                if (rmtxt.TextString.ToLower() == "staircase")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                    if (tmprmpl.Count != 0)
                        windpllist.Add(getminiAreaPoly(tmprmpl));
                }                    
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_StairCase";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_StairCase");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower() == "staircase")
                {
                    foreach (Polyline pl in Plugin.aStairpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_StairCase";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }                    
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower() == "staircase")
                {
                    foreach (Polyline pl in Plugin.aStairpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_StairCase";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (Polyline pl in Plugin.aStairpline)
            {
                foreach (Polyline plin in Plugin.azeropline)
                {
                    if (plin.Closed == false&&plin!=pl&&plin.Area!=pl.Area)
                    {
                        if (NBCrelate.ISPolyInPoly(pl, plin))
                        {
                            if (NBCrelate.checkTwoPlineTchOrIntersect(pl, plin))
                            {
                                List<ObjectId> tmpobjlist = new List<ObjectId>();
                                tmpobjlist.Add(plin.ObjectId);
                                //Application.ShowAlertDialog("STAIR");
                                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                                {
                                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                                    Entity plrm = plin.Clone() as Entity;
                                    //ed.SetImpliedSelection(tmpobjlist.ToArray());
                                    plrm.Layer = "_StairCase";
                                    var id = acBlkTblRec.AppendEntity(plrm);
                                    tr.AddNewlyCreatedDBObject(plrm, true);
                                    ed.UpdateScreen();
                                    tr.Commit();
                                }
                            }
                        }
                    }
                        
                }
            }
            Plugin.aStairpline.Clear();
            Plugin.aStairTxt.Clear();
            Plugin.aStairDBText.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_StairCase");
        }
        public void TerracelyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower() == "terrace")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower() == "terrace")
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Terrace";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Terrace");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower() == "terrace")
                {
                    foreach (Polyline pl in Plugin.aTerracepline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Terrace";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower() == "terrace")
                {
                    foreach (Polyline pl in Plugin.aTerracepline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Terrace";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }                    
            }
            Plugin.aTerracepline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Terrace");
        }
        public void FloorlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains( "floor plan"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("floor plan"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Floor";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Floor");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("floor plan"))
                {
                    foreach (Polyline pl in Plugin.aFloorpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Floor";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }                    
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("floor plan"))
                {
                    foreach (Polyline pl in Plugin.aFloorpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Floor";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aFloorpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Floor");
        }
        public void ParkinglyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("parking"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("parking"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Parking";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Parking");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("parking"))
                {
                    foreach (Polyline pl in Plugin.aParkingpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Parking";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("parking"))
                {
                    foreach (Polyline pl in Plugin.aParkingpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Parking";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aParkingpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Parking");
        }
        public void SitePlanlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("site plan"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("site plan"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_SitePlan";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_SitePlan");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("site plan"))
                {
                    foreach (Polyline pl in Plugin.aSitePlanplilne)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_SitePlan";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("site plan"))
                {
                    foreach (Polyline pl in Plugin.aSitePlanplilne)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_SitePlan";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aSitePlanplilne.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_SitePlan");
        }
        public void ProposedWrklyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach(Polyline plsite in Plugin.aSitePlanplilne)
            {
                foreach (MText rmtxt in Plugin.aZeromTxt)
                {
                    List<Polyline> tmprmpl = new List<Polyline>();
                    if (rmtxt.Contents.ToLower().Contains("proposed")&&!rmtxt.Contents.ToLower().Contains("road"))
                    {
                        foreach (Polyline pl in Plugin.azeropline)
                        {
                            if(NBCrelate.ISPolyInPoly(plsite,pl))
                                if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }
                        }
                    }
                    if (tmprmpl.Count != 0)
                        windpllist.Add(getminiAreaPoly(tmprmpl));
                }
            }
            foreach (Polyline plsite in Plugin.aSitePlanplilne)
            {
                foreach (DBText rmtxt in Plugin.aZeroTxt)
                {
                    List<Polyline> tmprmpl = new List<Polyline>();
                    if (rmtxt.TextString.ToLower().Contains("proposed")&&!rmtxt.TextString.ToLower().Contains("road"))
                    {
                        foreach (Polyline pl in Plugin.azeropline)
                        {
                            if (NBCrelate.ISPolyInPoly(plsite, pl))
                                if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }
                        }
                    }
                    if (tmprmpl.Count != 0)
                        windpllist.Add(getminiRectPoly(tmprmpl));
                }
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_ProposedWork";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_ProposedWork");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("proposed") && !txt.Contents.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.aprpwrkpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_ProposedWork";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("proposed") && !txt.TextString.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.aprpwrkpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_ProposedWork";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;

                        }
                    }
                }
            }
            Plugin.aprpwrkpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_ProposedWork");
        }
        public void MainRoadlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (Polyline plsite in Plugin.aSitePlanplilne)
            {
                foreach (MText rmtxt in Plugin.aZeromTxt)
                {
                    List<Polyline> tmprmpl = new List<Polyline>();
                    if (rmtxt.Contents.ToLower().Contains("proposed") && rmtxt.Contents.ToLower().Contains("road"))
                    {
                        foreach (Polyline pl in Plugin.azeropline)
                        {
                            if (NBCrelate.ISPolyInPoly(plsite, pl))
                                if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                                {
                                    tmprmpl.Add(pl);
                                    continue;
                                }
                        }
                    }
                    if (tmprmpl.Count != 0)
                        windpllist.Add(getminiAreaPoly(tmprmpl));
                }
            }
            foreach (Polyline plsite in Plugin.aSitePlanplilne)
            {
                foreach (DBText rmtxt in Plugin.aZeroTxt)
                {
                    List<Polyline> tmprmpl = new List<Polyline>();
                    if (rmtxt.TextString.ToLower().Contains("proposed") && rmtxt.TextString.ToLower().Contains("road"))
                    {
                        foreach (Polyline pl in Plugin.azeropline)
                        {
                            if (NBCrelate.ISPolyInPoly(plsite, pl))
                                if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                                {
                                    tmprmpl.Add(pl);
                                    continue;
                                }
                        }
                    }
                    if (tmprmpl.Count != 0)
                        windpllist.Add(getminiAreaPoly(tmprmpl));
                }
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_MainRoad";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_MainRoad");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("proposed") && txt.Contents.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.amroadpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_MainRoad";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("proposed") && txt.TextString.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.amroadpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_MainRoad";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.amroadpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_MainRoad");
        }
        public void SectionlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("section"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("section"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Section";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Section");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("section"))
                {
                    foreach (Polyline pl in Plugin.aSectionpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Section";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("section"))
                {
                    foreach (Polyline pl in Plugin.aSectionpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Section";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aSectionpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Section");
        }
        public void FloorInSectionlyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("floor")&& !rmtxt.Contents.ToLower().Contains(","))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            int cnt = 0;
                            foreach(Polyline plflr in Plugin.aFloorpline)
                            {
                                if (NBCrelate.IsPointInsideRect(rmtxt.Location, plflr))
                                    cnt++;
                            }
                            if(cnt==0)
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("floor") && !rmtxt.TextString.ToLower().Contains(","))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            int cnt = 0;
                            foreach (Polyline plflr in Plugin.aFloorpline)
                            {
                                if (NBCrelate.IsPointInsideRect(rmtxt.Position, plflr))
                                    cnt++;
                            }
                            if (cnt == 0)
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_FloorInSection";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_FloorInSection");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("floor") && !txt.Contents.ToLower().Contains(","))
                {
                    foreach (Polyline pl in Plugin.aFlrinSecpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_FloorInSection";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("floor") && !txt.TextString.ToLower().Contains(","))
                {
                    foreach (Polyline pl in Plugin.aFlrinSecpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_FloorInSection";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aFlrinSecpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_FloorInSection");
        }
        public void BuildingNamelyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("proposed") && !rmtxt.Contents.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            bool bflr = false; bool bflrinsec = false;
                            foreach (Polyline plflr in Plugin.aFloorpline)
                            {
                                if (NBCrelate.ISPolyInPoly(pl, plflr))
                                {
                                    bflr = true;
                                    break;
                                }
                            }
                            foreach (Polyline plflrinsec in Plugin.aFlrinSecpline)
                            {
                                if (NBCrelate.ISPolyInPoly(pl, plflrinsec))
                                {
                                    bflrinsec = true;
                                    break;
                                }
                            }
                            if(bflr&&bflrinsec)
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }                                
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }

            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("proposed") && !rmtxt.TextString.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            bool bflr = false; bool bflrinsec = false;
                            foreach (Polyline plflr in Plugin.aFloorpline)
                            {
                                if (NBCrelate.ISPolyInPoly(pl, plflr))
                                {
                                    bflr = true;
                                    break;
                                }
                            }
                            foreach (Polyline plflrinsec in Plugin.aFlrinSecpline)
                            {
                                if (NBCrelate.ISPolyInPoly(pl, plflrinsec))
                                {
                                    bflrinsec = true;
                                    break;
                                }
                            }
                            if (bflr && bflrinsec)
                            {
                                tmprmpl.Add(pl);
                                continue;
                            }
                        }

                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_BuildingName";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_BuildingName");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("proposed") && !txt.Contents.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.abuildingNmpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_BuildingName";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("proposed") && !txt.TextString.ToLower().Contains("road"))
                {
                    foreach (Polyline pl in Plugin.abuildingNmpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_BuildingName";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.abuildingNmpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_BuildingName");
        }
        public void OrganizedOpenSpacelyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("green strip")|| rmtxt.Contents.ToLower().Contains("tot lot") || rmtxt.Contents.ToLower().Contains("green belt"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            break;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiRectPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("green strip") || rmtxt.TextString.ToLower().Contains("tot lot") || rmtxt.TextString.ToLower().Contains("green belt"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            break;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiRectPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_OrganizedOpenSpace";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_OrganizedOpenSpace");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("green strip") || txt.Contents.ToLower().Contains("tot lot") || txt.Contents.ToLower().Contains("green belt"))
                {
                    foreach (Polyline pl in Plugin.aopenspacepline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_OrganizedOpenSpace";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("green strip") || txt.TextString.ToLower().Contains("tot lot"))
                {
                    foreach (Polyline pl in Plugin.aopenspacepline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_OrganizedOpenSpace";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aopenspacepline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_OrganizedOpenSpace");
        }
        public void BalconylyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("balcony"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("balcony"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Balcony";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Balcony");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("balcony"))
                {
                    foreach (Polyline pl in Plugin.aBalconypline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Balcony";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("balcony"))
                {
                    foreach (Polyline pl in Plugin.aBalconypline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Balcony";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aBalconypline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Balcony");
        }
        public void CarpetArealyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("carpetarea"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("carpetarea"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_CarpetArea";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_CarpetArea");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("carpetarea"))
                {
                    foreach (Polyline pl in Plugin.aCarpetpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_CarpetArea";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("carpetarea"))
                {
                    foreach (Polyline pl in Plugin.aCarpetpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_CarpetArea";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aCarpetpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_CarpetArea");
        }
        public void CompoundWalllyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("compoundwall"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("compoundwall"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_CompoundWall";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_CompoundWall");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("compoundwall"))
                {
                    foreach (Polyline pl in Plugin.aCompndwllpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_CompoundWall";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("compoundwall"))
                {
                    foreach (Polyline pl in Plugin.aCompndwllpline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_CompoundWall";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aCompndwllpline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_CompoundWall");
        }
        public void PassagelyrDraw()
        {
            var doc = Application.DocumentManager.MdiActiveDocument;
            var db = doc.Database;
            var ed = doc.Editor;
            List<Polyline> windpllist = new List<Polyline>();
            foreach (MText rmtxt in Plugin.aZeromTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.Contents.ToLower().Contains("passage"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Location, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (DBText rmtxt in Plugin.aZeroTxt)
            {
                List<Polyline> tmprmpl = new List<Polyline>();
                if (rmtxt.TextString.ToLower().Contains("passage"))
                {
                    foreach (Polyline pl in Plugin.azeropline)
                    {
                        if (NBCrelate.IsPointInsideRect(rmtxt.Position, pl))
                        {
                            tmprmpl.Add(pl);
                            continue;
                        }
                    }
                }
                if (tmprmpl.Count != 0)
                    windpllist.Add(getminiAreaPoly(tmprmpl));
            }
            foreach (Polyline pl in windpllist)
            {
                using (var tr = db.TransactionManager.StartOpenCloseTransaction())
                {
                    BlockTable acBlkTbl = tr.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;
                    BlockTableRecord acBlkTblRec = tr.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
                    Entity plrm = pl.Clone() as Entity;
                    plrm.Layer = "_Passage";
                    var id = acBlkTblRec.AppendEntity(plrm);
                    tr.AddNewlyCreatedDBObject(plrm, true);
                    ed.UpdateScreen();
                    tr.Commit();
                }
            }
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Passage");
            foreach (MText txt in Plugin.aZeromTxt)
            {
                if (txt.Contents.ToLower().Contains("passage"))
                {
                    foreach (Polyline pl in Plugin.aPassagepline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Location, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Passage";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            foreach (DBText txt in Plugin.aZeroTxt)
            {
                if (txt.TextString.ToLower().Contains("passage"))
                {
                    foreach (Polyline pl in Plugin.aPassagepline)
                    {
                        if (NBCrelate.IsPointInsideRect(txt.Position, pl))
                        {
                            using (DocumentLock docLock = doc.LockDocument())
                            {
                                using (Transaction acTrans = db.TransactionManager.StartTransaction())
                                {
                                    BlockTable acBlkTbl;
                                    acBlkTbl = acTrans.GetObject(db.BlockTableId,
                                                                           OpenMode.ForRead, false, true) as BlockTable;
                                    BlockTableRecord acBlkTblRec = (BlockTableRecord)acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace],
                                                                              OpenMode.ForWrite) as BlockTableRecord;
                                    Entity acMText = txt.Clone() as Entity;
                                    acMText.SetDatabaseDefaults();
                                    acMText.Layer = "_Passage";
                                    acBlkTblRec.AppendEntity(acMText);
                                    acTrans.AddNewlyCreatedDBObject(acMText, true);
                                    acTrans.Commit();
                                }
                                ed.UpdateScreen();
                            }
                            break;
                        }
                    }
                }
            }
            Plugin.aPassagepline.Clear();
            NBCrelate.GetNeededEntitiesOnLayer(db, "_Passage");
        }

        public Polyline getminiAreaPoly(List<Polyline> pllist)
        {
            Polyline resultpl = pllist[0];
            foreach (Polyline pl in pllist)
            {
                if (resultpl.Area >= pl.Area)
                    resultpl = pl;
            }
            return resultpl;
        }
        public Polyline getminiRectPoly(List<Polyline> pllist)
        {
            Polyline resultpl = pllist[0];
            foreach (Polyline pl in pllist)
            {
                if ((Commands.Getleft(pl).X >= Commands.Getleft(resultpl).X)&& (Commands.Getright(pl).X <= Commands.Getright(resultpl).X)
                    &&(Commands.Getbottom(pl).Y >= Commands.Getbottom(resultpl).Y)&& (Commands.Gettop(pl).X <= Commands.Gettop(resultpl).Y))
                    resultpl = pl;
            }
            return resultpl;
        }
        public static bool IsNumeric(string input)
        {
            int number;
            return int.TryParse(input, out number);
        }
    }
}
